import {
  require_a_ocean
} from "./chunk-L4AYPBJ7.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-DZZM6G22.js";

// node_modules/aframe-extras/src/controls/checkpoint-controls.js
var require_checkpoint_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/checkpoint-controls.js"(exports, module) {
    var EPS = 0.1;
    module.exports = AFRAME.registerComponent("checkpoint-controls", {
      schema: {
        enabled: { default: true },
        mode: { default: "teleport", oneOf: ["teleport", "animate"] },
        animateSpeed: { default: 3 }
      },
      init: function() {
        this.active = true;
        this.checkpoint = null;
        this.isNavMeshConstrained = false;
        this.offset = new THREE.Vector3();
        this.position = new THREE.Vector3();
        this.targetPosition = new THREE.Vector3();
      },
      play: function() {
        this.active = true;
      },
      pause: function() {
        this.active = false;
      },
      setCheckpoint: function(checkpoint) {
        const el = this.el;
        if (!this.active) return;
        if (this.checkpoint === checkpoint) return;
        if (this.checkpoint) {
          el.emit("navigation-end", { checkpoint: this.checkpoint });
        }
        this.checkpoint = checkpoint;
        this.sync();
        if (this.position.distanceTo(this.targetPosition) < EPS) {
          this.checkpoint = null;
          return;
        }
        el.emit("navigation-start", { checkpoint });
        if (this.data.mode === "teleport") {
          this.el.setAttribute("position", this.targetPosition);
          this.checkpoint = null;
          el.emit("navigation-end", { checkpoint });
          el.components["movement-controls"].updateNavLocation();
        }
      },
      isVelocityActive: function() {
        return !!(this.active && this.checkpoint);
      },
      getVelocity: function() {
        if (!this.active) return;
        const data = this.data;
        const offset = this.offset;
        const position = this.position;
        const targetPosition = this.targetPosition;
        const checkpoint = this.checkpoint;
        this.sync();
        if (position.distanceTo(targetPosition) < EPS) {
          this.checkpoint = null;
          this.el.emit("navigation-end", { checkpoint });
          return offset.set(0, 0, 0);
        }
        offset.setLength(data.animateSpeed);
        return offset;
      },
      sync: function() {
        const offset = this.offset;
        const position = this.position;
        const targetPosition = this.targetPosition;
        position.copy(this.el.getAttribute("position"));
        this.checkpoint.object3D.getWorldPosition(targetPosition);
        targetPosition.add(this.checkpoint.components.checkpoint.getOffset());
        offset.copy(targetPosition).sub(position);
      }
    });
  }
});

// node_modules/aframe-extras/lib/GamepadButton.js
var require_GamepadButton = __commonJS({
  "node_modules/aframe-extras/lib/GamepadButton.js"(exports, module) {
    module.exports = Object.assign(function GamepadButton() {
    }, {
      FACE_1: 0,
      FACE_2: 1,
      FACE_3: 2,
      FACE_4: 3,
      L_SHOULDER_1: 4,
      R_SHOULDER_1: 5,
      L_SHOULDER_2: 6,
      R_SHOULDER_2: 7,
      SELECT: 8,
      START: 9,
      DPAD_UP: 12,
      DPAD_DOWN: 13,
      DPAD_LEFT: 14,
      DPAD_RIGHT: 15,
      VENDOR: 16
    });
  }
});

// node_modules/aframe-extras/lib/GamepadButtonEvent.js
var require_GamepadButtonEvent = __commonJS({
  "node_modules/aframe-extras/lib/GamepadButtonEvent.js"(exports, module) {
    function GamepadButtonEvent(type, index, details) {
      this.type = type;
      this.index = index;
      this.pressed = details.pressed;
      this.value = details.value;
    }
    module.exports = GamepadButtonEvent;
  }
});

// node_modules/aframe-extras/src/controls/gamepad-controls.js
var require_gamepad_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/gamepad-controls.js"(exports, module) {
    var GamepadButton = require_GamepadButton();
    var GamepadButtonEvent = require_GamepadButtonEvent();
    var JOYSTICK_EPS = 0.2;
    var Hand = {
      LEFT: "left",
      RIGHT: "right"
    };
    var Joystick = {
      MOVEMENT: 1,
      ROTATION: 2
    };
    module.exports = AFRAME.registerComponent("gamepad-controls", {
      /*******************************************************************
       * Statics
       */
      GamepadButton,
      /*******************************************************************
       * Schema
       */
      schema: {
        // Enable/disable gamepad-controls
        enabled: { default: true },
        // Rotation sensitivity
        rotationSensitivity: { default: 2 }
      },
      /*******************************************************************
       * Core
       */
      /**
       * Called once when component is attached. Generally for initial setup.
       */
      init: function() {
        const sceneEl = this.el.sceneEl;
        this.system = sceneEl.systems["tracked-controls-webxr"] || { controllers: [] };
        this.prevTime = window.performance.now();
        this.buttons = {};
        const rotation = this.el.object3D.rotation;
        this.pitch = new THREE.Object3D();
        this.pitch.rotation.x = rotation.x;
        this.yaw = new THREE.Object3D();
        this.yaw.position.y = 10;
        this.yaw.rotation.y = rotation.y;
        this.yaw.add(this.pitch);
        this._lookVector = new THREE.Vector2();
        this._moveVector = new THREE.Vector2();
        this._dpadVector = new THREE.Vector2();
        sceneEl.addBehavior(this);
      },
      /**
       * Called when component is attached and when component data changes.
       * Generally modifies the entity based on the data.
       */
      update: function() {
        this.tick();
      },
      /**
       * Called on each iteration of main render loop.
       */
      tick: function(t, dt) {
        this.updateButtonState();
        this.updateRotation(dt);
      },
      /**
       * Called when a component is removed (e.g., via removeAttribute).
       * Generally undoes all modifications to the entity.
       */
      remove: function() {
      },
      /*******************************************************************
       * Movement
       */
      isVelocityActive: function() {
        if (!this.data.enabled || !this.isConnected()) return false;
        const dpad = this._dpadVector;
        const joystick = this._moveVector;
        this.getDpad(dpad);
        this.getJoystick(Joystick.MOVEMENT, joystick);
        const inputX = dpad.x || joystick.x;
        const inputY = dpad.y || joystick.y;
        return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;
      },
      getVelocityDelta: function() {
        const dpad = this._dpadVector;
        const joystick = this._moveVector;
        this.getDpad(dpad);
        this.getJoystick(Joystick.MOVEMENT, joystick);
        const inputX = dpad.x || joystick.x;
        const inputY = dpad.y || joystick.y;
        const dVelocity = new THREE.Vector3();
        if (Math.abs(inputX) > JOYSTICK_EPS) {
          dVelocity.x += inputX;
        }
        if (Math.abs(inputY) > JOYSTICK_EPS) {
          dVelocity.z += inputY;
        }
        return dVelocity;
      },
      /*******************************************************************
       * Rotation
       */
      isRotationActive: function() {
        if (!this.data.enabled || !this.isConnected()) return false;
        const joystick = this._lookVector;
        this.getJoystick(Joystick.ROTATION, joystick);
        return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;
      },
      updateRotation: function(dt) {
        if (!this.isRotationActive()) return;
        const data = this.data;
        const yaw = this.yaw;
        const pitch = this.pitch;
        yaw.rotation.y = this.el.object3D.rotation.y;
        pitch.rotation.x = this.el.object3D.rotation.x;
        const lookVector = this._lookVector;
        this.getJoystick(Joystick.ROTATION, lookVector);
        if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;
        if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;
        lookVector.multiplyScalar(data.rotationSensitivity * dt / 1e3);
        yaw.rotation.y -= lookVector.x;
        pitch.rotation.x -= lookVector.y;
        pitch.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));
        this.el.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0);
      },
      /*******************************************************************
       * Button events
       */
      updateButtonState: function() {
        const gamepad = this.getGamepad(Hand.RIGHT);
        if (this.data.enabled && gamepad) {
          for (var i = 0; i < gamepad.buttons.length; i++) {
            if (gamepad.buttons[i].pressed && !this.buttons[i]) {
              this.emit(new GamepadButtonEvent("gamepadbuttondown", i, gamepad.buttons[i]));
            } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {
              this.emit(new GamepadButtonEvent("gamepadbuttonup", i, gamepad.buttons[i]));
            }
            this.buttons[i] = gamepad.buttons[i].pressed;
          }
        } else {
          for (const key in this.buttons) {
            this.buttons[key] = false;
          }
        }
      },
      emit: function(event) {
        this.el.emit(event.type, event);
        this.el.emit(
          event.type + ":" + event.index,
          new GamepadButtonEvent(event.type, event.index, event)
        );
      },
      /*******************************************************************
       * Gamepad state
       */
      /**
       * Returns the Gamepad instance attached to the component. If connected,
       * a proxy-controls component may provide access to Gamepad input from a
       * remote device.
       *
       * @param {string} handPreference
       * @return {Gamepad}
       */
      getGamepad: /* @__PURE__ */ function() {
        const _xrGamepads = [];
        const _empty = [];
        return function(handPreference) {
          const proxyControls = this.el.sceneEl.components["proxy-controls"];
          const proxyGamepad = proxyControls && proxyControls.isConnected() && proxyControls.getGamepad(0);
          if (proxyGamepad) return proxyGamepad;
          _xrGamepads.length = 0;
          for (let i = 0; i < this.system.controllers.length; i++) {
            const xrController = this.system.controllers[i];
            const xrGamepad = xrController ? xrController.gamepad : null;
            _xrGamepads.push(xrGamepad);
            if (xrGamepad && xrController.handedness === handPreference) return xrGamepad;
          }
          const navGamepads = navigator.getGamepads ? navigator.getGamepads() : _empty;
          for (let i = 0; i < navGamepads.length; i++) {
            const navGamepad = navGamepads[i];
            if (navGamepad && navGamepad.hand === handPreference) return navGamepad;
          }
          return _xrGamepads[0] || navGamepads[0];
        };
      }(),
      /**
       * Returns the state of the given button.
       * @param  {number} index The button (0-N) for which to find state.
       * @return {GamepadButton}
       */
      getButton: function(index) {
        return this.getGamepad(Hand.RIGHT).buttons[index];
      },
      /**
       * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will
       * represent X/Y on the first joystick, and 2-3 X/Y on the second.
       * @param  {number} index The axis (0-N) for which to find state.
       * @return {number} On the interval [-1,1].
       */
      getAxis: function(index) {
        return this.getGamepad(index > 1 ? Hand.RIGHT : Hand.LEFT).axes[index];
      },
      /**
       * Returns the state of the specified joystick as a THREE.Vector2.
       * @param  {Joystick} role
       * @param  {THREE.Vector2} target
       * @return {THREE.Vector2}
       */
      getJoystick: function(index, target) {
        const gamepad = this.getGamepad(index === Joystick.MOVEMENT ? Hand.LEFT : Hand.RIGHT);
        if (!gamepad) {
          return target.set(0, 0);
        }
        if (gamepad.mapping === "xr-standard") {
          switch (index) {
            case Joystick.MOVEMENT:
              return target.set(gamepad.axes[2], gamepad.axes[3]);
            case Joystick.ROTATION:
              return target.set(gamepad.axes[2], 0);
          }
        } else {
          switch (index) {
            case Joystick.MOVEMENT:
              return target.set(gamepad.axes[0], gamepad.axes[1]);
            case Joystick.ROTATION:
              return target.set(gamepad.axes[2], gamepad.axes[3]);
          }
        }
        throw new Error('Unexpected joystick index "%d".', index);
      },
      /**
       * Returns the state of the dpad as a THREE.Vector2.
       * @param {THREE.Vector2} target
       * @return {THREE.Vector2}
       */
      getDpad: function(target) {
        const gamepad = this.getGamepad(Hand.LEFT);
        if (!gamepad) {
          return target.set(0, 0);
        }
        if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {
          return target.set(0, 0);
        }
        return target.set(
          (gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0) + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0),
          (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0) + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0)
        );
      },
      /**
       * Returns true if the gamepad is currently connected to the system.
       * @return {boolean}
       */
      isConnected: function() {
        const gamepad = this.getGamepad(Hand.LEFT);
        return !!(gamepad && gamepad.connected);
      },
      /**
       * Returns a string containing some information about the controller. Result
       * may vary across browsers, for a given controller.
       * @return {string}
       */
      getID: function() {
        return this.getGamepad(Hand.LEFT).id;
      }
    });
  }
});

// node_modules/aframe-extras/lib/keyboard.polyfill.js
var require_keyboard_polyfill = __commonJS({
  "node_modules/aframe-extras/lib/keyboard.polyfill.js"() {
    (function(global) {
      var nativeKeyboardEvent = "KeyboardEvent" in global;
      if (!nativeKeyboardEvent)
        global.KeyboardEvent = function KeyboardEvent2() {
          throw TypeError("Illegal constructor");
        };
      if (!("DOM_KEY_LOCATION_STANDARD" in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_STANDARD = 0;
      if (!("DOM_KEY_LOCATION_LEFT" in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_LEFT = 1;
      if (!("DOM_KEY_LOCATION_RIGHT" in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_RIGHT = 2;
      if (!("DOM_KEY_LOCATION_NUMPAD" in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD = 3;
      var STANDARD = window.KeyboardEvent.DOM_KEY_LOCATION_STANDARD, LEFT = window.KeyboardEvent.DOM_KEY_LOCATION_LEFT, RIGHT = window.KeyboardEvent.DOM_KEY_LOCATION_RIGHT, NUMPAD = window.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD;
      function contains(s, ss) {
        return String(s).indexOf(ss) !== -1;
      }
      var os = function() {
        if (contains(navigator.platform, "Win")) {
          return "win";
        }
        if (contains(navigator.platform, "Mac")) {
          return "mac";
        }
        if (contains(navigator.platform, "CrOS")) {
          return "cros";
        }
        if (contains(navigator.platform, "Linux")) {
          return "linux";
        }
        if (contains(navigator.userAgent, "iPad") || contains(navigator.platform, "iPod") || contains(navigator.platform, "iPhone")) {
          return "ios";
        }
        return "";
      }();
      var browser = function() {
        if (contains(navigator.userAgent, "Chrome/")) {
          return "chrome";
        }
        if (contains(navigator.vendor, "Apple")) {
          return "safari";
        }
        if (contains(navigator.userAgent, "MSIE")) {
          return "ie";
        }
        if (contains(navigator.userAgent, "Gecko/")) {
          return "moz";
        }
        if (contains(navigator.userAgent, "Opera/")) {
          return "opera";
        }
        return "";
      }();
      var browser_os = browser + "-" + os;
      function mergeIf(baseTable, select, table) {
        if (browser_os === select || browser === select || os === select) {
          Object.keys(table).forEach(function(keyCode) {
            baseTable[keyCode] = table[keyCode];
          });
        }
      }
      function remap(o, key) {
        var r = {};
        Object.keys(o).forEach(function(k) {
          var item = o[k];
          if (key in item) {
            r[item[key]] = item;
          }
        });
        return r;
      }
      function invert(o) {
        var r = {};
        Object.keys(o).forEach(function(k) {
          r[o[k]] = k;
        });
        return r;
      }
      var keyCodeToInfoTable = {
        // 0x01 - VK_LBUTTON
        // 0x02 - VK_RBUTTON
        3: { code: "Cancel" },
        // [USB: 0x9b] char \x0018 ??? (Not in D3E)
        // 0x04 - VK_MBUTTON
        // 0x05 - VK_XBUTTON1
        // 0x06 - VK_XBUTTON2
        6: { code: "Help" },
        // [USB: 0x75] ???
        // 0x07 - undefined
        8: { code: "Backspace" },
        // [USB: 0x2a] Labelled Delete on Macintosh keyboards.
        9: { code: "Tab" },
        // [USB: 0x2b]
        // 0x0A-0x0B - reserved
        12: { code: "Clear" },
        // [USB: 0x9c] NumPad Center (Not in D3E)
        13: { code: "Enter" },
        // [USB: 0x28]
        // 0x0E-0x0F - undefined
        16: { code: "Shift" },
        17: { code: "Control" },
        18: { code: "Alt" },
        19: { code: "Pause" },
        // [USB: 0x48]
        20: { code: "CapsLock" },
        // [USB: 0x39]
        21: { code: "KanaMode" },
        // [USB: 0x88] - "HangulMode" for Korean layout
        22: { code: "HangulMode" },
        // [USB: 0x90] 0x15 as well in MSDN VK table ???
        23: { code: "JunjaMode" },
        // (Not in D3E)
        24: { code: "FinalMode" },
        // (Not in D3E)
        25: { code: "KanjiMode" },
        // [USB: 0x91] - "HanjaMode" for Korean layout
        // 0x1A - undefined
        27: { code: "Escape" },
        // [USB: 0x29]
        28: { code: "Convert" },
        // [USB: 0x8a]
        29: { code: "NonConvert" },
        // [USB: 0x8b]
        30: { code: "Accept" },
        // (Not in D3E)
        31: { code: "ModeChange" },
        // (Not in D3E)
        32: { code: "Space" },
        // [USB: 0x2c]
        33: { code: "PageUp" },
        // [USB: 0x4b]
        34: { code: "PageDown" },
        // [USB: 0x4e]
        35: { code: "End" },
        // [USB: 0x4d]
        36: { code: "Home" },
        // [USB: 0x4a]
        37: { code: "ArrowLeft" },
        // [USB: 0x50]
        38: { code: "ArrowUp" },
        // [USB: 0x52]
        39: { code: "ArrowRight" },
        // [USB: 0x4f]
        40: { code: "ArrowDown" },
        // [USB: 0x51]
        41: { code: "Select" },
        // (Not in D3E)
        42: { code: "Print" },
        // (Not in D3E)
        43: { code: "Execute" },
        // [USB: 0x74] (Not in D3E)
        44: { code: "PrintScreen" },
        // [USB: 0x46]
        45: { code: "Insert" },
        // [USB: 0x49]
        46: { code: "Delete" },
        // [USB: 0x4c]
        47: { code: "Help" },
        // [USB: 0x75] ???
        48: { code: "Digit0", keyCap: "0" },
        // [USB: 0x27] 0)
        49: { code: "Digit1", keyCap: "1" },
        // [USB: 0x1e] 1!
        50: { code: "Digit2", keyCap: "2" },
        // [USB: 0x1f] 2@
        51: { code: "Digit3", keyCap: "3" },
        // [USB: 0x20] 3#
        52: { code: "Digit4", keyCap: "4" },
        // [USB: 0x21] 4$
        53: { code: "Digit5", keyCap: "5" },
        // [USB: 0x22] 5%
        54: { code: "Digit6", keyCap: "6" },
        // [USB: 0x23] 6^
        55: { code: "Digit7", keyCap: "7" },
        // [USB: 0x24] 7&
        56: { code: "Digit8", keyCap: "8" },
        // [USB: 0x25] 8*
        57: { code: "Digit9", keyCap: "9" },
        // [USB: 0x26] 9(
        // 0x3A-0x40 - undefined
        65: { code: "KeyA", keyCap: "a" },
        // [USB: 0x04]
        66: { code: "KeyB", keyCap: "b" },
        // [USB: 0x05]
        67: { code: "KeyC", keyCap: "c" },
        // [USB: 0x06]
        68: { code: "KeyD", keyCap: "d" },
        // [USB: 0x07]
        69: { code: "KeyE", keyCap: "e" },
        // [USB: 0x08]
        70: { code: "KeyF", keyCap: "f" },
        // [USB: 0x09]
        71: { code: "KeyG", keyCap: "g" },
        // [USB: 0x0a]
        72: { code: "KeyH", keyCap: "h" },
        // [USB: 0x0b]
        73: { code: "KeyI", keyCap: "i" },
        // [USB: 0x0c]
        74: { code: "KeyJ", keyCap: "j" },
        // [USB: 0x0d]
        75: { code: "KeyK", keyCap: "k" },
        // [USB: 0x0e]
        76: { code: "KeyL", keyCap: "l" },
        // [USB: 0x0f]
        77: { code: "KeyM", keyCap: "m" },
        // [USB: 0x10]
        78: { code: "KeyN", keyCap: "n" },
        // [USB: 0x11]
        79: { code: "KeyO", keyCap: "o" },
        // [USB: 0x12]
        80: { code: "KeyP", keyCap: "p" },
        // [USB: 0x13]
        81: { code: "KeyQ", keyCap: "q" },
        // [USB: 0x14]
        82: { code: "KeyR", keyCap: "r" },
        // [USB: 0x15]
        83: { code: "KeyS", keyCap: "s" },
        // [USB: 0x16]
        84: { code: "KeyT", keyCap: "t" },
        // [USB: 0x17]
        85: { code: "KeyU", keyCap: "u" },
        // [USB: 0x18]
        86: { code: "KeyV", keyCap: "v" },
        // [USB: 0x19]
        87: { code: "KeyW", keyCap: "w" },
        // [USB: 0x1a]
        88: { code: "KeyX", keyCap: "x" },
        // [USB: 0x1b]
        89: { code: "KeyY", keyCap: "y" },
        // [USB: 0x1c]
        90: { code: "KeyZ", keyCap: "z" },
        // [USB: 0x1d]
        91: { code: "OSLeft", location: LEFT },
        // [USB: 0xe3]
        92: { code: "OSRight", location: RIGHT },
        // [USB: 0xe7]
        93: { code: "ContextMenu" },
        // [USB: 0x65] Context Menu
        // 0x5E - reserved
        95: { code: "Standby" },
        // [USB: 0x82] Sleep
        96: { code: "Numpad0", keyCap: "0", location: NUMPAD },
        // [USB: 0x62]
        97: { code: "Numpad1", keyCap: "1", location: NUMPAD },
        // [USB: 0x59]
        98: { code: "Numpad2", keyCap: "2", location: NUMPAD },
        // [USB: 0x5a]
        99: { code: "Numpad3", keyCap: "3", location: NUMPAD },
        // [USB: 0x5b]
        100: { code: "Numpad4", keyCap: "4", location: NUMPAD },
        // [USB: 0x5c]
        101: { code: "Numpad5", keyCap: "5", location: NUMPAD },
        // [USB: 0x5d]
        102: { code: "Numpad6", keyCap: "6", location: NUMPAD },
        // [USB: 0x5e]
        103: { code: "Numpad7", keyCap: "7", location: NUMPAD },
        // [USB: 0x5f]
        104: { code: "Numpad8", keyCap: "8", location: NUMPAD },
        // [USB: 0x60]
        105: { code: "Numpad9", keyCap: "9", location: NUMPAD },
        // [USB: 0x61]
        106: { code: "NumpadMultiply", keyCap: "*", location: NUMPAD },
        // [USB: 0x55]
        107: { code: "NumpadAdd", keyCap: "+", location: NUMPAD },
        // [USB: 0x57]
        108: { code: "NumpadComma", keyCap: ",", location: NUMPAD },
        // [USB: 0x85]
        109: { code: "NumpadSubtract", keyCap: "-", location: NUMPAD },
        // [USB: 0x56]
        110: { code: "NumpadDecimal", keyCap: ".", location: NUMPAD },
        // [USB: 0x63]
        111: { code: "NumpadDivide", keyCap: "/", location: NUMPAD },
        // [USB: 0x54]
        112: { code: "F1" },
        // [USB: 0x3a]
        113: { code: "F2" },
        // [USB: 0x3b]
        114: { code: "F3" },
        // [USB: 0x3c]
        115: { code: "F4" },
        // [USB: 0x3d]
        116: { code: "F5" },
        // [USB: 0x3e]
        117: { code: "F6" },
        // [USB: 0x3f]
        118: { code: "F7" },
        // [USB: 0x40]
        119: { code: "F8" },
        // [USB: 0x41]
        120: { code: "F9" },
        // [USB: 0x42]
        121: { code: "F10" },
        // [USB: 0x43]
        122: { code: "F11" },
        // [USB: 0x44]
        123: { code: "F12" },
        // [USB: 0x45]
        124: { code: "F13" },
        // [USB: 0x68]
        125: { code: "F14" },
        // [USB: 0x69]
        126: { code: "F15" },
        // [USB: 0x6a]
        127: { code: "F16" },
        // [USB: 0x6b]
        128: { code: "F17" },
        // [USB: 0x6c]
        129: { code: "F18" },
        // [USB: 0x6d]
        130: { code: "F19" },
        // [USB: 0x6e]
        131: { code: "F20" },
        // [USB: 0x6f]
        132: { code: "F21" },
        // [USB: 0x70]
        133: { code: "F22" },
        // [USB: 0x71]
        134: { code: "F23" },
        // [USB: 0x72]
        135: { code: "F24" },
        // [USB: 0x73]
        // 0x88-0x8F - unassigned
        144: { code: "NumLock", location: NUMPAD },
        // [USB: 0x53]
        145: { code: "ScrollLock" },
        // [USB: 0x47]
        // 0x92-0x96 - OEM specific
        // 0x97-0x9F - unassigned
        // NOTE: 0xA0-0xA5 usually mapped to 0x10-0x12 in browsers
        160: { code: "ShiftLeft", location: LEFT },
        // [USB: 0xe1]
        161: { code: "ShiftRight", location: RIGHT },
        // [USB: 0xe5]
        162: { code: "ControlLeft", location: LEFT },
        // [USB: 0xe0]
        163: { code: "ControlRight", location: RIGHT },
        // [USB: 0xe4]
        164: { code: "AltLeft", location: LEFT },
        // [USB: 0xe2]
        165: { code: "AltRight", location: RIGHT },
        // [USB: 0xe6]
        166: { code: "BrowserBack" },
        // [USB: 0x0c/0x0224]
        167: { code: "BrowserForward" },
        // [USB: 0x0c/0x0225]
        168: { code: "BrowserRefresh" },
        // [USB: 0x0c/0x0227]
        169: { code: "BrowserStop" },
        // [USB: 0x0c/0x0226]
        170: { code: "BrowserSearch" },
        // [USB: 0x0c/0x0221]
        171: { code: "BrowserFavorites" },
        // [USB: 0x0c/0x0228]
        172: { code: "BrowserHome" },
        // [USB: 0x0c/0x0222]
        173: { code: "VolumeMute" },
        // [USB: 0x7f]
        174: { code: "VolumeDown" },
        // [USB: 0x81]
        175: { code: "VolumeUp" },
        // [USB: 0x80]
        176: { code: "MediaTrackNext" },
        // [USB: 0x0c/0x00b5]
        177: { code: "MediaTrackPrevious" },
        // [USB: 0x0c/0x00b6]
        178: { code: "MediaStop" },
        // [USB: 0x0c/0x00b7]
        179: { code: "MediaPlayPause" },
        // [USB: 0x0c/0x00cd]
        180: { code: "LaunchMail" },
        // [USB: 0x0c/0x018a]
        181: { code: "MediaSelect" },
        182: { code: "LaunchApp1" },
        183: { code: "LaunchApp2" },
        // 0xB8-0xB9 - reserved
        186: { code: "Semicolon", keyCap: ";" },
        // [USB: 0x33] ;: (US Standard 101)
        187: { code: "Equal", keyCap: "=" },
        // [USB: 0x2e] =+
        188: { code: "Comma", keyCap: "," },
        // [USB: 0x36] ,<
        189: { code: "Minus", keyCap: "-" },
        // [USB: 0x2d] -_
        190: { code: "Period", keyCap: "." },
        // [USB: 0x37] .>
        191: { code: "Slash", keyCap: "/" },
        // [USB: 0x38] /? (US Standard 101)
        192: { code: "Backquote", keyCap: "`" },
        // [USB: 0x35] `~ (US Standard 101)
        // 0xC1-0xCF - reserved
        // 0xD0-0xD7 - reserved
        // 0xD8-0xDA - unassigned
        219: { code: "BracketLeft", keyCap: "[" },
        // [USB: 0x2f] [{ (US Standard 101)
        220: { code: "Backslash", keyCap: "\\" },
        // [USB: 0x31] \| (US Standard 101)
        221: { code: "BracketRight", keyCap: "]" },
        // [USB: 0x30] ]} (US Standard 101)
        222: { code: "Quote", keyCap: "'" },
        // [USB: 0x34] '" (US Standard 101)
        // 0xDF - miscellaneous/varies
        // 0xE0 - reserved
        // 0xE1 - OEM specific
        226: { code: "IntlBackslash", keyCap: "\\" },
        // [USB: 0x64] \| (UK Standard 102)
        // 0xE3-0xE4 - OEM specific
        229: { code: "Process" },
        // (Not in D3E)
        // 0xE6 - OEM specific
        // 0xE7 - VK_PACKET
        // 0xE8 - unassigned
        // 0xE9-0xEF - OEM specific
        // 0xF0-0xF5 - OEM specific
        246: { code: "Attn" },
        // [USB: 0x9a] (Not in D3E)
        247: { code: "CrSel" },
        // [USB: 0xa3] (Not in D3E)
        248: { code: "ExSel" },
        // [USB: 0xa4] (Not in D3E)
        249: { code: "EraseEof" },
        // (Not in D3E)
        250: { code: "Play" },
        // (Not in D3E)
        251: { code: "ZoomToggle" },
        // (Not in D3E)
        // 0xFC - VK_NONAME - reserved
        // 0xFD - VK_PA1
        254: { code: "Clear" }
        // [USB: 0x9c] (Not in D3E)
      };
      mergeIf(
        keyCodeToInfoTable,
        "moz",
        {
          59: { code: "Semicolon", keyCap: ";" },
          // [USB: 0x33] ;: (US Standard 101)
          61: { code: "Equal", keyCap: "=" },
          // [USB: 0x2e] =+
          107: { code: "Equal", keyCap: "=" },
          // [USB: 0x2e] =+
          109: { code: "Minus", keyCap: "-" },
          // [USB: 0x2d] -_
          187: { code: "NumpadAdd", keyCap: "+", location: NUMPAD },
          // [USB: 0x57]
          189: { code: "NumpadSubtract", keyCap: "-", location: NUMPAD }
          // [USB: 0x56]
        }
      );
      mergeIf(
        keyCodeToInfoTable,
        "moz-mac",
        {
          12: { code: "NumLock", location: NUMPAD },
          // [USB: 0x53]
          173: { code: "Minus", keyCap: "-" }
          // [USB: 0x2d] -_
        }
      );
      mergeIf(
        keyCodeToInfoTable,
        "moz-win",
        {
          173: { code: "Minus", keyCap: "-" }
          // [USB: 0x2d] -_
        }
      );
      mergeIf(
        keyCodeToInfoTable,
        "chrome-mac",
        {
          93: { code: "OSRight", location: RIGHT }
          // [USB: 0xe7]
        }
      );
      if (0) {
        mergeIf(
          keyCodeToInfoTable,
          "chrome-win",
          {
            192: { code: "Quote", keyCap: "'" },
            // [USB: 0x34] '" (US Standard 101)
            222: { code: "Backslash", keyCap: "\\" },
            // [USB: 0x31] \| (US Standard 101)
            223: { code: "Backquote", keyCap: "`" }
            // [USB: 0x35] `~ (US Standard 101)
          }
        );
        mergeIf(
          keyCodeToInfoTable,
          "ie",
          {
            192: { code: "Quote", keyCap: "'" },
            // [USB: 0x34] '" (US Standard 101)
            222: { code: "Backslash", keyCap: "\\" },
            // [USB: 0x31] \| (US Standard 101)
            223: { code: "Backquote", keyCap: "`" }
            // [USB: 0x35] `~ (US Standard 101)
          }
        );
      }
      mergeIf(
        keyCodeToInfoTable,
        "safari",
        {
          3: { code: "Enter" },
          // [USB: 0x28] old Safari
          25: { code: "Tab" }
          // [USB: 0x2b] old Safari for Shift+Tab
        }
      );
      mergeIf(
        keyCodeToInfoTable,
        "ios",
        {
          10: { code: "Enter", location: STANDARD }
          // [USB: 0x28]
        }
      );
      mergeIf(
        keyCodeToInfoTable,
        "safari-mac",
        {
          91: { code: "OSLeft", location: LEFT },
          // [USB: 0xe3]
          93: { code: "OSRight", location: RIGHT },
          // [USB: 0xe7]
          229: { code: "KeyQ", keyCap: "Q" }
          // [USB: 0x14] On alternate presses, Ctrl+Q sends this
        }
      );
      var keyIdentifierTable = {};
      if ("cros" === os) {
        keyIdentifierTable["U+00A0"] = { code: "ShiftLeft", location: LEFT };
        keyIdentifierTable["U+00A1"] = { code: "ShiftRight", location: RIGHT };
        keyIdentifierTable["U+00A2"] = { code: "ControlLeft", location: LEFT };
        keyIdentifierTable["U+00A3"] = { code: "ControlRight", location: RIGHT };
        keyIdentifierTable["U+00A4"] = { code: "AltLeft", location: LEFT };
        keyIdentifierTable["U+00A5"] = { code: "AltRight", location: RIGHT };
      }
      if ("chrome-mac" === browser_os) {
        keyIdentifierTable["U+0010"] = { code: "ContextMenu" };
      }
      if ("safari-mac" === browser_os) {
        keyIdentifierTable["U+0010"] = { code: "ContextMenu" };
      }
      if ("ios" === os) {
        keyIdentifierTable["U+0010"] = { code: "Function" };
        keyIdentifierTable["U+001C"] = { code: "ArrowLeft" };
        keyIdentifierTable["U+001D"] = { code: "ArrowRight" };
        keyIdentifierTable["U+001E"] = { code: "ArrowUp" };
        keyIdentifierTable["U+001F"] = { code: "ArrowDown" };
        keyIdentifierTable["U+0001"] = { code: "Home" };
        keyIdentifierTable["U+0004"] = { code: "End" };
        keyIdentifierTable["U+000B"] = { code: "PageUp" };
        keyIdentifierTable["U+000C"] = { code: "PageDown" };
      }
      var locationTable = [];
      locationTable[LEFT] = {
        16: { code: "ShiftLeft", location: LEFT },
        // [USB: 0xe1]
        17: { code: "ControlLeft", location: LEFT },
        // [USB: 0xe0]
        18: { code: "AltLeft", location: LEFT }
        // [USB: 0xe2]
      };
      locationTable[RIGHT] = {
        16: { code: "ShiftRight", location: RIGHT },
        // [USB: 0xe5]
        17: { code: "ControlRight", location: RIGHT },
        // [USB: 0xe4]
        18: { code: "AltRight", location: RIGHT }
        // [USB: 0xe6]
      };
      locationTable[NUMPAD] = {
        13: { code: "NumpadEnter", location: NUMPAD }
        // [USB: 0x58]
      };
      mergeIf(locationTable[NUMPAD], "moz", {
        109: { code: "NumpadSubtract", location: NUMPAD },
        // [USB: 0x56]
        107: { code: "NumpadAdd", location: NUMPAD }
        // [USB: 0x57]
      });
      mergeIf(locationTable[LEFT], "moz-mac", {
        224: { code: "OSLeft", location: LEFT }
        // [USB: 0xe3]
      });
      mergeIf(locationTable[RIGHT], "moz-mac", {
        224: { code: "OSRight", location: RIGHT }
        // [USB: 0xe7]
      });
      mergeIf(locationTable[RIGHT], "moz-win", {
        91: { code: "OSRight", location: RIGHT }
        // [USB: 0xe7]
      });
      mergeIf(locationTable[RIGHT], "mac", {
        93: { code: "OSRight", location: RIGHT }
        // [USB: 0xe7]
      });
      mergeIf(locationTable[NUMPAD], "chrome-mac", {
        12: { code: "NumLock", location: NUMPAD }
        // [USB: 0x53]
      });
      mergeIf(locationTable[NUMPAD], "safari-mac", {
        12: { code: "NumLock", location: NUMPAD },
        // [USB: 0x53]
        187: { code: "NumpadAdd", location: NUMPAD },
        // [USB: 0x57]
        189: { code: "NumpadSubtract", location: NUMPAD },
        // [USB: 0x56]
        190: { code: "NumpadDecimal", location: NUMPAD },
        // [USB: 0x63]
        191: { code: "NumpadDivide", location: NUMPAD }
        // [USB: 0x54]
      });
      var codeToKeyTable = {
        // Modifier Keys
        ShiftLeft: { key: "Shift" },
        ShiftRight: { key: "Shift" },
        ControlLeft: { key: "Control" },
        ControlRight: { key: "Control" },
        AltLeft: { key: "Alt" },
        AltRight: { key: "Alt" },
        OSLeft: { key: "OS" },
        OSRight: { key: "OS" },
        // Whitespace Keys
        NumpadEnter: { key: "Enter" },
        Space: { key: " " },
        // Printable Keys
        Digit0: { key: "0", shiftKey: ")" },
        Digit1: { key: "1", shiftKey: "!" },
        Digit2: { key: "2", shiftKey: "@" },
        Digit3: { key: "3", shiftKey: "#" },
        Digit4: { key: "4", shiftKey: "$" },
        Digit5: { key: "5", shiftKey: "%" },
        Digit6: { key: "6", shiftKey: "^" },
        Digit7: { key: "7", shiftKey: "&" },
        Digit8: { key: "8", shiftKey: "*" },
        Digit9: { key: "9", shiftKey: "(" },
        KeyA: { key: "a", shiftKey: "A" },
        KeyB: { key: "b", shiftKey: "B" },
        KeyC: { key: "c", shiftKey: "C" },
        KeyD: { key: "d", shiftKey: "D" },
        KeyE: { key: "e", shiftKey: "E" },
        KeyF: { key: "f", shiftKey: "F" },
        KeyG: { key: "g", shiftKey: "G" },
        KeyH: { key: "h", shiftKey: "H" },
        KeyI: { key: "i", shiftKey: "I" },
        KeyJ: { key: "j", shiftKey: "J" },
        KeyK: { key: "k", shiftKey: "K" },
        KeyL: { key: "l", shiftKey: "L" },
        KeyM: { key: "m", shiftKey: "M" },
        KeyN: { key: "n", shiftKey: "N" },
        KeyO: { key: "o", shiftKey: "O" },
        KeyP: { key: "p", shiftKey: "P" },
        KeyQ: { key: "q", shiftKey: "Q" },
        KeyR: { key: "r", shiftKey: "R" },
        KeyS: { key: "s", shiftKey: "S" },
        KeyT: { key: "t", shiftKey: "T" },
        KeyU: { key: "u", shiftKey: "U" },
        KeyV: { key: "v", shiftKey: "V" },
        KeyW: { key: "w", shiftKey: "W" },
        KeyX: { key: "x", shiftKey: "X" },
        KeyY: { key: "y", shiftKey: "Y" },
        KeyZ: { key: "z", shiftKey: "Z" },
        Numpad0: { key: "0" },
        Numpad1: { key: "1" },
        Numpad2: { key: "2" },
        Numpad3: { key: "3" },
        Numpad4: { key: "4" },
        Numpad5: { key: "5" },
        Numpad6: { key: "6" },
        Numpad7: { key: "7" },
        Numpad8: { key: "8" },
        Numpad9: { key: "9" },
        NumpadMultiply: { key: "*" },
        NumpadAdd: { key: "+" },
        NumpadComma: { key: "," },
        NumpadSubtract: { key: "-" },
        NumpadDecimal: { key: "." },
        NumpadDivide: { key: "/" },
        Semicolon: { key: ";", shiftKey: ":" },
        Equal: { key: "=", shiftKey: "+" },
        Comma: { key: ",", shiftKey: "<" },
        Minus: { key: "-", shiftKey: "_" },
        Period: { key: ".", shiftKey: ">" },
        Slash: { key: "/", shiftKey: "?" },
        Backquote: { key: "`", shiftKey: "~" },
        BracketLeft: { key: "[", shiftKey: "{" },
        Backslash: { key: "\\", shiftKey: "|" },
        BracketRight: { key: "]", shiftKey: "}" },
        Quote: { key: "'", shiftKey: '"' },
        IntlBackslash: { key: "\\", shiftKey: "|" }
      };
      mergeIf(codeToKeyTable, "mac", {
        OSLeft: { key: "Meta" },
        OSRight: { key: "Meta" }
      });
      var keyFixTable = {
        Esc: "Escape",
        Nonconvert: "NonConvert",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Menu: "ContextMenu",
        MediaNextTrack: "MediaTrackNext",
        MediaPreviousTrack: "MediaTrackPrevious",
        SelectMedia: "MediaSelect",
        HalfWidth: "Hankaku",
        FullWidth: "Zenkaku",
        RomanCharacters: "Romaji",
        Crsel: "CrSel",
        Exsel: "ExSel",
        Zoom: "ZoomToggle"
      };
      var codeTable = remap(keyCodeToInfoTable, "code");
      try {
        var nativeLocation = nativeKeyboardEvent && "location" in new KeyboardEvent("");
      } catch (_) {
      }
      function keyInfoForEvent(event) {
        var keyCode = "keyCode" in event ? event.keyCode : "which" in event ? event.which : 0;
        var keyInfo = function() {
          if (nativeLocation || "keyLocation" in event) {
            var location = nativeLocation ? event.location : event.keyLocation;
            if (location && keyCode in locationTable[location]) {
              return locationTable[location][keyCode];
            }
          }
          if ("keyIdentifier" in event && event.keyIdentifier in keyIdentifierTable) {
            return keyIdentifierTable[event.keyIdentifier];
          }
          if (keyCode in keyCodeToInfoTable) {
            return keyCodeToInfoTable[keyCode];
          }
          return null;
        }();
        if (0) {
          switch (event.keyIdentifier) {
            case "U+0010":
              keyInfo = { code: "Function" };
              break;
            case "U+001C":
              keyInfo = { code: "ArrowLeft" };
              break;
            case "U+001D":
              keyInfo = { code: "ArrowRight" };
              break;
            case "U+001E":
              keyInfo = { code: "ArrowUp" };
              break;
            case "U+001F":
              keyInfo = { code: "ArrowDown" };
              break;
          }
        }
        if (!keyInfo)
          return null;
        var key = function() {
          var entry = codeToKeyTable[keyInfo.code];
          if (!entry) return keyInfo.code;
          return event.shiftKey && "shiftKey" in entry ? entry.shiftKey : entry.key;
        }();
        return {
          code: keyInfo.code,
          key,
          location: keyInfo.location,
          keyCap: keyInfo.keyCap
        };
      }
      function queryKeyCap(code, locale) {
        code = String(code);
        if (!codeTable.hasOwnProperty(code)) return "Undefined";
        if (locale && String(locale).toLowerCase() !== "en-us") throw Error("Unsupported locale");
        var keyInfo = codeTable[code];
        return keyInfo.keyCap || keyInfo.code || "Undefined";
      }
      if ("KeyboardEvent" in global && "defineProperty" in Object) {
        (function() {
          function define(o, p2, v2) {
            if (p2 in o) return;
            Object.defineProperty(o, p2, v2);
          }
          define(KeyboardEvent.prototype, "code", { get: function() {
            var keyInfo = keyInfoForEvent(this);
            return keyInfo ? keyInfo.code : "";
          } });
          if ("key" in KeyboardEvent.prototype) {
            var desc = Object.getOwnPropertyDescriptor(KeyboardEvent.prototype, "key");
            Object.defineProperty(KeyboardEvent.prototype, "key", { get: function() {
              var key = desc.get.call(this);
              return keyFixTable.hasOwnProperty(key) ? keyFixTable[key] : key;
            } });
          }
          define(KeyboardEvent.prototype, "key", { get: function() {
            var keyInfo = keyInfoForEvent(this);
            return keyInfo && "key" in keyInfo ? keyInfo.key : "Unidentified";
          } });
          define(KeyboardEvent.prototype, "location", { get: function() {
            var keyInfo = keyInfoForEvent(this);
            return keyInfo && "location" in keyInfo ? keyInfo.location : STANDARD;
          } });
          define(KeyboardEvent.prototype, "locale", { get: function() {
            return "";
          } });
        })();
      }
      if (!("queryKeyCap" in global.KeyboardEvent))
        global.KeyboardEvent.queryKeyCap = queryKeyCap;
      global.identifyKey = function(event) {
        if ("code" in event)
          return;
        var keyInfo = keyInfoForEvent(event);
        event.code = keyInfo ? keyInfo.code : "";
        event.key = keyInfo && "key" in keyInfo ? keyInfo.key : "Unidentified";
        event.location = "location" in event ? event.location : "keyLocation" in event ? event.keyLocation : keyInfo && "location" in keyInfo ? keyInfo.location : STANDARD;
        event.locale = "";
      };
    })(window);
  }
});

// node_modules/aframe-extras/src/controls/keyboard-controls.js
var require_keyboard_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/keyboard-controls.js"(exports, module) {
    require_keyboard_polyfill();
    var PROXY_FLAG = "__keyboard-controls-proxy";
    var KeyboardEvent2 = window.KeyboardEvent;
    module.exports = AFRAME.registerComponent("keyboard-controls", {
      schema: {
        enabled: { default: true },
        debug: { default: false }
      },
      init: function() {
        this.dVelocity = new THREE.Vector3();
        this.localKeys = {};
        this.listeners = {
          keydown: this.onKeyDown.bind(this),
          keyup: this.onKeyUp.bind(this),
          blur: this.onBlur.bind(this),
          onContextMenu: this.onContextMenu.bind(this)
        };
      },
      /*******************************************************************
      * Movement
      */
      isVelocityActive: function() {
        return this.data.enabled && !!Object.keys(this.getKeys()).length;
      },
      getVelocityDelta: function() {
        const data = this.data;
        const keys = this.getKeys();
        this.dVelocity.set(0, 0, 0);
        if (data.enabled) {
          if (keys.KeyW || keys.ArrowUp) {
            this.dVelocity.z -= 1;
          }
          if (keys.KeyA || keys.ArrowLeft) {
            this.dVelocity.x -= 1;
          }
          if (keys.KeyS || keys.ArrowDown) {
            this.dVelocity.z += 1;
          }
          if (keys.KeyD || keys.ArrowRight) {
            this.dVelocity.x += 1;
          }
          if (keys.ShiftLeft) {
            this.dVelocity = this.dVelocity.multiplyScalar(2);
          }
        }
        return this.dVelocity.clone();
      },
      /*******************************************************************
      * Events
      */
      play: function() {
        this.attachEventListeners();
      },
      pause: function() {
        this.removeEventListeners();
      },
      attachEventListeners: function() {
        window.addEventListener("contextmenu", this.listeners.onContextMenu, false);
        window.addEventListener("keydown", this.listeners.keydown, false);
        window.addEventListener("keyup", this.listeners.keyup, false);
        window.addEventListener("blur", this.listeners.blur, false);
      },
      onContextMenu: function() {
        for (const code in this.localKeys) {
          if (this.localKeys.hasOwnProperty(code)) {
            delete this.localKeys[code];
          }
        }
      },
      removeEventListeners: function() {
        window.removeEventListener("keydown", this.listeners.keydown);
        window.removeEventListener("keyup", this.listeners.keyup);
        window.removeEventListener("blur", this.listeners.blur);
      },
      onKeyDown: function(event) {
        if (AFRAME.utils.shouldCaptureKeyEvent(event)) {
          this.localKeys[event.code] = true;
          this.emit(event);
        }
      },
      onKeyUp: function(event) {
        if (AFRAME.utils.shouldCaptureKeyEvent(event)) {
          delete this.localKeys[event.code];
          this.emit(event);
        }
      },
      onBlur: function() {
        for (const code in this.localKeys) {
          if (this.localKeys.hasOwnProperty(code)) {
            delete this.localKeys[code];
          }
        }
      },
      emit: function(event) {
        if (PROXY_FLAG in event) {
          this.el.emit(event.type, event);
        }
        this.el.emit(event.type + ":" + event.code, new KeyboardEvent2(event.type, event));
        if (this.data.debug) console.log(event.type + ":" + event.code);
      },
      /*******************************************************************
      * Accessors
      */
      isPressed: function(code) {
        return code in this.getKeys();
      },
      getKeys: function() {
        if (this.isProxied()) {
          return this.el.sceneEl.components["proxy-controls"].getKeyboard();
        }
        return this.localKeys;
      },
      isProxied: function() {
        const proxyControls = this.el.sceneEl.components["proxy-controls"];
        return proxyControls && proxyControls.isConnected();
      }
    });
  }
});

// node_modules/aframe-extras/src/controls/touch-controls.js
var require_touch_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/touch-controls.js"(exports, module) {
    module.exports = AFRAME.registerComponent("touch-controls", {
      schema: {
        enabled: { default: true },
        reverseEnabled: { default: true }
      },
      init: function() {
        this.dVelocity = new THREE.Vector3();
        this.bindMethods();
        this.direction = 0;
      },
      play: function() {
        this.addEventListeners();
      },
      pause: function() {
        this.removeEventListeners();
        this.dVelocity.set(0, 0, 0);
      },
      remove: function() {
        this.pause();
      },
      addEventListeners: function() {
        const sceneEl = this.el.sceneEl;
        const canvasEl = sceneEl.canvas;
        if (!canvasEl) {
          sceneEl.addEventListener("render-target-loaded", this.addEventListeners.bind(this));
          return;
        }
        canvasEl.addEventListener("touchstart", this.onTouchStart, { passive: true });
        canvasEl.addEventListener("touchend", this.onTouchEnd, { passive: true });
        const vrModeUI = sceneEl.getAttribute("vr-mode-ui");
        if (vrModeUI && vrModeUI.cardboardModeEnabled) {
          sceneEl.addEventListener("enter-vr", this.onEnterVR);
        }
      },
      removeEventListeners: function() {
        const canvasEl = this.el.sceneEl && this.el.sceneEl.canvas;
        if (!canvasEl) {
          return;
        }
        canvasEl.removeEventListener("touchstart", this.onTouchStart);
        canvasEl.removeEventListener("touchend", this.onTouchEnd);
        this.el.sceneEl.removeEventListener("enter-vr", this.onEnterVR);
      },
      isVelocityActive: function() {
        return this.data.enabled && !!this.direction;
      },
      getVelocityDelta: function() {
        this.dVelocity.z = this.direction;
        return this.dVelocity.clone();
      },
      bindMethods: function() {
        this.onTouchStart = this.onTouchStart.bind(this);
        this.onTouchEnd = this.onTouchEnd.bind(this);
        this.onEnterVR = this.onEnterVR.bind(this);
      },
      onTouchStart: function(e) {
        this.direction = -1;
        if (this.data.reverseEnabled && e.touches && e.touches.length === 2) {
          this.direction = 1;
        }
        e.preventDefault();
      },
      onTouchEnd: function(e) {
        this.direction = 0;
        e.preventDefault();
      },
      onEnterVR: function() {
        const xrSession = this.el.sceneEl.xrSession;
        if (!xrSession) {
          return;
        }
        xrSession.addEventListener("selectstart", this.onTouchStart);
        xrSession.addEventListener("selectend", this.onTouchEnd);
      }
    });
  }
});

// node_modules/aframe-extras/src/controls/movement-controls.js
var require_movement_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/movement-controls.js"(exports, module) {
    var COMPONENT_SUFFIX = "-controls";
    var MAX_DELTA = 0.2;
    var EPS = 1e-5;
    var MOVED = "moved";
    module.exports = AFRAME.registerComponent("movement-controls", {
      /*******************************************************************
       * Schema
       */
      dependencies: ["rotation"],
      schema: {
        enabled: { default: true },
        controls: { default: ["gamepad", "trackpad", "keyboard", "touch"] },
        speed: { default: 0.3, min: 0 },
        fly: { default: false },
        constrainToNavMesh: { default: false },
        camera: { default: "[movement-controls] [camera]", type: "selector" }
      },
      /*******************************************************************
       * Lifecycle
       */
      init: function() {
        const el = this.el;
        if (!this.data.camera) {
          this.data.camera = el.querySelector("[camera]");
        }
        this.velocityCtrl = null;
        this.velocity = new THREE.Vector3();
        this.heading = new THREE.Quaternion();
        this.eventDetail = {};
        this.navGroup = null;
        this.navNode = null;
        if (el.sceneEl.hasLoaded) {
          this.injectControls();
        } else {
          el.sceneEl.addEventListener("loaded", this.injectControls.bind(this));
        }
      },
      update: function(prevData) {
        const el = this.el;
        const data = this.data;
        const nav = el.sceneEl.systems.nav;
        if (el.sceneEl.hasLoaded) {
          this.injectControls();
        }
        if (nav && data.constrainToNavMesh !== prevData.constrainToNavMesh) {
          data.constrainToNavMesh ? nav.addAgent(this) : nav.removeAgent(this);
        }
        if (data.enabled !== prevData.enabled) {
          for (let i = 0; i < data.controls.length; i++) {
            const name = data.controls[i] + COMPONENT_SUFFIX;
            this.el.setAttribute(name, { enabled: this.data.enabled });
          }
        }
      },
      injectControls: function() {
        const data = this.data;
        for (let i = 0; i < data.controls.length; i++) {
          const name = data.controls[i] + COMPONENT_SUFFIX;
          this.el.setAttribute(name, { enabled: this.data.enabled });
        }
      },
      updateNavLocation: function() {
        this.navGroup = null;
        this.navNode = null;
      },
      /*******************************************************************
       * Tick
       */
      tick: function() {
        const start = new THREE.Vector3();
        const end = new THREE.Vector3();
        const clampedEnd = new THREE.Vector3();
        return function(t, dt) {
          if (!dt) return;
          const el = this.el;
          const data = this.data;
          if (!data.enabled) return;
          this.updateVelocityCtrl();
          const velocityCtrl = this.velocityCtrl;
          const velocity = this.velocity;
          if (!velocityCtrl) return;
          if (dt / 1e3 > MAX_DELTA) {
            velocity.set(0, 0, 0);
          } else {
            this.updateVelocity(dt);
          }
          if (data.constrainToNavMesh && velocityCtrl.isNavMeshConstrained !== false) {
            if (velocity.lengthSq() < EPS) return;
            start.copy(el.object3D.position);
            end.copy(velocity).multiplyScalar(dt / 1e3).add(start);
            const nav = el.sceneEl.systems.nav;
            this.navGroup = this.navGroup === null ? nav.getGroup(start) : this.navGroup;
            this.navNode = this.navNode || nav.getNode(start, this.navGroup);
            this.navNode = nav.clampStep(start, end, this.navGroup, this.navNode, clampedEnd);
            el.object3D.position.copy(clampedEnd);
          } else if (el.hasAttribute("velocity")) {
            el.setAttribute("velocity", velocity);
          } else {
            el.object3D.position.x += velocity.x * dt / 1e3;
            el.object3D.position.y += velocity.y * dt / 1e3;
            el.object3D.position.z += velocity.z * dt / 1e3;
          }
        };
      }(),
      /*******************************************************************
       * Movement
       */
      updateVelocityCtrl: function() {
        const data = this.data;
        if (data.enabled) {
          for (let i = 0, l = data.controls.length; i < l; i++) {
            const control = this.el.components[data.controls[i] + COMPONENT_SUFFIX];
            if (control && control.isVelocityActive()) {
              this.velocityCtrl = control;
              return;
            }
          }
          this.velocityCtrl = null;
        }
      },
      updateVelocity: function() {
        const vector2 = new THREE.Vector2();
        const quaternion = new THREE.Quaternion();
        return function(dt) {
          let dVelocity;
          const el = this.el;
          const control = this.velocityCtrl;
          const velocity = this.velocity;
          const data = this.data;
          if (control) {
            if (control.getVelocityDelta) {
              dVelocity = control.getVelocityDelta(dt);
            } else if (control.getVelocity) {
              velocity.copy(control.getVelocity());
              return;
            } else if (control.getPositionDelta) {
              velocity.copy(control.getPositionDelta(dt).multiplyScalar(1e3 / dt));
              return;
            } else {
              throw new Error("Incompatible movement controls: ", control);
            }
          }
          if (el.hasAttribute("velocity") && !data.constrainToNavMesh) {
            velocity.copy(this.el.getAttribute("velocity"));
          }
          if (dVelocity && data.enabled) {
            const cameraEl = data.camera;
            quaternion.copy(cameraEl.object3D.quaternion);
            quaternion.premultiply(el.object3D.quaternion);
            dVelocity.applyQuaternion(quaternion);
            const factor = dVelocity.length();
            if (data.fly) {
              velocity.copy(dVelocity);
              velocity.multiplyScalar(this.data.speed * 16.66667);
            } else {
              vector2.set(dVelocity.x, dVelocity.z);
              vector2.setLength(factor * this.data.speed * 16.66667);
              velocity.x = vector2.x;
              velocity.y = 0;
              velocity.z = vector2.y;
            }
            if (velocity.x !== 0 || velocity.y !== 0 || velocity.z !== 0) {
              this.eventDetail.velocity = velocity;
              this.el.emit(MOVED, this.eventDetail);
            }
          }
        };
      }()
    });
  }
});

// node_modules/aframe-extras/src/controls/trackpad-controls.js
var require_trackpad_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/trackpad-controls.js"(exports, module) {
    module.exports = AFRAME.registerComponent("trackpad-controls", {
      schema: {
        enabled: { default: true },
        enableNegX: { default: true },
        enablePosX: { default: true },
        enableNegZ: { default: true },
        enablePosZ: { default: true },
        mode: { default: "touch", oneOf: ["swipe", "touch", "press"] }
      },
      init: function() {
        this.dVelocity = new THREE.Vector3();
        this.zVel = 0;
        this.xVel = 0;
        this.bindMethods();
      },
      play: function() {
        this.addEventListeners();
      },
      pause: function() {
        this.removeEventListeners();
        this.dVelocity.set(0, 0, 0);
      },
      remove: function() {
        this.pause();
      },
      addEventListeners: function() {
        const data = this.data;
        const sceneEl = this.el.sceneEl;
        sceneEl.addEventListener("axismove", this.onAxisMove);
        switch (data.mode) {
          case "swipe":
          case "touch":
            sceneEl.addEventListener("trackpadtouchstart", this.onTouchStart);
            sceneEl.addEventListener("trackpadtouchend", this.onTouchEnd);
            break;
          case "press":
            sceneEl.addEventListener("trackpaddown", this.onTouchStart);
            sceneEl.addEventListener("trackpadup", this.onTouchEnd);
            break;
        }
      },
      removeEventListeners: function() {
        const sceneEl = this.el.sceneEl;
        sceneEl.removeEventListener("axismove", this.onAxisMove);
        sceneEl.removeEventListener("trackpadtouchstart", this.onTouchStart);
        sceneEl.removeEventListener("trackpadtouchend", this.onTouchEnd);
        sceneEl.removeEventListener("trackpaddown", this.onTouchStart);
        sceneEl.removeEventListener("trackpadup", this.onTouchEnd);
      },
      isVelocityActive: function() {
        return this.data.enabled && this.isMoving;
      },
      getVelocityDelta: function() {
        this.dVelocity.z = this.isMoving ? -this.zVel : 1;
        this.dVelocity.x = this.isMoving ? this.xVel : 1;
        return this.dVelocity.clone();
      },
      bindMethods: function() {
        this.onTouchStart = this.onTouchStart.bind(this);
        this.onTouchEnd = this.onTouchEnd.bind(this);
        this.onAxisMove = this.onAxisMove.bind(this);
      },
      onTouchStart: function(e) {
        switch (this.data.mode) {
          case "swipe":
            this.canRecordAxis = true;
            this.startingAxisData = [];
            break;
          case "touch":
            this.isMoving = true;
            break;
          case "press":
            this.isMoving = true;
            break;
        }
        e.preventDefault();
      },
      onTouchEnd: function(e) {
        if (this.data.mode == "swipe") {
          this.startingAxisData = [];
        }
        this.isMoving = false;
        e.preventDefault();
      },
      onAxisMove: function(e) {
        switch (this.data.mode) {
          case "swipe":
            return this.handleSwipeAxis(e);
          case "touch":
          case "press":
            return this.handleTouchAxis(e);
        }
      },
      handleSwipeAxis: function(e) {
        const data = this.data;
        const axisData = e.detail.axis;
        if (this.startingAxisData.length === 0 && this.canRecordAxis) {
          this.canRecordAxis = false;
          this.startingAxisData[0] = axisData[0];
          this.startingAxisData[1] = axisData[1];
        }
        if (this.startingAxisData.length > 0) {
          let velX = 0;
          let velZ = 0;
          if (data.enableNegX && axisData[0] < this.startingAxisData[0]) {
            velX = -1;
          }
          if (data.enablePosX && axisData[0] > this.startingAxisData[0]) {
            velX = 1;
          }
          if (data.enablePosZ && axisData[1] > this.startingAxisData[1]) {
            velZ = -1;
          }
          if (data.enableNegZ && axisData[1] < this.startingAxisData[1]) {
            velZ = 1;
          }
          const absChangeZ = Math.abs(this.startingAxisData[1] - axisData[1]);
          const absChangeX = Math.abs(this.startingAxisData[0] - axisData[0]);
          if (absChangeX > absChangeZ) {
            this.zVel = 0;
            this.xVel = velX;
            this.isMoving = true;
          } else {
            this.xVel = 0;
            this.zVel = velZ;
            this.isMoving = true;
          }
        }
      },
      handleTouchAxis: function(e) {
        const data = this.data;
        const axisData = e.detail.axis;
        let velX = 0;
        let velZ = 0;
        if (data.enableNegX && axisData[0] < 0) {
          velX = -1;
        }
        if (data.enablePosX && axisData[0] > 0) {
          velX = 1;
        }
        if (data.enablePosZ && axisData[1] > 0) {
          velZ = -1;
        }
        if (data.enableNegZ && axisData[1] < 0) {
          velZ = 1;
        }
        if (Math.abs(axisData[0]) > Math.abs(axisData[1])) {
          this.zVel = 0;
          this.xVel = velX;
        } else {
          this.xVel = 0;
          this.zVel = velZ;
        }
      }
    });
  }
});

// node_modules/nipplejs/src/utils.js
var distance, angle, findCoord, radians, degrees, isPressed, timers, throttle, bindEvt, unbindEvt, prepareEvent, getScroll, applyPosition, getTransitionStyle, getVendorStyle, configStylePropertyObject, extend, safeExtend, map, clamp;
var init_utils = __esm({
  "node_modules/nipplejs/src/utils.js"() {
    distance = (p1, p2) => {
      const dx = p2.x - p1.x;
      const dy = p2.y - p1.y;
      return Math.sqrt(dx * dx + dy * dy);
    };
    angle = (p1, p2) => {
      const dx = p2.x - p1.x;
      const dy = p2.y - p1.y;
      return degrees(Math.atan2(dy, dx));
    };
    findCoord = (p2, d2, a) => {
      const b = { x: 0, y: 0 };
      a = radians(a);
      b.x = p2.x - d2 * Math.cos(a);
      b.y = p2.y - d2 * Math.sin(a);
      return b;
    };
    radians = (a) => {
      return a * (Math.PI / 180);
    };
    degrees = (a) => {
      return a * (180 / Math.PI);
    };
    isPressed = (evt) => {
      if (isNaN(evt.buttons)) {
        return evt.pressure !== 0;
      }
      return evt.buttons !== 0;
    };
    timers = /* @__PURE__ */ new Map();
    throttle = (cb) => {
      if (timers.has(cb)) {
        clearTimeout(timers.get(cb));
      }
      timers.set(cb, setTimeout(cb, 100));
    };
    bindEvt = (el, arg, handler) => {
      const types = arg.split(/[ ,]+/g);
      let type;
      for (let i = 0; i < types.length; i += 1) {
        type = types[i];
        if (el.addEventListener) {
          el.addEventListener(type, handler, false);
        } else if (el.attachEvent) {
          el.attachEvent(type, handler);
        }
      }
    };
    unbindEvt = (el, arg, handler) => {
      const types = arg.split(/[ ,]+/g);
      let type;
      for (let i = 0; i < types.length; i += 1) {
        type = types[i];
        if (el.removeEventListener) {
          el.removeEventListener(type, handler);
        } else if (el.detachEvent) {
          el.detachEvent(type, handler);
        }
      }
    };
    prepareEvent = (evt) => {
      evt.preventDefault();
      return evt.type.match(/^touch/) ? evt.changedTouches : evt;
    };
    getScroll = () => {
      const x = window.pageXOffset !== void 0 ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
      const y = window.pageYOffset !== void 0 ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
      return {
        x,
        y
      };
    };
    applyPosition = (el, pos) => {
      if (pos.top || pos.right || pos.bottom || pos.left) {
        el.style.top = pos.top;
        el.style.right = pos.right;
        el.style.bottom = pos.bottom;
        el.style.left = pos.left;
      } else {
        el.style.left = pos.x + "px";
        el.style.top = pos.y + "px";
      }
    };
    getTransitionStyle = (property, values, time) => {
      const obj = configStylePropertyObject(property);
      for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (typeof values === "string") {
            obj[i] = values + " " + time;
          } else {
            let st = "";
            for (let j = 0, max2 = values.length; j < max2; j += 1) {
              st += values[j] + " " + time + ", ";
            }
            obj[i] = st.slice(0, -2);
          }
        }
      }
      return obj;
    };
    getVendorStyle = (property, value) => {
      const obj = configStylePropertyObject(property);
      for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
          obj[i] = value;
        }
      }
      return obj;
    };
    configStylePropertyObject = (prop) => {
      const obj = {};
      obj[prop] = "";
      const vendors = ["webkit", "Moz", "o"];
      vendors.forEach(function(vendor) {
        obj[vendor + prop.charAt(0).toUpperCase() + prop.slice(1)] = "";
      });
      return obj;
    };
    extend = (objA, objB) => {
      for (let i in objB) {
        if (objB.hasOwnProperty(i)) {
          objA[i] = objB[i];
        }
      }
      return objA;
    };
    safeExtend = (objA, objB) => {
      const obj = {};
      for (let i in objA) {
        if (objA.hasOwnProperty(i) && objB.hasOwnProperty(i)) {
          obj[i] = objB[i];
        } else if (objA.hasOwnProperty(i)) {
          obj[i] = objA[i];
        }
      }
      return obj;
    };
    map = (ar, fn) => {
      if (ar.length) {
        for (let i = 0, max2 = ar.length; i < max2; i += 1) {
          fn(ar[i]);
        }
      } else {
        fn(ar);
      }
    };
    clamp = (pos, nipplePos, size) => ({
      //                          left-clamping        right-clamping
      x: Math.min(Math.max(pos.x, nipplePos.x - size), nipplePos.x + size),
      //                          top-clamping         bottom-clamping
      y: Math.min(Math.max(pos.y, nipplePos.y - size), nipplePos.y + size)
    });
  }
});

// node_modules/nipplejs/src/super.js
function Super() {
}
var isTouch, isPointer, isMSPointer, events, toBind, secondBind, super_default;
var init_super = __esm({
  "node_modules/nipplejs/src/super.js"() {
    init_utils();
    isTouch = !!("ontouchstart" in window);
    isPointer = window.PointerEvent ? true : false;
    isMSPointer = window.MSPointerEvent ? true : false;
    events = {
      touch: {
        start: "touchstart",
        move: "touchmove",
        end: "touchend, touchcancel"
      },
      mouse: {
        start: "mousedown",
        move: "mousemove",
        end: "mouseup"
      },
      pointer: {
        start: "pointerdown",
        move: "pointermove",
        end: "pointerup, pointercancel"
      },
      MSPointer: {
        start: "MSPointerDown",
        move: "MSPointerMove",
        end: "MSPointerUp"
      }
    };
    secondBind = {};
    if (isPointer) {
      toBind = events.pointer;
    } else if (isMSPointer) {
      toBind = events.MSPointer;
    } else if (isTouch) {
      toBind = events.touch;
      secondBind = events.mouse;
    } else {
      toBind = events.mouse;
    }
    Super.prototype.on = function(arg, cb) {
      var self2 = this;
      var types = arg.split(/[ ,]+/g);
      var type;
      self2._handlers_ = self2._handlers_ || {};
      for (var i = 0; i < types.length; i += 1) {
        type = types[i];
        self2._handlers_[type] = self2._handlers_[type] || [];
        self2._handlers_[type].push(cb);
      }
      return self2;
    };
    Super.prototype.off = function(type, cb) {
      var self2 = this;
      self2._handlers_ = self2._handlers_ || {};
      if (type === void 0) {
        self2._handlers_ = {};
      } else if (cb === void 0) {
        self2._handlers_[type] = null;
      } else if (self2._handlers_[type] && self2._handlers_[type].indexOf(cb) >= 0) {
        self2._handlers_[type].splice(self2._handlers_[type].indexOf(cb), 1);
      }
      return self2;
    };
    Super.prototype.trigger = function(arg, data) {
      var self2 = this;
      var types = arg.split(/[ ,]+/g);
      var type;
      self2._handlers_ = self2._handlers_ || {};
      for (var i = 0; i < types.length; i += 1) {
        type = types[i];
        if (self2._handlers_[type] && self2._handlers_[type].length) {
          self2._handlers_[type].forEach(function(handler) {
            handler.call(self2, {
              type,
              target: self2
            }, data);
          });
        }
      }
    };
    Super.prototype.config = function(options) {
      var self2 = this;
      self2.options = self2.defaults || {};
      if (options) {
        self2.options = safeExtend(self2.options, options);
      }
    };
    Super.prototype.bindEvt = function(el, type) {
      var self2 = this;
      self2._domHandlers_ = self2._domHandlers_ || {};
      self2._domHandlers_[type] = function() {
        if (typeof self2["on" + type] === "function") {
          self2["on" + type].apply(self2, arguments);
        } else {
          console.warn('[WARNING] : Missing "on' + type + '" handler.');
        }
      };
      bindEvt(el, toBind[type], self2._domHandlers_[type]);
      if (secondBind[type]) {
        bindEvt(el, secondBind[type], self2._domHandlers_[type]);
      }
      return self2;
    };
    Super.prototype.unbindEvt = function(el, type) {
      var self2 = this;
      self2._domHandlers_ = self2._domHandlers_ || {};
      unbindEvt(el, toBind[type], self2._domHandlers_[type]);
      if (secondBind[type]) {
        unbindEvt(el, secondBind[type], self2._domHandlers_[type]);
      }
      delete self2._domHandlers_[type];
      return this;
    };
    super_default = Super;
  }
});

// node_modules/nipplejs/src/nipple.js
function Nipple(collection, options) {
  this.identifier = options.identifier;
  this.position = options.position;
  this.frontPosition = options.frontPosition;
  this.collection = collection;
  this.defaults = {
    size: 100,
    threshold: 0.1,
    color: "white",
    fadeTime: 250,
    dataOnly: false,
    restJoystick: true,
    restOpacity: 0.5,
    mode: "dynamic",
    zone: document.body,
    lockX: false,
    lockY: false,
    shape: "circle"
  };
  this.config(options);
  if (this.options.mode === "dynamic") {
    this.options.restOpacity = 0;
  }
  this.id = Nipple.id;
  Nipple.id += 1;
  this.buildEl().stylize();
  this.instance = {
    el: this.ui.el,
    on: this.on.bind(this),
    off: this.off.bind(this),
    show: this.show.bind(this),
    hide: this.hide.bind(this),
    add: this.addToDom.bind(this),
    remove: this.removeFromDom.bind(this),
    destroy: this.destroy.bind(this),
    setPosition: this.setPosition.bind(this),
    resetDirection: this.resetDirection.bind(this),
    computeDirection: this.computeDirection.bind(this),
    trigger: this.trigger.bind(this),
    position: this.position,
    frontPosition: this.frontPosition,
    ui: this.ui,
    identifier: this.identifier,
    id: this.id,
    options: this.options
  };
  return this.instance;
}
var nipple_default;
var init_nipple = __esm({
  "node_modules/nipplejs/src/nipple.js"() {
    init_super();
    init_utils();
    Nipple.prototype = new super_default();
    Nipple.constructor = Nipple;
    Nipple.id = 0;
    Nipple.prototype.buildEl = function(options) {
      this.ui = {};
      if (this.options.dataOnly) {
        return this;
      }
      this.ui.el = document.createElement("div");
      this.ui.back = document.createElement("div");
      this.ui.front = document.createElement("div");
      this.ui.el.className = "nipple collection_" + this.collection.id;
      this.ui.back.className = "back";
      this.ui.front.className = "front";
      this.ui.el.setAttribute("id", "nipple_" + this.collection.id + "_" + this.id);
      this.ui.el.appendChild(this.ui.back);
      this.ui.el.appendChild(this.ui.front);
      return this;
    };
    Nipple.prototype.stylize = function() {
      if (this.options.dataOnly) {
        return this;
      }
      var animTime = this.options.fadeTime + "ms";
      var borderStyle = getVendorStyle("borderRadius", "50%");
      var transitStyle = getTransitionStyle("transition", "opacity", animTime);
      var styles = {};
      styles.el = {
        position: "absolute",
        opacity: this.options.restOpacity,
        display: "block",
        "zIndex": 999
      };
      styles.back = {
        position: "absolute",
        display: "block",
        width: this.options.size + "px",
        height: this.options.size + "px",
        left: 0,
        marginLeft: -this.options.size / 2 + "px",
        marginTop: -this.options.size / 2 + "px",
        background: this.options.color,
        "opacity": ".5"
      };
      styles.front = {
        width: this.options.size / 2 + "px",
        height: this.options.size / 2 + "px",
        position: "absolute",
        display: "block",
        left: 0,
        marginLeft: -this.options.size / 4 + "px",
        marginTop: -this.options.size / 4 + "px",
        background: this.options.color,
        "opacity": ".5",
        transform: "translate(0px, 0px)"
      };
      extend(styles.el, transitStyle);
      if (this.options.shape === "circle") {
        extend(styles.back, borderStyle);
      }
      extend(styles.front, borderStyle);
      this.applyStyles(styles);
      return this;
    };
    Nipple.prototype.applyStyles = function(styles) {
      for (var i in this.ui) {
        if (this.ui.hasOwnProperty(i)) {
          for (var j in styles[i]) {
            this.ui[i].style[j] = styles[i][j];
          }
        }
      }
      return this;
    };
    Nipple.prototype.addToDom = function() {
      if (this.options.dataOnly || document.body.contains(this.ui.el)) {
        return this;
      }
      this.options.zone.appendChild(this.ui.el);
      return this;
    };
    Nipple.prototype.removeFromDom = function() {
      if (this.options.dataOnly || !document.body.contains(this.ui.el)) {
        return this;
      }
      this.options.zone.removeChild(this.ui.el);
      return this;
    };
    Nipple.prototype.destroy = function() {
      clearTimeout(this.removeTimeout);
      clearTimeout(this.showTimeout);
      clearTimeout(this.restTimeout);
      this.trigger("destroyed", this.instance);
      this.removeFromDom();
      this.off();
    };
    Nipple.prototype.show = function(cb) {
      var self2 = this;
      if (self2.options.dataOnly) {
        return self2;
      }
      clearTimeout(self2.removeTimeout);
      clearTimeout(self2.showTimeout);
      clearTimeout(self2.restTimeout);
      self2.addToDom();
      self2.restCallback();
      setTimeout(function() {
        self2.ui.el.style.opacity = 1;
      }, 0);
      self2.showTimeout = setTimeout(function() {
        self2.trigger("shown", self2.instance);
        if (typeof cb === "function") {
          cb.call(this);
        }
      }, self2.options.fadeTime);
      return self2;
    };
    Nipple.prototype.hide = function(cb) {
      var self2 = this;
      if (self2.options.dataOnly) {
        return self2;
      }
      self2.ui.el.style.opacity = self2.options.restOpacity;
      clearTimeout(self2.removeTimeout);
      clearTimeout(self2.showTimeout);
      clearTimeout(self2.restTimeout);
      self2.removeTimeout = setTimeout(
        function() {
          var display = self2.options.mode === "dynamic" ? "none" : "block";
          self2.ui.el.style.display = display;
          if (typeof cb === "function") {
            cb.call(self2);
          }
          self2.trigger("hidden", self2.instance);
        },
        self2.options.fadeTime
      );
      if (self2.options.restJoystick) {
        const rest = self2.options.restJoystick;
        const newPosition = {};
        newPosition.x = rest === true || rest.x !== false ? 0 : self2.instance.frontPosition.x;
        newPosition.y = rest === true || rest.y !== false ? 0 : self2.instance.frontPosition.y;
        self2.setPosition(cb, newPosition);
      }
      return self2;
    };
    Nipple.prototype.setPosition = function(cb, position) {
      var self2 = this;
      self2.frontPosition = {
        x: position.x,
        y: position.y
      };
      var animTime = self2.options.fadeTime + "ms";
      var transitStyle = {};
      transitStyle.front = getTransitionStyle(
        "transition",
        ["transform"],
        animTime
      );
      var styles = { front: {} };
      styles.front = {
        transform: "translate(" + self2.frontPosition.x + "px," + self2.frontPosition.y + "px)"
      };
      self2.applyStyles(transitStyle);
      self2.applyStyles(styles);
      self2.restTimeout = setTimeout(
        function() {
          if (typeof cb === "function") {
            cb.call(self2);
          }
          self2.restCallback();
        },
        self2.options.fadeTime
      );
    };
    Nipple.prototype.restCallback = function() {
      var self2 = this;
      var transitStyle = {};
      transitStyle.front = getTransitionStyle("transition", "none", "");
      self2.applyStyles(transitStyle);
      self2.trigger("rested", self2.instance);
    };
    Nipple.prototype.resetDirection = function() {
      this.direction = {
        x: false,
        y: false,
        angle: false
      };
    };
    Nipple.prototype.computeDirection = function(obj) {
      var rAngle = obj.angle.radian;
      var angle45 = Math.PI / 4;
      var angle90 = Math.PI / 2;
      var direction, directionX, directionY;
      if (rAngle > angle45 && rAngle < angle45 * 3 && !obj.lockX) {
        direction = "up";
      } else if (rAngle > -angle45 && rAngle <= angle45 && !obj.lockY) {
        direction = "left";
      } else if (rAngle > -angle45 * 3 && rAngle <= -angle45 && !obj.lockX) {
        direction = "down";
      } else if (!obj.lockY) {
        direction = "right";
      }
      if (!obj.lockY) {
        if (rAngle > -angle90 && rAngle < angle90) {
          directionX = "left";
        } else {
          directionX = "right";
        }
      }
      if (!obj.lockX) {
        if (rAngle > 0) {
          directionY = "up";
        } else {
          directionY = "down";
        }
      }
      if (obj.force > this.options.threshold) {
        var oldDirection = {};
        var i;
        for (i in this.direction) {
          if (this.direction.hasOwnProperty(i)) {
            oldDirection[i] = this.direction[i];
          }
        }
        var same = {};
        this.direction = {
          x: directionX,
          y: directionY,
          angle: direction
        };
        obj.direction = this.direction;
        for (i in oldDirection) {
          if (oldDirection[i] === this.direction[i]) {
            same[i] = true;
          }
        }
        if (same.x && same.y && same.angle) {
          return obj;
        }
        if (!same.x || !same.y) {
          this.trigger("plain", obj);
        }
        if (!same.x) {
          this.trigger("plain:" + directionX, obj);
        }
        if (!same.y) {
          this.trigger("plain:" + directionY, obj);
        }
        if (!same.angle) {
          this.trigger("dir dir:" + direction, obj);
        }
      } else {
        this.resetDirection();
      }
      return obj;
    };
    nipple_default = Nipple;
  }
});

// node_modules/nipplejs/src/collection.js
function Collection(manager, options) {
  var self2 = this;
  self2.nipples = [];
  self2.idles = [];
  self2.actives = [];
  self2.ids = [];
  self2.pressureIntervals = {};
  self2.manager = manager;
  self2.id = Collection.id;
  Collection.id += 1;
  self2.defaults = {
    zone: document.body,
    multitouch: false,
    maxNumberOfNipples: 10,
    mode: "dynamic",
    position: { top: 0, left: 0 },
    catchDistance: 200,
    size: 100,
    threshold: 0.1,
    color: "white",
    fadeTime: 250,
    dataOnly: false,
    restJoystick: true,
    restOpacity: 0.5,
    lockX: false,
    lockY: false,
    shape: "circle",
    dynamicPage: false,
    follow: false
  };
  self2.config(options);
  if (self2.options.mode === "static" || self2.options.mode === "semi") {
    self2.options.multitouch = false;
  }
  if (!self2.options.multitouch) {
    self2.options.maxNumberOfNipples = 1;
  }
  const computedStyle = getComputedStyle(self2.options.zone.parentElement);
  if (computedStyle && computedStyle.display === "flex") {
    self2.parentIsFlex = true;
  }
  self2.updateBox();
  self2.prepareNipples();
  self2.bindings();
  self2.begin();
  return self2.nipples;
}
var collection_default;
var init_collection = __esm({
  "node_modules/nipplejs/src/collection.js"() {
    init_nipple();
    init_super();
    init_utils();
    Collection.prototype = new super_default();
    Collection.constructor = Collection;
    Collection.id = 0;
    Collection.prototype.prepareNipples = function() {
      var self2 = this;
      var nips = self2.nipples;
      nips.on = self2.on.bind(self2);
      nips.off = self2.off.bind(self2);
      nips.options = self2.options;
      nips.destroy = self2.destroy.bind(self2);
      nips.ids = self2.ids;
      nips.id = self2.id;
      nips.processOnMove = self2.processOnMove.bind(self2);
      nips.processOnEnd = self2.processOnEnd.bind(self2);
      nips.get = function(id) {
        if (id === void 0) {
          return nips[0];
        }
        for (var i = 0, max2 = nips.length; i < max2; i += 1) {
          if (nips[i].identifier === id) {
            return nips[i];
          }
        }
        return false;
      };
    };
    Collection.prototype.bindings = function() {
      var self2 = this;
      self2.bindEvt(self2.options.zone, "start");
      self2.options.zone.style.touchAction = "none";
      self2.options.zone.style.msTouchAction = "none";
    };
    Collection.prototype.begin = function() {
      var self2 = this;
      var opts = self2.options;
      if (opts.mode === "static") {
        var nipple = self2.createNipple(
          opts.position,
          self2.manager.getIdentifier()
        );
        nipple.add();
        self2.idles.push(nipple);
      }
    };
    Collection.prototype.createNipple = function(position, identifier) {
      var self2 = this;
      var scroll = self2.manager.scroll;
      var toPutOn = {};
      var opts = self2.options;
      var offset = {
        x: self2.parentIsFlex ? scroll.x : scroll.x + self2.box.left,
        y: self2.parentIsFlex ? scroll.y : scroll.y + self2.box.top
      };
      if (position.x && position.y) {
        toPutOn = {
          x: position.x - offset.x,
          y: position.y - offset.y
        };
      } else if (position.top || position.right || position.bottom || position.left) {
        var dumb = document.createElement("DIV");
        dumb.style.display = "hidden";
        dumb.style.top = position.top;
        dumb.style.right = position.right;
        dumb.style.bottom = position.bottom;
        dumb.style.left = position.left;
        dumb.style.position = "absolute";
        opts.zone.appendChild(dumb);
        var dumbBox = dumb.getBoundingClientRect();
        opts.zone.removeChild(dumb);
        toPutOn = position;
        position = {
          x: dumbBox.left + scroll.x,
          y: dumbBox.top + scroll.y
        };
      }
      var nipple = new nipple_default(self2, {
        color: opts.color,
        size: opts.size,
        threshold: opts.threshold,
        fadeTime: opts.fadeTime,
        dataOnly: opts.dataOnly,
        restJoystick: opts.restJoystick,
        restOpacity: opts.restOpacity,
        mode: opts.mode,
        identifier,
        position,
        zone: opts.zone,
        frontPosition: {
          x: 0,
          y: 0
        },
        shape: opts.shape
      });
      if (!opts.dataOnly) {
        applyPosition(nipple.ui.el, toPutOn);
        applyPosition(nipple.ui.front, nipple.frontPosition);
      }
      self2.nipples.push(nipple);
      self2.trigger("added " + nipple.identifier + ":added", nipple);
      self2.manager.trigger("added " + nipple.identifier + ":added", nipple);
      self2.bindNipple(nipple);
      return nipple;
    };
    Collection.prototype.updateBox = function() {
      var self2 = this;
      self2.box = self2.options.zone.getBoundingClientRect();
    };
    Collection.prototype.bindNipple = function(nipple) {
      var self2 = this;
      var type;
      var handler = function(evt, data) {
        type = evt.type + " " + data.id + ":" + evt.type;
        self2.trigger(type, data);
      };
      nipple.on("destroyed", self2.onDestroyed.bind(self2));
      nipple.on("shown hidden rested dir plain", handler);
      nipple.on("dir:up dir:right dir:down dir:left", handler);
      nipple.on("plain:up plain:right plain:down plain:left", handler);
    };
    Collection.prototype.pressureFn = function(touch, nipple, identifier) {
      var self2 = this;
      var previousPressure = 0;
      clearInterval(self2.pressureIntervals[identifier]);
      self2.pressureIntervals[identifier] = setInterval((function() {
        var pressure = touch.force || touch.pressure || touch.webkitForce || 0;
        if (pressure !== previousPressure) {
          nipple.trigger("pressure", pressure);
          self2.trigger("pressure " + nipple.identifier + ":pressure", pressure);
          previousPressure = pressure;
        }
      }).bind(self2), 100);
    };
    Collection.prototype.onstart = function(evt) {
      var self2 = this;
      var opts = self2.options;
      var origEvt = evt;
      evt = prepareEvent(evt);
      self2.updateBox();
      var process = function(touch) {
        if (self2.actives.length < opts.maxNumberOfNipples) {
          self2.processOnStart(touch);
        } else if (origEvt.type.match(/^touch/)) {
          Object.keys(self2.manager.ids).forEach(function(k) {
            if (Object.values(origEvt.touches).findIndex(function(t) {
              return t.identifier === k;
            }) < 0) {
              var e = [evt[0]];
              e.identifier = k;
              self2.processOnEnd(e);
            }
          });
          if (self2.actives.length < opts.maxNumberOfNipples) {
            self2.processOnStart(touch);
          }
        }
      };
      map(evt, process);
      self2.manager.bindDocument();
      return false;
    };
    Collection.prototype.processOnStart = function(evt) {
      var self2 = this;
      var opts = self2.options;
      var indexInIdles;
      var identifier = self2.manager.getIdentifier(evt);
      var pressure = evt.force || evt.pressure || evt.webkitForce || 0;
      var position = {
        x: evt.pageX,
        y: evt.pageY
      };
      var nipple = self2.getOrCreate(identifier, position);
      if (nipple.identifier !== identifier) {
        self2.manager.removeIdentifier(nipple.identifier);
      }
      nipple.identifier = identifier;
      var process = function(nip) {
        nip.trigger("start", nip);
        self2.trigger("start " + nip.id + ":start", nip);
        nip.show();
        if (pressure > 0) {
          self2.pressureFn(evt, nip, nip.identifier);
        }
        self2.processOnMove(evt);
      };
      if ((indexInIdles = self2.idles.indexOf(nipple)) >= 0) {
        self2.idles.splice(indexInIdles, 1);
      }
      self2.actives.push(nipple);
      self2.ids.push(nipple.identifier);
      if (opts.mode !== "semi") {
        process(nipple);
      } else {
        var distance2 = distance(position, nipple.position);
        if (distance2 <= opts.catchDistance) {
          process(nipple);
        } else {
          nipple.destroy();
          self2.processOnStart(evt);
          return;
        }
      }
      return nipple;
    };
    Collection.prototype.getOrCreate = function(identifier, position) {
      var self2 = this;
      var opts = self2.options;
      var nipple;
      if (/(semi|static)/.test(opts.mode)) {
        nipple = self2.idles[0];
        if (nipple) {
          self2.idles.splice(0, 1);
          return nipple;
        }
        if (opts.mode === "semi") {
          return self2.createNipple(position, identifier);
        }
        console.warn("Coudln't find the needed nipple.");
        return false;
      }
      nipple = self2.createNipple(position, identifier);
      return nipple;
    };
    Collection.prototype.processOnMove = function(evt) {
      var self2 = this;
      var opts = self2.options;
      var identifier = self2.manager.getIdentifier(evt);
      var nipple = self2.nipples.get(identifier);
      var scroll = self2.manager.scroll;
      if (!isPressed(evt)) {
        this.processOnEnd(evt);
        return;
      }
      if (!nipple) {
        console.error("Found zombie joystick with ID " + identifier);
        self2.manager.removeIdentifier(identifier);
        return;
      }
      if (opts.dynamicPage) {
        var elBox = nipple.el.getBoundingClientRect();
        nipple.position = {
          x: scroll.x + elBox.left,
          y: scroll.y + elBox.top
        };
      }
      nipple.identifier = identifier;
      var size = nipple.options.size / 2;
      var pos = {
        x: evt.pageX,
        y: evt.pageY
      };
      if (opts.lockX) {
        pos.y = nipple.position.y;
      }
      if (opts.lockY) {
        pos.x = nipple.position.x;
      }
      var dist = distance(pos, nipple.position);
      var angle2 = angle(pos, nipple.position);
      var rAngle = radians(angle2);
      var force = dist / size;
      var raw = {
        distance: dist,
        position: pos
      };
      var clamped_dist;
      var clamped_pos;
      if (nipple.options.shape === "circle") {
        clamped_dist = Math.min(dist, size);
        clamped_pos = findCoord(nipple.position, clamped_dist, angle2);
      } else {
        clamped_pos = clamp(pos, nipple.position, size);
        clamped_dist = distance(clamped_pos, nipple.position);
      }
      if (opts.follow) {
        if (dist > size) {
          let delta_x = pos.x - clamped_pos.x;
          let delta_y = pos.y - clamped_pos.y;
          nipple.position.x += delta_x;
          nipple.position.y += delta_y;
          nipple.el.style.top = nipple.position.y - (self2.box.top + scroll.y) + "px";
          nipple.el.style.left = nipple.position.x - (self2.box.left + scroll.x) + "px";
          dist = distance(pos, nipple.position);
        }
      } else {
        pos = clamped_pos;
        dist = clamped_dist;
      }
      var xPosition = pos.x - nipple.position.x;
      var yPosition = pos.y - nipple.position.y;
      nipple.frontPosition = {
        x: xPosition,
        y: yPosition
      };
      if (!opts.dataOnly) {
        nipple.ui.front.style.transform = "translate(" + xPosition + "px," + yPosition + "px)";
      }
      var toSend = {
        identifier: nipple.identifier,
        position: pos,
        force,
        pressure: evt.force || evt.pressure || evt.webkitForce || 0,
        distance: dist,
        angle: {
          radian: rAngle,
          degree: angle2
        },
        vector: {
          x: xPosition / size,
          y: -yPosition / size
        },
        raw,
        instance: nipple,
        lockX: opts.lockX,
        lockY: opts.lockY
      };
      toSend = nipple.computeDirection(toSend);
      toSend.angle = {
        radian: radians(180 - angle2),
        degree: 180 - angle2
      };
      nipple.trigger("move", toSend);
      self2.trigger("move " + nipple.id + ":move", toSend);
    };
    Collection.prototype.processOnEnd = function(evt) {
      var self2 = this;
      var opts = self2.options;
      var identifier = self2.manager.getIdentifier(evt);
      var nipple = self2.nipples.get(identifier);
      var removedIdentifier = self2.manager.removeIdentifier(nipple.identifier);
      if (!nipple) {
        return;
      }
      if (!opts.dataOnly) {
        nipple.hide(function() {
          if (opts.mode === "dynamic") {
            nipple.trigger("removed", nipple);
            self2.trigger("removed " + nipple.id + ":removed", nipple);
            self2.manager.trigger("removed " + nipple.id + ":removed", nipple);
            nipple.destroy();
          }
        });
      }
      clearInterval(self2.pressureIntervals[nipple.identifier]);
      nipple.resetDirection();
      nipple.trigger("end", nipple);
      self2.trigger("end " + nipple.id + ":end", nipple);
      if (self2.ids.indexOf(nipple.identifier) >= 0) {
        self2.ids.splice(self2.ids.indexOf(nipple.identifier), 1);
      }
      if (self2.actives.indexOf(nipple) >= 0) {
        self2.actives.splice(self2.actives.indexOf(nipple), 1);
      }
      if (/(semi|static)/.test(opts.mode)) {
        self2.idles.push(nipple);
      } else if (self2.nipples.indexOf(nipple) >= 0) {
        self2.nipples.splice(self2.nipples.indexOf(nipple), 1);
      }
      self2.manager.unbindDocument();
      if (/(semi|static)/.test(opts.mode)) {
        self2.manager.ids[removedIdentifier.id] = removedIdentifier.identifier;
      }
    };
    Collection.prototype.onDestroyed = function(evt, nipple) {
      var self2 = this;
      if (self2.nipples.indexOf(nipple) >= 0) {
        self2.nipples.splice(self2.nipples.indexOf(nipple), 1);
      }
      if (self2.actives.indexOf(nipple) >= 0) {
        self2.actives.splice(self2.actives.indexOf(nipple), 1);
      }
      if (self2.idles.indexOf(nipple) >= 0) {
        self2.idles.splice(self2.idles.indexOf(nipple), 1);
      }
      if (self2.ids.indexOf(nipple.identifier) >= 0) {
        self2.ids.splice(self2.ids.indexOf(nipple.identifier), 1);
      }
      self2.manager.removeIdentifier(nipple.identifier);
      self2.manager.unbindDocument();
    };
    Collection.prototype.destroy = function() {
      var self2 = this;
      self2.unbindEvt(self2.options.zone, "start");
      self2.nipples.forEach(function(nipple) {
        nipple.destroy();
      });
      for (var i in self2.pressureIntervals) {
        if (self2.pressureIntervals.hasOwnProperty(i)) {
          clearInterval(self2.pressureIntervals[i]);
        }
      }
      self2.trigger("destroyed", self2.nipples);
      self2.manager.unbindDocument();
      self2.off();
    };
    collection_default = Collection;
  }
});

// node_modules/nipplejs/src/manager.js
function Manager(options) {
  var self2 = this;
  self2.ids = {};
  self2.index = 0;
  self2.collections = [];
  self2.scroll = getScroll();
  self2.config(options);
  self2.prepareCollections();
  var resizeHandler = function() {
    var pos;
    self2.collections.forEach(function(collection) {
      collection.forEach(function(nipple) {
        pos = nipple.el.getBoundingClientRect();
        nipple.position = {
          x: self2.scroll.x + pos.left,
          y: self2.scroll.y + pos.top
        };
      });
    });
  };
  bindEvt(window, "resize", function() {
    throttle(resizeHandler);
  });
  var scrollHandler = function() {
    self2.scroll = getScroll();
  };
  bindEvt(window, "scroll", function() {
    throttle(scrollHandler);
  });
  return self2.collections;
}
var manager_default;
var init_manager = __esm({
  "node_modules/nipplejs/src/manager.js"() {
    init_collection();
    init_super();
    init_utils();
    Manager.prototype = new super_default();
    Manager.constructor = Manager;
    Manager.prototype.prepareCollections = function() {
      var self2 = this;
      self2.collections.create = self2.create.bind(self2);
      self2.collections.on = self2.on.bind(self2);
      self2.collections.off = self2.off.bind(self2);
      self2.collections.destroy = self2.destroy.bind(self2);
      self2.collections.get = function(id) {
        var nipple;
        self2.collections.every(function(collection) {
          nipple = collection.get(id);
          return nipple ? false : true;
        });
        return nipple;
      };
    };
    Manager.prototype.create = function(options) {
      return this.createCollection(options);
    };
    Manager.prototype.createCollection = function(options) {
      var self2 = this;
      var collection = new collection_default(self2, options);
      self2.bindCollection(collection);
      self2.collections.push(collection);
      return collection;
    };
    Manager.prototype.bindCollection = function(collection) {
      var self2 = this;
      var type;
      var handler = function(evt, data) {
        type = evt.type + " " + data.id + ":" + evt.type;
        self2.trigger(type, data);
      };
      collection.on("destroyed", self2.onDestroyed.bind(self2));
      collection.on("shown hidden rested dir plain", handler);
      collection.on("dir:up dir:right dir:down dir:left", handler);
      collection.on("plain:up plain:right plain:down plain:left", handler);
    };
    Manager.prototype.bindDocument = function() {
      var self2 = this;
      if (!self2.binded) {
        self2.bindEvt(document, "move").bindEvt(document, "end");
        self2.binded = true;
      }
    };
    Manager.prototype.unbindDocument = function(force) {
      var self2 = this;
      if (!Object.keys(self2.ids).length || force === true) {
        self2.unbindEvt(document, "move").unbindEvt(document, "end");
        self2.binded = false;
      }
    };
    Manager.prototype.getIdentifier = function(evt) {
      var id;
      if (!evt) {
        id = this.index;
      } else {
        id = evt.identifier === void 0 ? evt.pointerId : evt.identifier;
        if (id === void 0) {
          id = this.latest || 0;
        }
      }
      if (this.ids[id] === void 0) {
        this.ids[id] = this.index;
        this.index += 1;
      }
      this.latest = id;
      return this.ids[id];
    };
    Manager.prototype.removeIdentifier = function(identifier) {
      var removed = {};
      for (var id in this.ids) {
        if (this.ids[id] === identifier) {
          removed.id = id;
          removed.identifier = this.ids[id];
          delete this.ids[id];
          break;
        }
      }
      return removed;
    };
    Manager.prototype.onmove = function(evt) {
      var self2 = this;
      self2.onAny("move", evt);
      return false;
    };
    Manager.prototype.onend = function(evt) {
      var self2 = this;
      self2.onAny("end", evt);
      return false;
    };
    Manager.prototype.oncancel = function(evt) {
      var self2 = this;
      self2.onAny("end", evt);
      return false;
    };
    Manager.prototype.onAny = function(which, evt) {
      var self2 = this;
      var id;
      var processFn = "processOn" + which.charAt(0).toUpperCase() + which.slice(1);
      evt = prepareEvent(evt);
      var processColl = function(e, id2, coll) {
        if (coll.ids.indexOf(id2) >= 0) {
          coll[processFn](e);
          e._found_ = true;
        }
      };
      var processEvt = function(e) {
        id = self2.getIdentifier(e);
        map(self2.collections, processColl.bind(null, e, id));
        if (!e._found_) {
          self2.removeIdentifier(id);
        }
      };
      map(evt, processEvt);
      return false;
    };
    Manager.prototype.destroy = function() {
      var self2 = this;
      self2.unbindDocument(true);
      self2.ids = {};
      self2.index = 0;
      self2.collections.forEach(function(collection) {
        collection.destroy();
      });
      self2.off();
    };
    Manager.prototype.onDestroyed = function(evt, coll) {
      var self2 = this;
      if (self2.collections.indexOf(coll) < 0) {
        return false;
      }
      self2.collections.splice(self2.collections.indexOf(coll), 1);
    };
    manager_default = Manager;
  }
});

// node_modules/nipplejs/src/index.js
var factory, src_default;
var init_src = __esm({
  "node_modules/nipplejs/src/index.js"() {
    init_manager();
    factory = new manager_default();
    src_default = {
      create: function(options) {
        return factory.create(options);
      },
      factory
    };
  }
});

// node_modules/aframe-extras/src/controls/nipple-controls.js
var nipple_controls_exports = {};
var init_nipple_controls = __esm({
  "node_modules/aframe-extras/src/controls/nipple-controls.js"() {
    init_src();
    AFRAME.registerComponent("nipple-controls", {
      schema: {
        enabled: { default: true },
        mode: { default: "dynamic", oneOf: ["static", "semi", "dynamic"] },
        rotationSensitivity: { default: 1 },
        moveJoystickEnabled: { default: true },
        lookJoystickEnabled: { default: true },
        sideMargin: { default: "30px" },
        bottomMargin: { default: "70px" },
        moveJoystickPosition: { default: "left", oneOf: ["left", "right"] },
        lookJoystickPosition: { default: "right", oneOf: ["left", "right"] }
      },
      init() {
        this.dVelocity = new THREE.Vector3();
        this.lookVector = new THREE.Vector2();
        const lookControls = this.el.querySelector("[look-controls]").components["look-controls"];
        this.pitchObject = lookControls.pitchObject;
        this.yawObject = lookControls.yawObject;
        this.rigRotation = this.el.object3D.rotation;
        this.moveData = void 0;
        this.lookData = void 0;
        this.moving = false;
        this.rotating = false;
      },
      update(oldData) {
        if (this.data.moveJoystickPosition !== oldData.moveJoystickPosition || this.data.sideMargin !== oldData.sideMargin || this.data.bottomMargin !== oldData.bottomMargin || this.data.mode !== oldData.mode) {
          this.removeMoveJoystick();
        }
        if (this.data.lookJoystickPosition !== oldData.lookJoystickPosition || this.data.sideMargin !== oldData.sideMargin || this.data.bottomMargin !== oldData.bottomMargin || this.data.mode !== oldData.mode) {
          this.removeLookJoystick();
        }
        if (this.data.enabled && this.data.moveJoystickEnabled) {
          this.createMoveJoystick();
        } else {
          this.removeMoveJoystick();
        }
        if (this.data.enabled && this.data.lookJoystickEnabled) {
          this.createLookJoystick();
        } else {
          this.removeLookJoystick();
        }
      },
      pause() {
        this.moving = false;
        this.rotating = false;
      },
      remove() {
        this.removeMoveJoystick();
        this.removeLookJoystick();
      },
      isVelocityActive() {
        return this.data.enabled && this.moving;
      },
      getVelocityDelta() {
        this.dVelocity.set(0, 0, 0);
        if (this.isVelocityActive()) {
          const force = this.moveData.force < 1 ? this.moveData.force : 1;
          const angle2 = this.moveData.angle.radian;
          const x = Math.cos(angle2) * force;
          const z = -Math.sin(angle2) * force;
          this.dVelocity.set(x, 0, z);
        }
        return this.dVelocity;
      },
      isRotationActive() {
        return this.data.enabled && this.rotating;
      },
      updateRotation(dt) {
        if (!this.isRotationActive()) return;
        const force = this.lookData.force < 1 ? this.lookData.force : 1;
        const angle2 = this.lookData.angle.radian;
        const lookVector = this.lookVector;
        lookVector.x = Math.cos(angle2) * force;
        lookVector.y = Math.sin(angle2) * force;
        lookVector.multiplyScalar(this.data.rotationSensitivity * dt / 1e3);
        this.yawObject.rotation.y -= lookVector.x;
        let x = this.pitchObject.rotation.x + lookVector.y;
        x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, x));
        this.pitchObject.rotation.x = x;
      },
      tick: function(t, dt) {
        this.updateRotation(dt);
      },
      initLeftZone() {
        const leftZone = document.createElement("div");
        leftZone.setAttribute("id", "joystickLeftZone");
        leftZone.setAttribute(
          "style",
          `position:absolute;${this.data.moveJoystickPosition}:${this.data.sideMargin};bottom:${this.data.bottomMargin};z-index:1`
        );
        document.body.appendChild(leftZone);
        this.leftZone = leftZone;
      },
      initRightZone() {
        const rightZone = document.createElement("div");
        rightZone.setAttribute("id", "joystickRightZone");
        rightZone.setAttribute(
          "style",
          `position:absolute;${this.data.lookJoystickPosition}:${this.data.sideMargin};bottom:${this.data.bottomMargin};z-index:1`
        );
        document.body.appendChild(rightZone);
        this.rightZone = rightZone;
      },
      createMoveJoystick() {
        if (this.moveJoystick) return;
        this.initLeftZone();
        const options = {
          mode: this.data.mode,
          zone: this.leftZone,
          color: "white",
          fadeTime: 0
        };
        this.leftZone.style.width = "100px";
        if (this.data.mode === "static") {
          this.leftZone.style.height = "100px";
          options.position = { left: "50%", bottom: "50%" };
        } else {
          this.leftZone.style.height = "400px";
        }
        this.moveJoystick = src_default.create(options);
        this.moveJoystick.on("move", (evt, data) => {
          this.moveData = data;
          this.moving = true;
        });
        this.moveJoystick.on("end", (evt, data) => {
          this.moving = false;
        });
      },
      createLookJoystick() {
        if (this.lookJoystick) return;
        this.initRightZone();
        const options = {
          mode: this.data.mode,
          zone: this.rightZone,
          color: "white",
          fadeTime: 0
        };
        this.rightZone.style.width = "100px";
        if (this.data.mode === "static") {
          this.rightZone.style.height = "100px";
          options.position = { left: "50%", bottom: "50%" };
        } else {
          this.rightZone.style.height = "400px";
        }
        this.lookJoystick = src_default.create(options);
        this.lookJoystick.on("move", (evt, data) => {
          this.lookData = data;
          this.rotating = true;
        });
        this.lookJoystick.on("end", (evt, data) => {
          this.rotating = false;
        });
      },
      removeMoveJoystick() {
        if (this.moveJoystick) {
          this.moveJoystick.destroy();
          this.moveJoystick = void 0;
        }
        this.moveData = void 0;
        if (this.leftZone && this.leftZone.parentNode) {
          this.leftZone.remove();
          this.leftZone = void 0;
        }
      },
      removeLookJoystick() {
        if (this.lookJoystick) {
          this.lookJoystick.destroy();
          this.lookJoystick = void 0;
        }
        this.lookData = void 0;
        if (this.rightZone && this.rightZone.parentNode) {
          this.rightZone.remove();
          this.rightZone = void 0;
        }
      }
    });
  }
});

// node_modules/aframe-extras/src/controls/index.js
var require_controls = __commonJS({
  "node_modules/aframe-extras/src/controls/index.js"() {
    require_checkpoint_controls();
    require_gamepad_controls();
    require_keyboard_controls();
    require_touch_controls();
    require_movement_controls();
    require_trackpad_controls();
    init_nipple_controls();
  }
});

// node_modules/aframe-extras/src/loaders/animation-mixer.js
var require_animation_mixer = __commonJS({
  "node_modules/aframe-extras/src/loaders/animation-mixer.js"(exports, module) {
    var LoopMode = {
      once: THREE.LoopOnce,
      repeat: THREE.LoopRepeat,
      pingpong: THREE.LoopPingPong
    };
    module.exports = AFRAME.registerComponent("animation-mixer", {
      schema: {
        clip: { default: "*" },
        useRegExp: { default: false },
        duration: { default: 0 },
        clampWhenFinished: { default: false, type: "boolean" },
        crossFadeDuration: { default: 0 },
        loop: { default: "repeat", oneOf: Object.keys(LoopMode) },
        repetitions: { default: Infinity, min: 0 },
        timeScale: { default: 1 },
        startAt: { default: 0 }
      },
      init: function() {
        this.model = null;
        this.mixer = null;
        this.activeActions = [];
        const model = this.el.getObject3D("mesh");
        if (model) {
          this.load(model);
        } else {
          this.el.addEventListener("model-loaded", (e) => {
            this.load(e.detail.model);
          });
        }
      },
      load: function(model) {
        const el = this.el;
        this.model = model;
        this.mixer = new THREE.AnimationMixer(model);
        this.mixer.addEventListener("loop", (e) => {
          el.emit("animation-loop", { action: e.action, loopDelta: e.loopDelta });
        });
        this.mixer.addEventListener("finished", (e) => {
          el.emit("animation-finished", { action: e.action, direction: e.direction });
        });
        if (this.data.clip) this.update({});
      },
      remove: function() {
        if (this.mixer) this.mixer.stopAllAction();
      },
      update: function(prevData) {
        if (!prevData) return;
        const data = this.data;
        const changes = AFRAME.utils.diff(data, prevData);
        if ("clip" in changes) {
          this.stopAction();
          if (data.clip) this.playAction();
          return;
        }
        this.activeActions.forEach((action) => {
          if ("duration" in changes && data.duration) {
            action.setDuration(data.duration);
          }
          if ("clampWhenFinished" in changes) {
            action.clampWhenFinished = data.clampWhenFinished;
          }
          if ("loop" in changes || "repetitions" in changes) {
            action.setLoop(LoopMode[data.loop], data.repetitions);
          }
          if ("timeScale" in changes) {
            action.setEffectiveTimeScale(data.timeScale);
          }
        });
      },
      stopAction: function() {
        const data = this.data;
        for (let i = 0; i < this.activeActions.length; i++) {
          data.crossFadeDuration ? this.activeActions[i].fadeOut(data.crossFadeDuration) : this.activeActions[i].stop();
        }
        this.activeActions.length = 0;
      },
      playAction: function() {
        if (!this.mixer) return;
        const model = this.model, data = this.data, clips = model.animations || (model.geometry || {}).animations || [];
        if (!clips.length) return;
        const re = data.useRegExp ? data.clip : wildcardToRegExp(data.clip);
        for (let clip, i = 0; clip = clips[i]; i++) {
          if (clip.name.match(re)) {
            const action = this.mixer.clipAction(clip, model);
            action.enabled = true;
            action.clampWhenFinished = data.clampWhenFinished;
            if (data.duration) action.setDuration(data.duration);
            if (data.timeScale !== 1) action.setEffectiveTimeScale(data.timeScale);
            action.startAt(this.mixer.time - data.startAt / 1e3);
            action.setLoop(LoopMode[data.loop], data.repetitions).fadeIn(data.crossFadeDuration).play();
            this.activeActions.push(action);
          }
        }
      },
      tick: function(t, dt) {
        if (this.mixer && !isNaN(dt)) this.mixer.update(dt / 1e3);
      }
    });
    function wildcardToRegExp(s) {
      return new RegExp("^" + s.split(/\*+/).map(regExpEscape).join(".*") + "$");
    }
    function regExpEscape(s) {
      return s.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
    }
  }
});

// node_modules/aframe-extras/lib/ColladaLoader.js
var require_ColladaLoader = __commonJS({
  "node_modules/aframe-extras/lib/ColladaLoader.js"(exports, module) {
    module.exports = THREE.ColladaLoader = function(manager) {
      this.manager = manager !== void 0 ? manager : THREE.DefaultLoadingManager;
    };
    THREE.ColladaLoader.prototype = {
      constructor: THREE.ColladaLoader,
      crossOrigin: "anonymous",
      load: function(url, onLoad, onProgress, onError) {
        var scope = this;
        var path = scope.path === void 0 ? THREE.LoaderUtils.extractUrlBase(url) : scope.path;
        var loader = new THREE.FileLoader(scope.manager);
        loader.setPath(scope.path);
        loader.load(url, function(text) {
          onLoad(scope.parse(text, path));
        }, onProgress, onError);
      },
      setPath: function(value) {
        this.path = value;
        return this;
      },
      setResourcePath: function(value) {
        this.resourcePath = value;
        return this;
      },
      options: {
        set convertUpAxis(value) {
          console.warn("THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.");
        }
      },
      setCrossOrigin: function(value) {
        this.crossOrigin = value;
        return this;
      },
      parse: function(text, path) {
        function getElementsByTagName(xml2, name) {
          var array = [];
          var childNodes = xml2.childNodes;
          for (var i = 0, l = childNodes.length; i < l; i++) {
            var child = childNodes[i];
            if (child.nodeName === name) {
              array.push(child);
            }
          }
          return array;
        }
        function parseStrings(text2) {
          if (text2.length === 0) return [];
          var parts = text2.trim().split(/\s+/);
          var array = new Array(parts.length);
          for (var i = 0, l = parts.length; i < l; i++) {
            array[i] = parts[i];
          }
          return array;
        }
        function parseFloats(text2) {
          if (text2.length === 0) return [];
          var parts = text2.trim().split(/\s+/);
          var array = new Array(parts.length);
          for (var i = 0, l = parts.length; i < l; i++) {
            array[i] = parseFloat(parts[i]);
          }
          return array;
        }
        function parseInts(text2) {
          if (text2.length === 0) return [];
          var parts = text2.trim().split(/\s+/);
          var array = new Array(parts.length);
          for (var i = 0, l = parts.length; i < l; i++) {
            array[i] = parseInt(parts[i]);
          }
          return array;
        }
        function parseId(text2) {
          return text2.substring(1);
        }
        function generateId() {
          return "three_default_" + count++;
        }
        function isEmpty(object) {
          return Object.keys(object).length === 0;
        }
        function parseAsset(xml2) {
          return {
            unit: parseAssetUnit(getElementsByTagName(xml2, "unit")[0]),
            upAxis: parseAssetUpAxis(getElementsByTagName(xml2, "up_axis")[0])
          };
        }
        function parseAssetUnit(xml2) {
          if (xml2 !== void 0 && xml2.hasAttribute("meter") === true) {
            return parseFloat(xml2.getAttribute("meter"));
          } else {
            return 1;
          }
        }
        function parseAssetUpAxis(xml2) {
          return xml2 !== void 0 ? xml2.textContent : "Y_UP";
        }
        function parseLibrary(xml2, libraryName, nodeName, parser) {
          var library2 = getElementsByTagName(xml2, libraryName)[0];
          if (library2 !== void 0) {
            var elements = getElementsByTagName(library2, nodeName);
            for (var i = 0; i < elements.length; i++) {
              parser(elements[i]);
            }
          }
        }
        function buildLibrary(data, builder) {
          for (var name in data) {
            var object = data[name];
            object.build = builder(data[name]);
          }
        }
        function getBuild(data, builder) {
          if (data.build !== void 0) return data.build;
          data.build = builder(data);
          return data.build;
        }
        function parseAnimation(xml2) {
          var data = {
            sources: {},
            samplers: {},
            channels: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            var id;
            switch (child.nodeName) {
              case "source":
                id = child.getAttribute("id");
                data.sources[id] = parseSource(child);
                break;
              case "sampler":
                id = child.getAttribute("id");
                data.samplers[id] = parseAnimationSampler(child);
                break;
              case "channel":
                id = child.getAttribute("target");
                data.channels[id] = parseAnimationChannel(child);
                break;
              default:
                console.log(child);
            }
          }
          library.animations[xml2.getAttribute("id")] = data;
        }
        function parseAnimationSampler(xml2) {
          var data = {
            inputs: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "input":
                var id = parseId(child.getAttribute("source"));
                var semantic = child.getAttribute("semantic");
                data.inputs[semantic] = id;
                break;
            }
          }
          return data;
        }
        function parseAnimationChannel(xml2) {
          var data = {};
          var target = xml2.getAttribute("target");
          var parts = target.split("/");
          var id = parts.shift();
          var sid = parts.shift();
          var arraySyntax = sid.indexOf("(") !== -1;
          var memberSyntax = sid.indexOf(".") !== -1;
          if (memberSyntax) {
            parts = sid.split(".");
            sid = parts.shift();
            data.member = parts.shift();
          } else if (arraySyntax) {
            var indices = sid.split("(");
            sid = indices.shift();
            for (var i = 0; i < indices.length; i++) {
              indices[i] = parseInt(indices[i].replace(/\)/, ""));
            }
            data.indices = indices;
          }
          data.id = id;
          data.sid = sid;
          data.arraySyntax = arraySyntax;
          data.memberSyntax = memberSyntax;
          data.sampler = parseId(xml2.getAttribute("source"));
          return data;
        }
        function buildAnimation(data) {
          var tracks = [];
          var channels = data.channels;
          var samplers = data.samplers;
          var sources = data.sources;
          for (var target in channels) {
            if (channels.hasOwnProperty(target)) {
              var channel = channels[target];
              var sampler = samplers[channel.sampler];
              var inputId = sampler.inputs.INPUT;
              var outputId = sampler.inputs.OUTPUT;
              var inputSource = sources[inputId];
              var outputSource = sources[outputId];
              var animation = buildAnimationChannel(channel, inputSource, outputSource);
              createKeyframeTracks(animation, tracks);
            }
          }
          return tracks;
        }
        function getAnimation(id) {
          return getBuild(library.animations[id], buildAnimation);
        }
        function buildAnimationChannel(channel, inputSource, outputSource) {
          var node = library.nodes[channel.id];
          var object3D = getNode(node.id);
          var transform = node.transforms[channel.sid];
          var defaultMatrix = node.matrix.clone().transpose();
          var time, stride;
          var i, il, j, jl;
          var data = {};
          switch (transform) {
            case "matrix":
              for (i = 0, il = inputSource.array.length; i < il; i++) {
                time = inputSource.array[i];
                stride = i * outputSource.stride;
                if (data[time] === void 0) data[time] = {};
                if (channel.arraySyntax === true) {
                  var value = outputSource.array[stride];
                  var index = channel.indices[0] + 4 * channel.indices[1];
                  data[time][index] = value;
                } else {
                  for (j = 0, jl = outputSource.stride; j < jl; j++) {
                    data[time][j] = outputSource.array[stride + j];
                  }
                }
              }
              break;
            case "translate":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
              break;
            case "rotate":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
              break;
            case "scale":
              console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform);
              break;
          }
          var keyframes = prepareAnimationData(data, defaultMatrix);
          var animation = {
            name: object3D.uuid,
            keyframes
          };
          return animation;
        }
        function prepareAnimationData(data, defaultMatrix) {
          var keyframes = [];
          for (var time in data) {
            keyframes.push({ time: parseFloat(time), value: data[time] });
          }
          keyframes.sort(ascending);
          for (var i = 0; i < 16; i++) {
            transformAnimationData(keyframes, i, defaultMatrix.elements[i]);
          }
          return keyframes;
          function ascending(a, b) {
            return a.time - b.time;
          }
        }
        var position = new THREE.Vector3();
        var scale = new THREE.Vector3();
        var quaternion = new THREE.Quaternion();
        function createKeyframeTracks(animation, tracks) {
          var keyframes = animation.keyframes;
          var name = animation.name;
          var times = [];
          var positionData = [];
          var quaternionData = [];
          var scaleData = [];
          for (var i = 0, l = keyframes.length; i < l; i++) {
            var keyframe = keyframes[i];
            var time = keyframe.time;
            var value = keyframe.value;
            matrix.fromArray(value).transpose();
            matrix.decompose(position, quaternion, scale);
            times.push(time);
            positionData.push(position.x, position.y, position.z);
            quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
            scaleData.push(scale.x, scale.y, scale.z);
          }
          if (positionData.length > 0) tracks.push(new THREE.VectorKeyframeTrack(name + ".position", times, positionData));
          if (quaternionData.length > 0) tracks.push(new THREE.QuaternionKeyframeTrack(name + ".quaternion", times, quaternionData));
          if (scaleData.length > 0) tracks.push(new THREE.VectorKeyframeTrack(name + ".scale", times, scaleData));
          return tracks;
        }
        function transformAnimationData(keyframes, property, defaultValue) {
          var keyframe;
          var empty = true;
          var i, l;
          for (i = 0, l = keyframes.length; i < l; i++) {
            keyframe = keyframes[i];
            if (keyframe.value[property] === void 0) {
              keyframe.value[property] = null;
            } else {
              empty = false;
            }
          }
          if (empty === true) {
            for (i = 0, l = keyframes.length; i < l; i++) {
              keyframe = keyframes[i];
              keyframe.value[property] = defaultValue;
            }
          } else {
            createMissingKeyframes(keyframes, property);
          }
        }
        function createMissingKeyframes(keyframes, property) {
          var prev, next;
          for (var i = 0, l = keyframes.length; i < l; i++) {
            var keyframe = keyframes[i];
            if (keyframe.value[property] === null) {
              prev = getPrev(keyframes, i, property);
              next = getNext(keyframes, i, property);
              if (prev === null) {
                keyframe.value[property] = next.value[property];
                continue;
              }
              if (next === null) {
                keyframe.value[property] = prev.value[property];
                continue;
              }
              interpolate(keyframe, prev, next, property);
            }
          }
        }
        function getPrev(keyframes, i, property) {
          while (i >= 0) {
            var keyframe = keyframes[i];
            if (keyframe.value[property] !== null) return keyframe;
            i--;
          }
          return null;
        }
        function getNext(keyframes, i, property) {
          while (i < keyframes.length) {
            var keyframe = keyframes[i];
            if (keyframe.value[property] !== null) return keyframe;
            i++;
          }
          return null;
        }
        function interpolate(key, prev, next, property) {
          if (next.time - prev.time === 0) {
            key.value[property] = prev.value[property];
            return;
          }
          key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];
        }
        function parseAnimationClip(xml2) {
          var data = {
            name: xml2.getAttribute("id") || "default",
            start: parseFloat(xml2.getAttribute("start") || 0),
            end: parseFloat(xml2.getAttribute("end") || 0),
            animations: []
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "instance_animation":
                data.animations.push(parseId(child.getAttribute("url")));
                break;
            }
          }
          library.clips[xml2.getAttribute("id")] = data;
        }
        function buildAnimationClip(data) {
          var tracks = [];
          var name = data.name;
          var duration = data.end - data.start || -1;
          var animations2 = data.animations;
          for (var i = 0, il = animations2.length; i < il; i++) {
            var animationTracks = getAnimation(animations2[i]);
            for (var j = 0, jl = animationTracks.length; j < jl; j++) {
              tracks.push(animationTracks[j]);
            }
          }
          return new THREE.AnimationClip(name, duration, tracks);
        }
        function getAnimationClip(id) {
          return getBuild(library.clips[id], buildAnimationClip);
        }
        function parseController(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "skin":
                data.id = parseId(child.getAttribute("source"));
                data.skin = parseSkin(child);
                break;
              case "morph":
                data.id = parseId(child.getAttribute("source"));
                console.warn("THREE.ColladaLoader: Morph target animation not supported yet.");
                break;
            }
          }
          library.controllers[xml2.getAttribute("id")] = data;
        }
        function parseSkin(xml2) {
          var data = {
            sources: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "bind_shape_matrix":
                data.bindShapeMatrix = parseFloats(child.textContent);
                break;
              case "source":
                var id = child.getAttribute("id");
                data.sources[id] = parseSource(child);
                break;
              case "joints":
                data.joints = parseJoints(child);
                break;
              case "vertex_weights":
                data.vertexWeights = parseVertexWeights(child);
                break;
            }
          }
          return data;
        }
        function parseJoints(xml2) {
          var data = {
            inputs: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "input":
                var semantic = child.getAttribute("semantic");
                var id = parseId(child.getAttribute("source"));
                data.inputs[semantic] = id;
                break;
            }
          }
          return data;
        }
        function parseVertexWeights(xml2) {
          var data = {
            inputs: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "input":
                var semantic = child.getAttribute("semantic");
                var id = parseId(child.getAttribute("source"));
                var offset = parseInt(child.getAttribute("offset"));
                data.inputs[semantic] = { id, offset };
                break;
              case "vcount":
                data.vcount = parseInts(child.textContent);
                break;
              case "v":
                data.v = parseInts(child.textContent);
                break;
            }
          }
          return data;
        }
        function buildController(data) {
          var build = {
            id: data.id
          };
          var geometry = library.geometries[build.id];
          if (data.skin !== void 0) {
            build.skin = buildSkin(data.skin);
            geometry.sources.skinIndices = build.skin.indices;
            geometry.sources.skinWeights = build.skin.weights;
          }
          return build;
        }
        function buildSkin(data) {
          var BONE_LIMIT = 4;
          var build = {
            joints: [],
            // this must be an array to preserve the joint order
            indices: {
              array: [],
              stride: BONE_LIMIT
            },
            weights: {
              array: [],
              stride: BONE_LIMIT
            }
          };
          var sources = data.sources;
          var vertexWeights = data.vertexWeights;
          var vcount = vertexWeights.vcount;
          var v2 = vertexWeights.v;
          var jointOffset = vertexWeights.inputs.JOINT.offset;
          var weightOffset = vertexWeights.inputs.WEIGHT.offset;
          var jointSource = data.sources[data.joints.inputs.JOINT];
          var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];
          var weights = sources[vertexWeights.inputs.WEIGHT.id].array;
          var stride = 0;
          var i, j, l;
          for (i = 0, l = vcount.length; i < l; i++) {
            var jointCount = vcount[i];
            var vertexSkinData = [];
            for (j = 0; j < jointCount; j++) {
              var skinIndex = v2[stride + jointOffset];
              var weightId = v2[stride + weightOffset];
              var skinWeight = weights[weightId];
              vertexSkinData.push({ index: skinIndex, weight: skinWeight });
              stride += 2;
            }
            vertexSkinData.sort(descending);
            for (j = 0; j < BONE_LIMIT; j++) {
              var d2 = vertexSkinData[j];
              if (d2 !== void 0) {
                build.indices.array.push(d2.index);
                build.weights.array.push(d2.weight);
              } else {
                build.indices.array.push(0);
                build.weights.array.push(0);
              }
            }
          }
          if (data.bindShapeMatrix) {
            build.bindMatrix = new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();
          } else {
            build.bindMatrix = new THREE.Matrix4().identity();
          }
          for (i = 0, l = jointSource.array.length; i < l; i++) {
            var name = jointSource.array[i];
            var boneInverse = new THREE.Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();
            build.joints.push({ name, boneInverse });
          }
          return build;
          function descending(a, b) {
            return b.weight - a.weight;
          }
        }
        function getController(id) {
          return getBuild(library.controllers[id], buildController);
        }
        function parseImage(xml2) {
          var data = {
            init_from: getElementsByTagName(xml2, "init_from")[0].textContent
          };
          library.images[xml2.getAttribute("id")] = data;
        }
        function buildImage(data) {
          if (data.build !== void 0) return data.build;
          return data.init_from;
        }
        function getImage(id) {
          var data = library.images[id];
          if (data !== void 0) {
            return getBuild(data, buildImage);
          }
          console.warn("THREE.ColladaLoader: Couldn't find image with ID:", id);
          return null;
        }
        function parseEffect(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "profile_COMMON":
                data.profile = parseEffectProfileCOMMON(child);
                break;
            }
          }
          library.effects[xml2.getAttribute("id")] = data;
        }
        function parseEffectProfileCOMMON(xml2) {
          var data = {
            surfaces: {},
            samplers: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "newparam":
                parseEffectNewparam(child, data);
                break;
              case "technique":
                data.technique = parseEffectTechnique(child);
                break;
              case "extra":
                data.extra = parseEffectExtra(child);
                break;
            }
          }
          return data;
        }
        function parseEffectNewparam(xml2, data) {
          var sid = xml2.getAttribute("sid");
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "surface":
                data.surfaces[sid] = parseEffectSurface(child);
                break;
              case "sampler2D":
                data.samplers[sid] = parseEffectSampler(child);
                break;
            }
          }
        }
        function parseEffectSurface(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "init_from":
                data.init_from = child.textContent;
                break;
            }
          }
          return data;
        }
        function parseEffectSampler(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "source":
                data.source = child.textContent;
                break;
            }
          }
          return data;
        }
        function parseEffectTechnique(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "constant":
              case "lambert":
              case "blinn":
              case "phong":
                data.type = child.nodeName;
                data.parameters = parseEffectParameters(child);
                break;
            }
          }
          return data;
        }
        function parseEffectParameters(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "emission":
              case "diffuse":
              case "specular":
              case "bump":
              case "ambient":
              case "shininess":
              case "transparency":
                data[child.nodeName] = parseEffectParameter(child);
                break;
              case "transparent":
                data[child.nodeName] = {
                  opaque: child.getAttribute("opaque"),
                  data: parseEffectParameter(child)
                };
                break;
            }
          }
          return data;
        }
        function parseEffectParameter(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "color":
                data[child.nodeName] = parseFloats(child.textContent);
                break;
              case "float":
                data[child.nodeName] = parseFloat(child.textContent);
                break;
              case "texture":
                data[child.nodeName] = { id: child.getAttribute("texture"), extra: parseEffectParameterTexture(child) };
                break;
            }
          }
          return data;
        }
        function parseEffectParameterTexture(xml2) {
          var data = {
            technique: {}
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "extra":
                parseEffectParameterTextureExtra(child, data);
                break;
            }
          }
          return data;
        }
        function parseEffectParameterTextureExtra(xml2, data) {
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "technique":
                parseEffectParameterTextureExtraTechnique(child, data);
                break;
            }
          }
        }
        function parseEffectParameterTextureExtraTechnique(xml2, data) {
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "repeatU":
              case "repeatV":
              case "offsetU":
              case "offsetV":
                data.technique[child.nodeName] = parseFloat(child.textContent);
                break;
              case "wrapU":
              case "wrapV":
                if (child.textContent.toUpperCase() === "TRUE") {
                  data.technique[child.nodeName] = 1;
                } else if (child.textContent.toUpperCase() === "FALSE") {
                  data.technique[child.nodeName] = 0;
                } else {
                  data.technique[child.nodeName] = parseInt(child.textContent);
                }
                break;
            }
          }
        }
        function parseEffectExtra(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "technique":
                data.technique = parseEffectExtraTechnique(child);
                break;
            }
          }
          return data;
        }
        function parseEffectExtraTechnique(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "double_sided":
                data[child.nodeName] = parseInt(child.textContent);
                break;
            }
          }
          return data;
        }
        function buildEffect(data) {
          return data;
        }
        function getEffect(id) {
          return getBuild(library.effects[id], buildEffect);
        }
        function parseMaterial(xml2) {
          var data = {
            name: xml2.getAttribute("name")
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "instance_effect":
                data.url = parseId(child.getAttribute("url"));
                break;
            }
          }
          library.materials[xml2.getAttribute("id")] = data;
        }
        function getTextureLoader(image) {
          var loader;
          var extension = image.slice((image.lastIndexOf(".") - 1 >>> 0) + 2);
          extension = extension.toLowerCase();
          switch (extension) {
            case "tga":
              loader = tgaLoader;
              break;
            default:
              loader = textureLoader;
          }
          return loader;
        }
        function buildMaterial(data) {
          var effect = getEffect(data.url);
          var technique = effect.profile.technique;
          var extra = effect.profile.extra;
          var material;
          switch (technique.type) {
            case "phong":
            case "blinn":
              material = new THREE.MeshPhongMaterial();
              break;
            case "lambert":
              material = new THREE.MeshLambertMaterial();
              break;
            default:
              material = new THREE.MeshBasicMaterial();
              break;
          }
          material.name = data.name;
          function getTexture(textureObject) {
            var sampler = effect.profile.samplers[textureObject.id];
            var image = null;
            if (sampler !== void 0) {
              var surface = effect.profile.surfaces[sampler.source];
              image = getImage(surface.init_from);
            } else {
              console.warn("THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).");
              image = getImage(textureObject.id);
            }
            if (image !== null) {
              var loader = getTextureLoader(image);
              if (loader !== void 0) {
                var texture = loader.load(image);
                var extra2 = textureObject.extra;
                if (extra2 !== void 0 && extra2.technique !== void 0 && isEmpty(extra2.technique) === false) {
                  var technique2 = extra2.technique;
                  texture.wrapS = technique2.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                  texture.wrapT = technique2.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                  texture.offset.set(technique2.offsetU || 0, technique2.offsetV || 0);
                  texture.repeat.set(technique2.repeatU || 1, technique2.repeatV || 1);
                } else {
                  texture.wrapS = THREE.RepeatWrapping;
                  texture.wrapT = THREE.RepeatWrapping;
                }
                return texture;
              } else {
                console.warn("THREE.ColladaLoader: Loader for texture %s not found.", image);
                return null;
              }
            } else {
              console.warn("THREE.ColladaLoader: Couldn't create texture with ID:", textureObject.id);
              return null;
            }
          }
          var parameters = technique.parameters;
          for (var key in parameters) {
            var parameter = parameters[key];
            switch (key) {
              case "diffuse":
                if (parameter.color) material.color.fromArray(parameter.color);
                if (parameter.texture) material.map = getTexture(parameter.texture);
                break;
              case "specular":
                if (parameter.color && material.specular) material.specular.fromArray(parameter.color);
                if (parameter.texture) material.specularMap = getTexture(parameter.texture);
                break;
              case "bump":
                if (parameter.texture) material.normalMap = getTexture(parameter.texture);
                break;
              case "ambient":
                if (parameter.texture) material.lightMap = getTexture(parameter.texture);
                break;
              case "shininess":
                if (parameter.float && material.shininess) material.shininess = parameter.float;
                break;
              case "emission":
                if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);
                if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);
                break;
            }
          }
          var transparent = parameters["transparent"];
          var transparency = parameters["transparency"];
          if (transparency === void 0 && transparent) {
            transparency = {
              float: 1
            };
          }
          if (transparent === void 0 && transparency) {
            transparent = {
              opaque: "A_ONE",
              data: {
                color: [1, 1, 1, 1]
              }
            };
          }
          if (transparent && transparency) {
            if (transparent.data.texture) {
              material.transparent = true;
            } else {
              var color = transparent.data.color;
              switch (transparent.opaque) {
                case "A_ONE":
                  material.opacity = color[3] * transparency.float;
                  break;
                case "RGB_ZERO":
                  material.opacity = 1 - color[0] * transparency.float;
                  break;
                case "A_ZERO":
                  material.opacity = 1 - color[3] * transparency.float;
                  break;
                case "RGB_ONE":
                  material.opacity = color[0] * transparency.float;
                  break;
                default:
                  console.warn('THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', transparent.opaque);
              }
              if (material.opacity < 1) material.transparent = true;
            }
          }
          if (extra !== void 0 && extra.technique !== void 0 && extra.technique.double_sided === 1) {
            material.side = THREE.DoubleSide;
          }
          return material;
        }
        function getMaterial(id) {
          return getBuild(library.materials[id], buildMaterial);
        }
        function parseCamera(xml2) {
          var data = {
            name: xml2.getAttribute("name")
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "optics":
                data.optics = parseCameraOptics(child);
                break;
            }
          }
          library.cameras[xml2.getAttribute("id")] = data;
        }
        function parseCameraOptics(xml2) {
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "technique_common":
                return parseCameraTechnique(child);
            }
          }
          return {};
        }
        function parseCameraTechnique(xml2) {
          var data = {};
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "perspective":
              case "orthographic":
                data.technique = child.nodeName;
                data.parameters = parseCameraParameters(child);
                break;
            }
          }
          return data;
        }
        function parseCameraParameters(xml2) {
          var data = {};
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "xfov":
              case "yfov":
              case "xmag":
              case "ymag":
              case "znear":
              case "zfar":
              case "aspect_ratio":
                data[child.nodeName] = parseFloat(child.textContent);
                break;
            }
          }
          return data;
        }
        function buildCamera(data) {
          var camera;
          switch (data.optics.technique) {
            case "perspective":
              camera = new THREE.PerspectiveCamera(
                data.optics.parameters.yfov,
                data.optics.parameters.aspect_ratio,
                data.optics.parameters.znear,
                data.optics.parameters.zfar
              );
              break;
            case "orthographic":
              var ymag = data.optics.parameters.ymag;
              var xmag = data.optics.parameters.xmag;
              var aspectRatio = data.optics.parameters.aspect_ratio;
              xmag = xmag === void 0 ? ymag * aspectRatio : xmag;
              ymag = ymag === void 0 ? xmag / aspectRatio : ymag;
              xmag *= 0.5;
              ymag *= 0.5;
              camera = new THREE.OrthographicCamera(
                -xmag,
                xmag,
                ymag,
                -ymag,
                // left, right, top, bottom
                data.optics.parameters.znear,
                data.optics.parameters.zfar
              );
              break;
            default:
              camera = new THREE.PerspectiveCamera();
              break;
          }
          camera.name = data.name;
          return camera;
        }
        function getCamera(id) {
          var data = library.cameras[id];
          if (data !== void 0) {
            return getBuild(data, buildCamera);
          }
          console.warn("THREE.ColladaLoader: Couldn't find camera with ID:", id);
          return null;
        }
        function parseLight(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "technique_common":
                data = parseLightTechnique(child);
                break;
            }
          }
          library.lights[xml2.getAttribute("id")] = data;
        }
        function parseLightTechnique(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "directional":
              case "point":
              case "spot":
              case "ambient":
                data.technique = child.nodeName;
                data.parameters = parseLightParameters(child);
            }
          }
          return data;
        }
        function parseLightParameters(xml2) {
          var data = {};
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "color":
                var array = parseFloats(child.textContent);
                data.color = new THREE.Color().fromArray(array);
                break;
              case "falloff_angle":
                data.falloffAngle = parseFloat(child.textContent);
                break;
              case "quadratic_attenuation":
                var f2 = parseFloat(child.textContent);
                data.distance = f2 ? Math.sqrt(1 / f2) : 0;
                break;
            }
          }
          return data;
        }
        function buildLight(data) {
          var light;
          switch (data.technique) {
            case "directional":
              light = new THREE.DirectionalLight();
              break;
            case "point":
              light = new THREE.PointLight();
              break;
            case "spot":
              light = new THREE.SpotLight();
              break;
            case "ambient":
              light = new THREE.AmbientLight();
              break;
          }
          if (data.parameters.color) light.color.copy(data.parameters.color);
          if (data.parameters.distance) light.distance = data.parameters.distance;
          return light;
        }
        function getLight(id) {
          var data = library.lights[id];
          if (data !== void 0) {
            return getBuild(data, buildLight);
          }
          console.warn("THREE.ColladaLoader: Couldn't find light with ID:", id);
          return null;
        }
        function parseGeometry(xml2) {
          var data = {
            name: xml2.getAttribute("name"),
            sources: {},
            vertices: {},
            primitives: []
          };
          var mesh = getElementsByTagName(xml2, "mesh")[0];
          if (mesh === void 0) return;
          for (var i = 0; i < mesh.childNodes.length; i++) {
            var child = mesh.childNodes[i];
            if (child.nodeType !== 1) continue;
            var id = child.getAttribute("id");
            switch (child.nodeName) {
              case "source":
                data.sources[id] = parseSource(child);
                break;
              case "vertices":
                data.vertices = parseGeometryVertices(child);
                break;
              case "polygons":
                console.warn("THREE.ColladaLoader: Unsupported primitive type: ", child.nodeName);
                break;
              case "lines":
              case "linestrips":
              case "polylist":
              case "triangles":
                data.primitives.push(parseGeometryPrimitive(child));
                break;
              default:
                console.log(child);
            }
          }
          library.geometries[xml2.getAttribute("id")] = data;
        }
        function parseSource(xml2) {
          var data = {
            array: [],
            stride: 3
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "float_array":
                data.array = parseFloats(child.textContent);
                break;
              case "Name_array":
                data.array = parseStrings(child.textContent);
                break;
              case "technique_common":
                var accessor = getElementsByTagName(child, "accessor")[0];
                if (accessor !== void 0) {
                  data.stride = parseInt(accessor.getAttribute("stride"));
                }
                break;
            }
          }
          return data;
        }
        function parseGeometryVertices(xml2) {
          var data = {};
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            data[child.getAttribute("semantic")] = parseId(child.getAttribute("source"));
          }
          return data;
        }
        function parseGeometryPrimitive(xml2) {
          var primitive = {
            type: xml2.nodeName,
            material: xml2.getAttribute("material"),
            count: parseInt(xml2.getAttribute("count")),
            inputs: {},
            stride: 0,
            hasUV: false
          };
          for (var i = 0, l = xml2.childNodes.length; i < l; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "input":
                var id = parseId(child.getAttribute("source"));
                var semantic = child.getAttribute("semantic");
                var offset = parseInt(child.getAttribute("offset"));
                var set = parseInt(child.getAttribute("set"));
                var inputname = set > 0 ? semantic + set : semantic;
                primitive.inputs[inputname] = { id, offset };
                primitive.stride = Math.max(primitive.stride, offset + 1);
                if (semantic === "TEXCOORD") primitive.hasUV = true;
                break;
              case "vcount":
                primitive.vcount = parseInts(child.textContent);
                break;
              case "p":
                primitive.p = parseInts(child.textContent);
                break;
            }
          }
          return primitive;
        }
        function groupPrimitives(primitives) {
          var build = {};
          for (var i = 0; i < primitives.length; i++) {
            var primitive = primitives[i];
            if (build[primitive.type] === void 0) build[primitive.type] = [];
            build[primitive.type].push(primitive);
          }
          return build;
        }
        function checkUVCoordinates(primitives) {
          var count2 = 0;
          for (var i = 0, l = primitives.length; i < l; i++) {
            var primitive = primitives[i];
            if (primitive.hasUV === true) {
              count2++;
            }
          }
          if (count2 > 0 && count2 < primitives.length) {
            primitives.uvsNeedsFix = true;
          }
        }
        function buildGeometry(data) {
          var build = {};
          var sources = data.sources;
          var vertices = data.vertices;
          var primitives = data.primitives;
          if (primitives.length === 0) return {};
          var groupedPrimitives = groupPrimitives(primitives);
          for (var type in groupedPrimitives) {
            var primitiveType = groupedPrimitives[type];
            checkUVCoordinates(primitiveType);
            build[type] = buildGeometryType(primitiveType, sources, vertices);
          }
          return build;
        }
        function buildGeometryType(primitives, sources, vertices) {
          var build = {};
          var position2 = { array: [], stride: 0 };
          var normal = { array: [], stride: 0 };
          var uv = { array: [], stride: 0 };
          var uv2 = { array: [], stride: 0 };
          var color = { array: [], stride: 0 };
          var skinIndex = { array: [], stride: 4 };
          var skinWeight = { array: [], stride: 4 };
          var geometry = new THREE.BufferGeometry();
          var materialKeys = [];
          var start = 0;
          for (var p2 = 0; p2 < primitives.length; p2++) {
            var primitive = primitives[p2];
            var inputs = primitive.inputs;
            var count2 = 0;
            switch (primitive.type) {
              case "lines":
              case "linestrips":
                count2 = primitive.count * 2;
                break;
              case "triangles":
                count2 = primitive.count * 3;
                break;
              case "polylist":
                for (var g2 = 0; g2 < primitive.count; g2++) {
                  var vc = primitive.vcount[g2];
                  switch (vc) {
                    case 3:
                      count2 += 3;
                      break;
                    case 4:
                      count2 += 6;
                      break;
                    default:
                      count2 += (vc - 2) * 3;
                      break;
                  }
                }
                break;
              default:
                console.warn("THREE.ColladaLoader: Unknow primitive type:", primitive.type);
            }
            geometry.addGroup(start, count2, p2);
            start += count2;
            if (primitive.material) {
              materialKeys.push(primitive.material);
            }
            for (var name in inputs) {
              var input = inputs[name];
              switch (name) {
                case "VERTEX":
                  for (var key in vertices) {
                    var id = vertices[key];
                    switch (key) {
                      case "POSITION":
                        var prevLength = position2.array.length;
                        buildGeometryData(primitive, sources[id], input.offset, position2.array);
                        position2.stride = sources[id].stride;
                        if (sources.skinWeights && sources.skinIndices) {
                          buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);
                          buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);
                        }
                        if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {
                          var count2 = (position2.array.length - prevLength) / position2.stride;
                          for (var i = 0; i < count2; i++) {
                            uv.array.push(0, 0);
                          }
                        }
                        break;
                      case "NORMAL":
                        buildGeometryData(primitive, sources[id], input.offset, normal.array);
                        normal.stride = sources[id].stride;
                        break;
                      case "COLOR":
                        buildGeometryData(primitive, sources[id], input.offset, color.array);
                        color.stride = sources[id].stride;
                        break;
                      case "TEXCOORD":
                        buildGeometryData(primitive, sources[id], input.offset, uv.array);
                        uv.stride = sources[id].stride;
                        break;
                      case "TEXCOORD1":
                        buildGeometryData(primitive, sources[id], input.offset, uv2.array);
                        uv.stride = sources[id].stride;
                        break;
                      default:
                        console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', key);
                    }
                  }
                  break;
                case "NORMAL":
                  buildGeometryData(primitive, sources[input.id], input.offset, normal.array);
                  normal.stride = sources[input.id].stride;
                  break;
                case "COLOR":
                  buildGeometryData(primitive, sources[input.id], input.offset, color.array);
                  color.stride = sources[input.id].stride;
                  break;
                case "TEXCOORD":
                  buildGeometryData(primitive, sources[input.id], input.offset, uv.array);
                  uv.stride = sources[input.id].stride;
                  break;
                case "TEXCOORD1":
                  buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);
                  uv2.stride = sources[input.id].stride;
                  break;
              }
            }
          }
          if (position2.array.length > 0) geometry.addAttribute("position", new THREE.Float32BufferAttribute(position2.array, position2.stride));
          if (normal.array.length > 0) geometry.addAttribute("normal", new THREE.Float32BufferAttribute(normal.array, normal.stride));
          if (color.array.length > 0) geometry.addAttribute("color", new THREE.Float32BufferAttribute(color.array, color.stride));
          if (uv.array.length > 0) geometry.addAttribute("uv", new THREE.Float32BufferAttribute(uv.array, uv.stride));
          if (uv2.array.length > 0) geometry.addAttribute("uv2", new THREE.Float32BufferAttribute(uv2.array, uv2.stride));
          if (skinIndex.array.length > 0) geometry.addAttribute("skinIndex", new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride));
          if (skinWeight.array.length > 0) geometry.addAttribute("skinWeight", new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride));
          build.data = geometry;
          build.type = primitives[0].type;
          build.materialKeys = materialKeys;
          return build;
        }
        function buildGeometryData(primitive, source, offset, array) {
          var indices = primitive.p;
          var stride = primitive.stride;
          var vcount = primitive.vcount;
          function pushVector(i2) {
            var index2 = indices[i2 + offset] * sourceStride;
            var length = index2 + sourceStride;
            for (; index2 < length; index2++) {
              array.push(sourceArray[index2]);
            }
          }
          var sourceArray = source.array;
          var sourceStride = source.stride;
          if (primitive.vcount !== void 0) {
            var index = 0;
            for (var i = 0, l = vcount.length; i < l; i++) {
              var count2 = vcount[i];
              if (count2 === 4) {
                var a = index + stride * 0;
                var b = index + stride * 1;
                var c = index + stride * 2;
                var d2 = index + stride * 3;
                pushVector(a);
                pushVector(b);
                pushVector(d2);
                pushVector(b);
                pushVector(c);
                pushVector(d2);
              } else if (count2 === 3) {
                var a = index + stride * 0;
                var b = index + stride * 1;
                var c = index + stride * 2;
                pushVector(a);
                pushVector(b);
                pushVector(c);
              } else if (count2 > 4) {
                for (var k = 1, kl = count2 - 2; k <= kl; k++) {
                  var a = index + stride * 0;
                  var b = index + stride * k;
                  var c = index + stride * (k + 1);
                  pushVector(a);
                  pushVector(b);
                  pushVector(c);
                }
              }
              index += stride * count2;
            }
          } else {
            for (var i = 0, l = indices.length; i < l; i += stride) {
              pushVector(i);
            }
          }
        }
        function getGeometry(id) {
          return getBuild(library.geometries[id], buildGeometry);
        }
        function parseKinematicsModel(xml2) {
          var data = {
            name: xml2.getAttribute("name") || "",
            joints: {},
            links: []
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "technique_common":
                parseKinematicsTechniqueCommon(child, data);
                break;
            }
          }
          library.kinematicsModels[xml2.getAttribute("id")] = data;
        }
        function buildKinematicsModel(data) {
          if (data.build !== void 0) return data.build;
          return data;
        }
        function getKinematicsModel(id) {
          return getBuild(library.kinematicsModels[id], buildKinematicsModel);
        }
        function parseKinematicsTechniqueCommon(xml2, data) {
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "joint":
                data.joints[child.getAttribute("sid")] = parseKinematicsJoint(child);
                break;
              case "link":
                data.links.push(parseKinematicsLink(child));
                break;
            }
          }
        }
        function parseKinematicsJoint(xml2) {
          var data;
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "prismatic":
              case "revolute":
                data = parseKinematicsJointParameter(child);
                break;
            }
          }
          return data;
        }
        function parseKinematicsJointParameter(xml2, data) {
          var data = {
            sid: xml2.getAttribute("sid"),
            name: xml2.getAttribute("name") || "",
            axis: new THREE.Vector3(),
            limits: {
              min: 0,
              max: 0
            },
            type: xml2.nodeName,
            static: false,
            zeroPosition: 0,
            middlePosition: 0
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "axis":
                var array = parseFloats(child.textContent);
                data.axis.fromArray(array);
                break;
              case "limits":
                var max2 = child.getElementsByTagName("max")[0];
                var min = child.getElementsByTagName("min")[0];
                data.limits.max = parseFloat(max2.textContent);
                data.limits.min = parseFloat(min.textContent);
                break;
            }
          }
          if (data.limits.min >= data.limits.max) {
            data.static = true;
          }
          data.middlePosition = (data.limits.min + data.limits.max) / 2;
          return data;
        }
        function parseKinematicsLink(xml2) {
          var data = {
            sid: xml2.getAttribute("sid"),
            name: xml2.getAttribute("name") || "",
            attachments: [],
            transforms: []
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "attachment_full":
                data.attachments.push(parseKinematicsAttachment(child));
                break;
              case "matrix":
              case "translate":
              case "rotate":
                data.transforms.push(parseKinematicsTransform(child));
                break;
            }
          }
          return data;
        }
        function parseKinematicsAttachment(xml2) {
          var data = {
            joint: xml2.getAttribute("joint").split("/").pop(),
            transforms: [],
            links: []
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "link":
                data.links.push(parseKinematicsLink(child));
                break;
              case "matrix":
              case "translate":
              case "rotate":
                data.transforms.push(parseKinematicsTransform(child));
                break;
            }
          }
          return data;
        }
        function parseKinematicsTransform(xml2) {
          var data = {
            type: xml2.nodeName
          };
          var array = parseFloats(xml2.textContent);
          switch (data.type) {
            case "matrix":
              data.obj = new THREE.Matrix4();
              data.obj.fromArray(array).transpose();
              break;
            case "translate":
              data.obj = new THREE.Vector3();
              data.obj.fromArray(array);
              break;
            case "rotate":
              data.obj = new THREE.Vector3();
              data.obj.fromArray(array);
              data.angle = THREE.MathUtils.degToRad(array[3]);
              break;
          }
          return data;
        }
        function parsePhysicsModel(xml2) {
          var data = {
            name: xml2.getAttribute("name") || "",
            rigidBodies: {}
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "rigid_body":
                data.rigidBodies[child.getAttribute("name")] = {};
                parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute("name")]);
                break;
            }
          }
          library.physicsModels[xml2.getAttribute("id")] = data;
        }
        function parsePhysicsRigidBody(xml2, data) {
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "technique_common":
                parsePhysicsTechniqueCommon(child, data);
                break;
            }
          }
        }
        function parsePhysicsTechniqueCommon(xml2, data) {
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "inertia":
                data.inertia = parseFloats(child.textContent);
                break;
              case "mass":
                data.mass = parseFloats(child.textContent)[0];
                break;
            }
          }
        }
        function parseKinematicsScene(xml2) {
          var data = {
            bindJointAxis: []
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "bind_joint_axis":
                data.bindJointAxis.push(parseKinematicsBindJointAxis(child));
                break;
            }
          }
          library.kinematicsScenes[parseId(xml2.getAttribute("url"))] = data;
        }
        function parseKinematicsBindJointAxis(xml2) {
          var data = {
            target: xml2.getAttribute("target").split("/").pop()
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "axis":
                var param = child.getElementsByTagName("param")[0];
                data.axis = param.textContent;
                var tmpJointIndex = data.axis.split("inst_").pop().split("axis")[0];
                data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);
                break;
            }
          }
          return data;
        }
        function buildKinematicsScene(data) {
          if (data.build !== void 0) return data.build;
          return data;
        }
        function getKinematicsScene(id) {
          return getBuild(library.kinematicsScenes[id], buildKinematicsScene);
        }
        function setupKinematics() {
          var kinematicsModelId = Object.keys(library.kinematicsModels)[0];
          var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];
          var visualSceneId = Object.keys(library.visualScenes)[0];
          if (kinematicsModelId === void 0 || kinematicsSceneId === void 0) return;
          var kinematicsModel = getKinematicsModel(kinematicsModelId);
          var kinematicsScene = getKinematicsScene(kinematicsSceneId);
          var visualScene = getVisualScene(visualSceneId);
          var bindJointAxis = kinematicsScene.bindJointAxis;
          var jointMap = {};
          for (var i = 0, l = bindJointAxis.length; i < l; i++) {
            var axis = bindJointAxis[i];
            var targetElement = collada.querySelector('[sid="' + axis.target + '"]');
            if (targetElement) {
              var parentVisualElement = targetElement.parentElement;
              connect(axis.jointIndex, parentVisualElement);
            }
          }
          function connect(jointIndex, visualElement) {
            var visualElementName = visualElement.getAttribute("name");
            var joint = kinematicsModel.joints[jointIndex];
            visualScene.traverse(function(object) {
              if (object.name === visualElementName) {
                jointMap[jointIndex] = {
                  object,
                  transforms: buildTransformList(visualElement),
                  joint,
                  position: joint.zeroPosition
                };
              }
            });
          }
          var m0 = new THREE.Matrix4();
          kinematics = {
            joints: kinematicsModel && kinematicsModel.joints,
            getJointValue: function(jointIndex) {
              var jointData = jointMap[jointIndex];
              if (jointData) {
                return jointData.position;
              } else {
                console.warn("THREE.ColladaLoader: Joint " + jointIndex + " doesn't exist.");
              }
            },
            setJointValue: function(jointIndex, value) {
              var jointData = jointMap[jointIndex];
              if (jointData) {
                var joint = jointData.joint;
                if (value > joint.limits.max || value < joint.limits.min) {
                  console.warn("THREE.ColladaLoader: Joint " + jointIndex + " value " + value + " outside of limits (min: " + joint.limits.min + ", max: " + joint.limits.max + ").");
                } else if (joint.static) {
                  console.warn("THREE.ColladaLoader: Joint " + jointIndex + " is static.");
                } else {
                  var object = jointData.object;
                  var axis2 = joint.axis;
                  var transforms = jointData.transforms;
                  matrix.identity();
                  for (var i2 = 0; i2 < transforms.length; i2++) {
                    var transform = transforms[i2];
                    if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {
                      switch (joint.type) {
                        case "revolute":
                          matrix.multiply(m0.makeRotationAxis(axis2, THREE.MathUtils.degToRad(value)));
                          break;
                        case "prismatic":
                          matrix.multiply(m0.makeTranslation(axis2.x * value, axis2.y * value, axis2.z * value));
                          break;
                        default:
                          console.warn("THREE.ColladaLoader: Unknown joint type: " + joint.type);
                          break;
                      }
                    } else {
                      switch (transform.type) {
                        case "matrix":
                          matrix.multiply(transform.obj);
                          break;
                        case "translate":
                          matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));
                          break;
                        case "scale":
                          matrix.scale(transform.obj);
                          break;
                        case "rotate":
                          matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));
                          break;
                      }
                    }
                  }
                  object.matrix.copy(matrix);
                  object.matrix.decompose(object.position, object.quaternion, object.scale);
                  jointMap[jointIndex].position = value;
                }
              } else {
                console.log("THREE.ColladaLoader: " + jointIndex + " does not exist.");
              }
            }
          };
        }
        function buildTransformList(node) {
          var transforms = [];
          var xml2 = collada.querySelector('[id="' + node.id + '"]');
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "matrix":
                var array = parseFloats(child.textContent);
                var matrix2 = new THREE.Matrix4().fromArray(array).transpose();
                transforms.push({
                  sid: child.getAttribute("sid"),
                  type: child.nodeName,
                  obj: matrix2
                });
                break;
              case "translate":
              case "scale":
                var array = parseFloats(child.textContent);
                var vector2 = new THREE.Vector3().fromArray(array);
                transforms.push({
                  sid: child.getAttribute("sid"),
                  type: child.nodeName,
                  obj: vector2
                });
                break;
              case "rotate":
                var array = parseFloats(child.textContent);
                var vector2 = new THREE.Vector3().fromArray(array);
                var angle2 = THREE.MathUtils.degToRad(array[3]);
                transforms.push({
                  sid: child.getAttribute("sid"),
                  type: child.nodeName,
                  obj: vector2,
                  angle: angle2
                });
                break;
            }
          }
          return transforms;
        }
        function prepareNodes(xml2) {
          var elements = xml2.getElementsByTagName("node");
          for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            if (element.hasAttribute("id") === false) {
              element.setAttribute("id", generateId());
            }
          }
        }
        var matrix = new THREE.Matrix4();
        var vector = new THREE.Vector3();
        function parseNode(xml2) {
          var data = {
            name: xml2.getAttribute("name") || "",
            type: xml2.getAttribute("type"),
            id: xml2.getAttribute("id"),
            sid: xml2.getAttribute("sid"),
            matrix: new THREE.Matrix4(),
            nodes: [],
            instanceCameras: [],
            instanceControllers: [],
            instanceLights: [],
            instanceGeometries: [],
            instanceNodes: [],
            transforms: {}
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            if (child.nodeType !== 1) continue;
            switch (child.nodeName) {
              case "node":
                data.nodes.push(child.getAttribute("id"));
                parseNode(child);
                break;
              case "instance_camera":
                data.instanceCameras.push(parseId(child.getAttribute("url")));
                break;
              case "instance_controller":
                data.instanceControllers.push(parseNodeInstance(child));
                break;
              case "instance_light":
                data.instanceLights.push(parseId(child.getAttribute("url")));
                break;
              case "instance_geometry":
                data.instanceGeometries.push(parseNodeInstance(child));
                break;
              case "instance_node":
                data.instanceNodes.push(parseId(child.getAttribute("url")));
                break;
              case "matrix":
                var array = parseFloats(child.textContent);
                data.matrix.multiply(matrix.fromArray(array).transpose());
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "translate":
                var array = parseFloats(child.textContent);
                vector.fromArray(array);
                data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "rotate":
                var array = parseFloats(child.textContent);
                var angle2 = THREE.MathUtils.degToRad(array[3]);
                data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle2));
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "scale":
                var array = parseFloats(child.textContent);
                data.matrix.scale(vector.fromArray(array));
                data.transforms[child.getAttribute("sid")] = child.nodeName;
                break;
              case "extra":
                break;
              default:
                console.log(child);
            }
          }
          if (hasNode(data.id)) {
            console.warn("THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.", data.id);
          } else {
            library.nodes[data.id] = data;
          }
          return data;
        }
        function parseNodeInstance(xml2) {
          var data = {
            id: parseId(xml2.getAttribute("url")),
            materials: {},
            skeletons: []
          };
          for (var i = 0; i < xml2.childNodes.length; i++) {
            var child = xml2.childNodes[i];
            switch (child.nodeName) {
              case "bind_material":
                var instances = child.getElementsByTagName("instance_material");
                for (var j = 0; j < instances.length; j++) {
                  var instance = instances[j];
                  var symbol = instance.getAttribute("symbol");
                  var target = instance.getAttribute("target");
                  data.materials[symbol] = parseId(target);
                }
                break;
              case "skeleton":
                data.skeletons.push(parseId(child.textContent));
                break;
              default:
                break;
            }
          }
          return data;
        }
        function buildSkeleton(skeletons, joints) {
          var boneData = [];
          var sortedBoneData = [];
          var i, j, data;
          for (i = 0; i < skeletons.length; i++) {
            var skeleton = skeletons[i];
            var root;
            if (hasNode(skeleton)) {
              root = getNode(skeleton);
              buildBoneHierarchy(root, joints, boneData);
            } else if (hasVisualScene(skeleton)) {
              var visualScene = library.visualScenes[skeleton];
              var children = visualScene.children;
              for (var j = 0; j < children.length; j++) {
                var child = children[j];
                if (child.type === "JOINT") {
                  var root = getNode(child.id);
                  buildBoneHierarchy(root, joints, boneData);
                }
              }
            } else {
              console.error("THREE.ColladaLoader: Unable to find root bone of skeleton with ID:", skeleton);
            }
          }
          for (i = 0; i < joints.length; i++) {
            for (j = 0; j < boneData.length; j++) {
              data = boneData[j];
              if (data.bone.name === joints[i].name) {
                sortedBoneData[i] = data;
                data.processed = true;
                break;
              }
            }
          }
          for (i = 0; i < boneData.length; i++) {
            data = boneData[i];
            if (data.processed === false) {
              sortedBoneData.push(data);
              data.processed = true;
            }
          }
          var bones = [];
          var boneInverses = [];
          for (i = 0; i < sortedBoneData.length; i++) {
            data = sortedBoneData[i];
            bones.push(data.bone);
            boneInverses.push(data.boneInverse);
          }
          return new THREE.Skeleton(bones, boneInverses);
        }
        function buildBoneHierarchy(root, joints, boneData) {
          root.traverse(function(object) {
            if (object.isBone === true) {
              var boneInverse;
              for (var i = 0; i < joints.length; i++) {
                var joint = joints[i];
                if (joint.name === object.name) {
                  boneInverse = joint.boneInverse;
                  break;
                }
              }
              if (boneInverse === void 0) {
                boneInverse = new THREE.Matrix4();
              }
              boneData.push({ bone: object, boneInverse, processed: false });
            }
          });
        }
        function buildNode(data) {
          var objects = [];
          var matrix2 = data.matrix;
          var nodes = data.nodes;
          var type = data.type;
          var instanceCameras = data.instanceCameras;
          var instanceControllers = data.instanceControllers;
          var instanceLights = data.instanceLights;
          var instanceGeometries = data.instanceGeometries;
          var instanceNodes = data.instanceNodes;
          for (var i = 0, l = nodes.length; i < l; i++) {
            objects.push(getNode(nodes[i]));
          }
          for (var i = 0, l = instanceCameras.length; i < l; i++) {
            var instanceCamera = getCamera(instanceCameras[i]);
            if (instanceCamera !== null) {
              objects.push(instanceCamera.clone());
            }
          }
          for (var i = 0, l = instanceControllers.length; i < l; i++) {
            var instance = instanceControllers[i];
            var controller = getController(instance.id);
            var geometries = getGeometry(controller.id);
            var newObjects = buildObjects(geometries, instance.materials);
            var skeletons = instance.skeletons;
            var joints = controller.skin.joints;
            var skeleton = buildSkeleton(skeletons, joints);
            for (var j = 0, jl = newObjects.length; j < jl; j++) {
              var object = newObjects[j];
              if (object.isSkinnedMesh) {
                object.bind(skeleton, controller.skin.bindMatrix);
                object.normalizeSkinWeights();
              }
              objects.push(object);
            }
          }
          for (var i = 0, l = instanceLights.length; i < l; i++) {
            var instanceLight = getLight(instanceLights[i]);
            if (instanceLight !== null) {
              objects.push(instanceLight.clone());
            }
          }
          for (var i = 0, l = instanceGeometries.length; i < l; i++) {
            var instance = instanceGeometries[i];
            var geometries = getGeometry(instance.id);
            var newObjects = buildObjects(geometries, instance.materials);
            for (var j = 0, jl = newObjects.length; j < jl; j++) {
              objects.push(newObjects[j]);
            }
          }
          for (var i = 0, l = instanceNodes.length; i < l; i++) {
            objects.push(getNode(instanceNodes[i]).clone());
          }
          var object;
          if (nodes.length === 0 && objects.length === 1) {
            object = objects[0];
          } else {
            object = type === "JOINT" ? new THREE.Bone() : new THREE.Group();
            for (var i = 0; i < objects.length; i++) {
              object.add(objects[i]);
            }
          }
          if (object.name === "") {
            object.name = type === "JOINT" ? data.sid : data.name;
          }
          object.matrix.copy(matrix2);
          object.matrix.decompose(object.position, object.quaternion, object.scale);
          return object;
        }
        var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 16711935 });
        function resolveMaterialBinding(keys, instanceMaterials) {
          var materials = [];
          for (var i = 0, l = keys.length; i < l; i++) {
            var id = instanceMaterials[keys[i]];
            if (id === void 0) {
              console.warn("THREE.ColladaLoader: Material with key %s not found. Apply fallback material.", keys[i]);
              materials.push(fallbackMaterial);
            } else {
              materials.push(getMaterial(id));
            }
          }
          return materials;
        }
        function buildObjects(geometries, instanceMaterials) {
          var objects = [];
          for (var type in geometries) {
            var geometry = geometries[type];
            var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials);
            if (materials.length === 0) {
              if (type === "lines" || type === "linestrips") {
                materials.push(new THREE.LineBasicMaterial());
              } else {
                materials.push(new THREE.MeshPhongMaterial());
              }
            }
            var skinning = geometry.data.attributes.skinIndex !== void 0;
            if (skinning) {
              for (var i = 0, l = materials.length; i < l; i++) {
                materials[i].skinning = true;
              }
            }
            var material = materials.length === 1 ? materials[0] : materials;
            var object;
            switch (type) {
              case "lines":
                object = new THREE.LineSegments(geometry.data, material);
                break;
              case "linestrips":
                object = new THREE.Line(geometry.data, material);
                break;
              case "triangles":
              case "polylist":
                if (skinning) {
                  object = new THREE.SkinnedMesh(geometry.data, material);
                } else {
                  object = new THREE.Mesh(geometry.data, material);
                }
                break;
            }
            objects.push(object);
          }
          return objects;
        }
        function hasNode(id) {
          return library.nodes[id] !== void 0;
        }
        function getNode(id) {
          return getBuild(library.nodes[id], buildNode);
        }
        function parseVisualScene(xml2) {
          var data = {
            name: xml2.getAttribute("name"),
            children: []
          };
          prepareNodes(xml2);
          var elements = getElementsByTagName(xml2, "node");
          for (var i = 0; i < elements.length; i++) {
            data.children.push(parseNode(elements[i]));
          }
          library.visualScenes[xml2.getAttribute("id")] = data;
        }
        function buildVisualScene(data) {
          var group = new THREE.Group();
          group.name = data.name;
          var children = data.children;
          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            group.add(getNode(child.id));
          }
          return group;
        }
        function hasVisualScene(id) {
          return library.visualScenes[id] !== void 0;
        }
        function getVisualScene(id) {
          return getBuild(library.visualScenes[id], buildVisualScene);
        }
        function parseScene(xml2) {
          var instance = getElementsByTagName(xml2, "instance_visual_scene")[0];
          return getVisualScene(parseId(instance.getAttribute("url")));
        }
        function setupAnimations() {
          var clips = library.clips;
          if (isEmpty(clips) === true) {
            if (isEmpty(library.animations) === false) {
              var tracks = [];
              for (var id in library.animations) {
                var animationTracks = getAnimation(id);
                for (var i = 0, l = animationTracks.length; i < l; i++) {
                  tracks.push(animationTracks[i]);
                }
              }
              animations.push(new THREE.AnimationClip("default", -1, tracks));
            }
          } else {
            for (var id in clips) {
              animations.push(getAnimationClip(id));
            }
          }
        }
        if (text.length === 0) {
          return { scene: new THREE.Scene() };
        }
        var xml = new DOMParser().parseFromString(text, "application/xml");
        var collada = getElementsByTagName(xml, "COLLADA")[0];
        var version = collada.getAttribute("version");
        console.log("THREE.ColladaLoader: File version", version);
        var asset = parseAsset(getElementsByTagName(collada, "asset")[0]);
        var textureLoader = new THREE.TextureLoader(this.manager);
        textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
        var tgaLoader;
        if (THREE.TGALoader) {
          tgaLoader = new THREE.TGALoader(this.manager);
          tgaLoader.setPath(this.resourcePath || path);
        }
        var animations = [];
        var kinematics = {};
        var count = 0;
        var library = {
          animations: {},
          clips: {},
          controllers: {},
          images: {},
          effects: {},
          materials: {},
          cameras: {},
          lights: {},
          geometries: {},
          nodes: {},
          visualScenes: {},
          kinematicsModels: {},
          physicsModels: {},
          kinematicsScenes: {}
        };
        parseLibrary(collada, "library_animations", "animation", parseAnimation);
        parseLibrary(collada, "library_animation_clips", "animation_clip", parseAnimationClip);
        parseLibrary(collada, "library_controllers", "controller", parseController);
        parseLibrary(collada, "library_images", "image", parseImage);
        parseLibrary(collada, "library_effects", "effect", parseEffect);
        parseLibrary(collada, "library_materials", "material", parseMaterial);
        parseLibrary(collada, "library_cameras", "camera", parseCamera);
        parseLibrary(collada, "library_lights", "light", parseLight);
        parseLibrary(collada, "library_geometries", "geometry", parseGeometry);
        parseLibrary(collada, "library_nodes", "node", parseNode);
        parseLibrary(collada, "library_visual_scenes", "visual_scene", parseVisualScene);
        parseLibrary(collada, "library_kinematics_models", "kinematics_model", parseKinematicsModel);
        parseLibrary(collada, "library_physics_models", "physics_model", parsePhysicsModel);
        parseLibrary(collada, "scene", "instance_kinematics_scene", parseKinematicsScene);
        buildLibrary(library.animations, buildAnimation);
        buildLibrary(library.clips, buildAnimationClip);
        buildLibrary(library.controllers, buildController);
        buildLibrary(library.images, buildImage);
        buildLibrary(library.effects, buildEffect);
        buildLibrary(library.materials, buildMaterial);
        buildLibrary(library.cameras, buildCamera);
        buildLibrary(library.lights, buildLight);
        buildLibrary(library.geometries, buildGeometry);
        buildLibrary(library.visualScenes, buildVisualScene);
        setupAnimations();
        setupKinematics();
        var scene = parseScene(getElementsByTagName(collada, "scene")[0]);
        if (asset.upAxis === "Z_UP") {
          scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));
        }
        scene.scale.multiplyScalar(asset.unit);
        return {
          animations,
          kinematics,
          library,
          scene
        };
      }
    };
  }
});

// node_modules/aframe-extras/src/loaders/collada-model-legacy.js
var require_collada_model_legacy = __commonJS({
  "node_modules/aframe-extras/src/loaders/collada-model-legacy.js"(exports, module) {
    THREE.ColladaLoader = require_ColladaLoader();
    module.exports.Component = AFRAME.registerComponent("collada-model-legacy", {
      schema: { type: "asset" },
      init: function() {
        this.model = null;
        this.loader = new THREE.ColladaLoader();
      },
      update: function() {
        var self2 = this;
        var el = this.el;
        var src = this.data;
        var rendererSystem = this.el.sceneEl.systems.renderer;
        if (!src) {
          return;
        }
        this.remove();
        this.loader.load(src, function(colladaModel) {
          self2.model = colladaModel.scene;
          self2.model.traverse(function(object) {
            if (object.isMesh) {
              var material = object.material;
              if (material.color) rendererSystem.applyColorCorrection(material.color);
              if (material.map) rendererSystem.applyColorCorrection(material.map);
              if (material.emissive) rendererSystem.applyColorCorrection(material.emissive);
              if (material.emissiveMap) rendererSystem.applyColorCorrection(material.emissiveMap);
            }
          });
          el.setObject3D("mesh", self2.model);
          el.emit("model-loaded", { format: "collada", model: self2.model });
        });
      },
      remove: function() {
        if (!this.model) {
          return;
        }
        this.el.removeObject3D("mesh");
      }
    });
  }
});

// node_modules/three/build/three.module.js
function generateUUID() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d2 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
  return uuid.toLowerCase();
}
function clamp2(value, min, max2) {
  return Math.max(min, Math.min(max2, value));
}
function euclideanModulo(n, m) {
  return (n % m + m) % m;
}
function mapLinear(x, a1, a2, b1, b22) {
  return b1 + (x - a1) * (b22 - b1) / (a2 - a1);
}
function inverseLerp(x, y, value) {
  if (x !== y) {
    return (value - x) / (y - x);
  } else {
    return 0;
  }
}
function lerp(x, y, t) {
  return (1 - t) * x + t * y;
}
function damp(x, y, lambda, dt) {
  return lerp(x, y, 1 - Math.exp(-lambda * dt));
}
function pingpong(x, length = 1) {
  return length - Math.abs(euclideanModulo(x, length * 2) - length);
}
function smoothstep(x, min, max2) {
  if (x <= min) return 0;
  if (x >= max2) return 1;
  x = (x - min) / (max2 - min);
  return x * x * (3 - 2 * x);
}
function smootherstep(x, min, max2) {
  if (x <= min) return 0;
  if (x >= max2) return 1;
  x = (x - min) / (max2 - min);
  return x * x * x * (x * (x * 6 - 15) + 10);
}
function randInt(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1));
}
function randFloat(low, high) {
  return low + Math.random() * (high - low);
}
function randFloatSpread(range) {
  return range * (0.5 - Math.random());
}
function seededRandom(s) {
  if (s !== void 0) _seed = s;
  let t = _seed += 1831565813;
  t = Math.imul(t ^ t >>> 15, t | 1);
  t ^= t + Math.imul(t ^ t >>> 7, t | 61);
  return ((t ^ t >>> 14) >>> 0) / 4294967296;
}
function degToRad(degrees2) {
  return degrees2 * DEG2RAD;
}
function radToDeg(radians2) {
  return radians2 * RAD2DEG;
}
function isPowerOfTwo(value) {
  return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo(value) {
  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo(value) {
  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler(q, a, b, c, order) {
  const cos = Math.cos;
  const sin = Math.sin;
  const c2 = cos(b / 2);
  const s2 = sin(b / 2);
  const c13 = cos((a + c) / 2);
  const s13 = sin((a + c) / 2);
  const c1_3 = cos((a - c) / 2);
  const s1_3 = sin((a - c) / 2);
  const c3_1 = cos((c - a) / 2);
  const s3_1 = sin((c - a) / 2);
  switch (order) {
    case "XYX":
      q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
      break;
    case "YZY":
      q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
      break;
    case "ZXZ":
      q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
      break;
    case "XZX":
      q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
      break;
    case "YXY":
      q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
      break;
    case "ZYZ":
      q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
  }
}
function denormalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return value / 4294967295;
    case Uint16Array:
      return value / 65535;
    case Uint8Array:
      return value / 255;
    case Int32Array:
      return Math.max(value / 2147483647, -1);
    case Int16Array:
      return Math.max(value / 32767, -1);
    case Int8Array:
      return Math.max(value / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function normalize(value, array) {
  switch (array.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return Math.round(value * 4294967295);
    case Uint16Array:
      return Math.round(value * 65535);
    case Uint8Array:
      return Math.round(value * 255);
    case Int32Array:
      return Math.round(value * 2147483647);
    case Int16Array:
      return Math.round(value * 32767);
    case Int8Array:
      return Math.round(value * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
function arrayNeedsUint32(array) {
  for (let i = array.length - 1; i >= 0; --i) {
    if (array[i] >= 65535) return true;
  }
  return false;
}
function createElementNS(name) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
function warnOnce(message) {
  if (message in _cache) return;
  _cache[message] = true;
  console.warn(message);
}
function SRGBToLinear(c) {
  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c) {
  return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
function serializeImage(image) {
  if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return ImageUtils.getDataURL(image);
  } else {
    if (image.data) {
      return {
        data: Array.from(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
function satForAxes(axes, v0, v1, v2, extents) {
  for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
    _testAxis.fromArray(axes, i);
    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
    const p0 = v0.dot(_testAxis);
    const p1 = v1.dot(_testAxis);
    const p2 = v2.dot(_testAxis);
    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
      return false;
    }
  }
  return true;
}
function hue2rgb(p2, q, t) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1 / 6) return p2 + (q - p2) * 6 * t;
  if (t < 1 / 2) return q;
  if (t < 2 / 3) return p2 + (q - p2) * 6 * (2 / 3 - t);
  return p2;
}
function _generateTables() {
  const buffer = new ArrayBuffer(4);
  const floatView = new Float32Array(buffer);
  const uint32View = new Uint32Array(buffer);
  const baseTable = new Uint32Array(512);
  const shiftTable = new Uint32Array(512);
  for (let i = 0; i < 256; ++i) {
    const e = i - 127;
    if (e < -27) {
      baseTable[i] = 0;
      baseTable[i | 256] = 32768;
      shiftTable[i] = 24;
      shiftTable[i | 256] = 24;
    } else if (e < -14) {
      baseTable[i] = 1024 >> -e - 14;
      baseTable[i | 256] = 1024 >> -e - 14 | 32768;
      shiftTable[i] = -e - 1;
      shiftTable[i | 256] = -e - 1;
    } else if (e <= 15) {
      baseTable[i] = e + 15 << 10;
      baseTable[i | 256] = e + 15 << 10 | 32768;
      shiftTable[i] = 13;
      shiftTable[i | 256] = 13;
    } else if (e < 128) {
      baseTable[i] = 31744;
      baseTable[i | 256] = 64512;
      shiftTable[i] = 24;
      shiftTable[i | 256] = 24;
    } else {
      baseTable[i] = 31744;
      baseTable[i | 256] = 64512;
      shiftTable[i] = 13;
      shiftTable[i | 256] = 13;
    }
  }
  const mantissaTable = new Uint32Array(2048);
  const exponentTable = new Uint32Array(64);
  const offsetTable = new Uint32Array(64);
  for (let i = 1; i < 1024; ++i) {
    let m = i << 13;
    let e = 0;
    while ((m & 8388608) === 0) {
      m <<= 1;
      e -= 8388608;
    }
    m &= ~8388608;
    e += 947912704;
    mantissaTable[i] = m | e;
  }
  for (let i = 1024; i < 2048; ++i) {
    mantissaTable[i] = 939524096 + (i - 1024 << 13);
  }
  for (let i = 1; i < 31; ++i) {
    exponentTable[i] = i << 23;
  }
  exponentTable[31] = 1199570944;
  exponentTable[32] = 2147483648;
  for (let i = 33; i < 63; ++i) {
    exponentTable[i] = 2147483648 + (i - 32 << 23);
  }
  exponentTable[63] = 3347054592;
  for (let i = 1; i < 64; ++i) {
    if (i !== 32) {
      offsetTable[i] = 1024;
    }
  }
  return {
    floatView,
    uint32View,
    baseTable,
    shiftTable,
    mantissaTable,
    exponentTable,
    offsetTable
  };
}
function checkIntersection$1(object, material, raycaster, ray, pA, pB, pC, point) {
  let intersect;
  if (material.side === BackSide) {
    intersect = ray.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
  }
  if (intersect === null) return null;
  _intersectionPointWorld.copy(point);
  _intersectionPointWorld.applyMatrix4(object.matrixWorld);
  const distance2 = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance2 < raycaster.near || distance2 > raycaster.far) return null;
  return {
    distance: distance2,
    point: _intersectionPointWorld.clone(),
    object
  };
}
function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
  object.getVertexPosition(a, _vA$1);
  object.getVertexPosition(b, _vB$1);
  object.getVertexPosition(c, _vC$1);
  const intersection = checkIntersection$1(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
  if (intersection) {
    if (uv) {
      _uvA$1.fromBufferAttribute(uv, a);
      _uvB$1.fromBufferAttribute(uv, b);
      _uvC$1.fromBufferAttribute(uv, c);
      intersection.uv = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
    }
    if (uv1) {
      _uvA$1.fromBufferAttribute(uv1, a);
      _uvB$1.fromBufferAttribute(uv1, b);
      _uvC$1.fromBufferAttribute(uv1, c);
      intersection.uv1 = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
    }
    if (normal) {
      _normalA.fromBufferAttribute(normal, a);
      _normalB.fromBufferAttribute(normal, b);
      _normalC.fromBufferAttribute(normal, c);
      intersection.normal = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3());
      if (intersection.normal.dot(ray.direction) > 0) {
        intersection.normal.multiplyScalar(-1);
      }
    }
    const face = {
      a,
      b,
      c,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
    intersection.face = face;
  }
  return intersection;
}
function cloneUniforms(src) {
  const dst = {};
  for (const u in src) {
    dst[u] = {};
    for (const p2 in src[u]) {
      const property = src[u][p2];
      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
        if (property.isRenderTargetTexture) {
          console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
          dst[u][p2] = null;
        } else {
          dst[u][p2] = property.clone();
        }
      } else if (Array.isArray(property)) {
        dst[u][p2] = property.slice();
      } else {
        dst[u][p2] = property;
      }
    }
  }
  return dst;
}
function mergeUniforms(uniforms) {
  const merged = {};
  for (let u = 0; u < uniforms.length; u++) {
    const tmp2 = cloneUniforms(uniforms[u]);
    for (const p2 in tmp2) {
      merged[p2] = tmp2[p2];
    }
  }
  return merged;
}
function WebGLAnimation() {
  let context = null;
  let isAnimating = false;
  let animationLoop = null;
  let requestId = null;
  function onAnimationFrame(time, frame) {
    animationLoop(time, frame);
    requestId = context.requestAnimationFrame(onAnimationFrame);
  }
  return {
    start: function() {
      if (isAnimating === true) return;
      if (animationLoop === null) return;
      requestId = context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function() {
      context.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function(callback) {
      animationLoop = callback;
    },
    setContext: function(value) {
      context = value;
    }
  };
}
function setProjectionFromUnion(camera, cameraL, cameraR) {
  cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
  cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
  var ipd = cameraLPos.distanceTo(cameraRPos);
  var projL = cameraL.projectionMatrix.elements;
  var projR = cameraR.projectionMatrix.elements;
  var near = projL[14] / (projL[10] - 1);
  var far = projL[14] / (projL[10] + 1);
  var topFov = (projL[9] + 1) / projL[5];
  var bottomFov = (projL[9] - 1) / projL[5];
  var leftFov = (projL[8] - 1) / projL[0];
  var rightFov = (projR[8] + 1) / projR[0];
  var left = near * leftFov;
  var right = near * rightFov;
  var zOffset = ipd / (-leftFov + rightFov);
  var xOffset = zOffset * -leftFov;
  cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
  camera.translateX(xOffset);
  camera.translateZ(zOffset);
  camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
  camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
  var near2 = near + zOffset;
  var far2 = far + zOffset;
  var left2 = left - xOffset;
  var right2 = right + (ipd - xOffset);
  var top2 = topFov * far / far2 * near2;
  var bottom2 = bottomFov * far / far2 * near2;
  camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
}
function WebVRManager(renderer) {
  var renderWidth, renderHeight;
  var scope = this;
  var device = null;
  var frameData = null;
  var poseTarget = null;
  var controllers = [];
  var standingMatrix = new Matrix4();
  var standingMatrixInverse = new Matrix4();
  var framebufferScaleFactor = 1;
  var referenceSpaceType = "local-floor";
  if (typeof window !== "undefined" && "VRFrameData" in window) {
    frameData = new window.VRFrameData();
    window.addEventListener("vrdisplaypresentchange", onVRDisplayPresentChange, false);
  }
  var matrixWorldInverse = new Matrix4();
  var tempQuaternion = new Quaternion();
  var tempPosition = new Vector3();
  var cameraL = new PerspectiveCamera();
  cameraL.viewport = new Vector4();
  cameraL.layers.enable(1);
  var cameraR = new PerspectiveCamera();
  cameraR.viewport = new Vector4();
  cameraR.layers.enable(2);
  var cameraVR = new ArrayCamera([cameraL, cameraR]);
  cameraVR.layers.enable(1);
  cameraVR.layers.enable(2);
  var currentSize = new Vector2(), currentPixelRatio;
  function onVRDisplayPresentChange() {
    var isPresenting = scope.isPresenting = device !== null && device.isPresenting === true;
    if (isPresenting) {
      var eyeParameters = device.getEyeParameters("left");
      renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
      renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;
      currentPixelRatio = renderer.getPixelRatio();
      renderer.getSize(currentSize);
      renderer.setDrawingBufferSize(renderWidth, renderHeight, 1);
      cameraL.viewport.set(0, 0, renderWidth / 2, renderHeight);
      cameraR.viewport.set(renderWidth / 2, 0, renderWidth / 2, renderHeight);
      animation.start();
      scope.dispatchEvent({ type: "sessionstart" });
    } else {
      if (scope.enabled) {
        renderer.setDrawingBufferSize(currentSize.width, currentSize.height, currentPixelRatio);
      }
      animation.stop();
      scope.dispatchEvent({ type: "sessionend" });
    }
  }
  var triggers = [];
  var grips = [];
  function findGamepad(id) {
    var gamepads = navigator.getGamepads && navigator.getGamepads();
    for (var i = 0, l = gamepads.length; i < l; i++) {
      var gamepad = gamepads[i];
      if (gamepad && (gamepad.id === "Daydream Controller" || gamepad.id === "Gear VR Controller" || gamepad.id === "Oculus Go Controller" || gamepad.id === "OpenVR Gamepad" || gamepad.id.startsWith("Oculus Touch") || gamepad.id.startsWith("HTC Vive Focus") || gamepad.id.startsWith("Spatial Controller"))) {
        var hand = gamepad.hand;
        if (id === 0 && (hand === "" || hand === "right")) return gamepad;
        if (id === 1 && hand === "left") return gamepad;
      }
    }
  }
  function updateControllers() {
    for (var i = 0; i < controllers.length; i++) {
      var controller = controllers[i];
      var gamepad = findGamepad(i);
      if (gamepad !== void 0 && gamepad.pose !== void 0) {
        if (gamepad.pose === null) return;
        var pose = gamepad.pose;
        if (pose.hasPosition === false) controller.position.set(0.2, -0.6, -0.05);
        if (pose.position !== null) controller.position.fromArray(pose.position);
        if (pose.orientation !== null) controller.quaternion.fromArray(pose.orientation);
        controller.matrix.compose(controller.position, controller.quaternion, controller.scale);
        controller.matrix.premultiply(standingMatrix);
        controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
        controller.matrixWorldNeedsUpdate = true;
        controller.visible = true;
        var buttonId = gamepad.id === "Daydream Controller" ? 0 : 1;
        if (triggers[i] === void 0) triggers[i] = false;
        if (triggers[i] !== gamepad.buttons[buttonId].pressed) {
          triggers[i] = gamepad.buttons[buttonId].pressed;
          if (triggers[i] === true) {
            controller.dispatchEvent({ type: "selectstart" });
          } else {
            controller.dispatchEvent({ type: "selectend" });
            controller.dispatchEvent({ type: "select" });
          }
        }
        buttonId = 2;
        if (grips[i] === void 0) grips[i] = false;
        if (gamepad.buttons[buttonId] !== void 0) {
          if (grips[i] !== gamepad.buttons[buttonId].pressed) {
            grips[i] = gamepad.buttons[buttonId].pressed;
            if (grips[i] === true) {
              controller.dispatchEvent({ type: "squeezestart" });
            } else {
              controller.dispatchEvent({ type: "squeezeend" });
              controller.dispatchEvent({ type: "squeeze" });
            }
          }
        }
      } else {
        controller.visible = false;
      }
    }
  }
  function updateViewportFromBounds(viewport, bounds) {
    if (bounds !== null && bounds.length === 4) {
      viewport.set(bounds[0] * renderWidth, bounds[1] * renderHeight, bounds[2] * renderWidth, bounds[3] * renderHeight);
    }
  }
  this.enabled = false;
  this.getController = function(id) {
    var controller = controllers[id];
    if (controller === void 0) {
      controller = new Group();
      controller.matrixAutoUpdate = false;
      controller.visible = false;
      controllers[id] = controller;
    }
    return controller;
  };
  this.getDevice = function() {
    return device;
  };
  this.setDevice = function(value) {
    if (value !== void 0) device = value;
    animation.setContext(value);
  };
  this.setFramebufferScaleFactor = function(value) {
    framebufferScaleFactor = value;
  };
  this.setReferenceSpaceType = function(value) {
    referenceSpaceType = value;
  };
  this.setPoseTarget = function(object) {
    if (object !== void 0) poseTarget = object;
  };
  this.cameraAutoUpdate = true;
  this.updateCamera = function(camera) {
    var userHeight = referenceSpaceType === "local-floor" ? 1.6 : 0;
    device.depthNear = camera.near;
    device.depthFar = camera.far;
    device.getFrameData(frameData);
    if (referenceSpaceType === "local-floor") {
      var stageParameters = device.stageParameters;
      if (stageParameters) {
        standingMatrix.fromArray(stageParameters.sittingToStandingTransform);
      } else {
        standingMatrix.makeTranslation(0, userHeight, 0);
      }
    }
    var pose = frameData.pose;
    var poseObject = poseTarget !== null ? poseTarget : camera;
    poseObject.matrix.copy(standingMatrix);
    poseObject.matrix.decompose(poseObject.position, poseObject.quaternion, poseObject.scale);
    if (pose.orientation !== null) {
      tempQuaternion.fromArray(pose.orientation);
      poseObject.quaternion.multiply(tempQuaternion);
    }
    if (pose.position !== null) {
      tempQuaternion.setFromRotationMatrix(standingMatrix);
      tempPosition.fromArray(pose.position);
      tempPosition.applyQuaternion(tempQuaternion);
      poseObject.position.add(tempPosition);
    }
    poseObject.updateMatrixWorld();
    var children = poseObject.children;
    for (var i = 0, l = children.length; i < l; i++) {
      children[i].updateMatrixWorld(true);
    }
    cameraL.near = camera.near;
    cameraR.near = camera.near;
    cameraL.far = camera.far;
    cameraR.far = camera.far;
    cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);
    cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);
    standingMatrixInverse.copy(standingMatrix).invert();
    if (referenceSpaceType === "local-floor") {
      cameraL.matrixWorldInverse.multiply(standingMatrixInverse);
      cameraR.matrixWorldInverse.multiply(standingMatrixInverse);
    }
    var parent = poseObject.parent;
    if (parent !== null) {
      matrixWorldInverse.copy(parent.matrixWorld).invert();
      cameraL.matrixWorldInverse.multiply(matrixWorldInverse);
      cameraR.matrixWorldInverse.multiply(matrixWorldInverse);
    }
    cameraL.matrixWorld.copy(cameraL.matrixWorldInverse).invert();
    cameraR.matrixWorld.copy(cameraR.matrixWorldInverse).invert();
    cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);
    cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);
    setProjectionFromUnion(cameraVR, cameraL, cameraR);
    var layers = device.getLayers();
    if (layers.length) {
      var layer = layers[0];
      updateViewportFromBounds(cameraL.viewport, layer.leftBounds);
      updateViewportFromBounds(cameraR.viewport, layer.rightBounds);
    }
    updateControllers();
    return cameraVR;
  };
  this.getCamera = function() {
    return cameraVR;
  };
  this.getFoveation = function() {
    return 1;
  };
  this.setFoveation = function(foveation) {
    if (foveation !== 1) {
      console.warn("THREE.WebVRManager: setFoveation() not used in WebVR.");
    }
  };
  this.getEnvironmentBlendMode = function() {
    if (scope.isPresenting) {
      return "opaque";
    }
  };
  this.getStandingMatrix = function() {
    return standingMatrix;
  };
  this.isPresenting = false;
  var animation = new WebGLAnimation();
  this.setAnimationLoop = function(callback) {
    animation.setAnimationLoop(callback);
    if (this.isPresenting) animation.start();
  };
  this.submitFrame = function() {
    if (this.isPresenting) device.submitFrame();
  };
  this.dispose = function() {
    if (typeof window !== "undefined") {
      window.removeEventListener("vrdisplaypresentchange", onVRDisplayPresentChange);
    }
  };
  this.setFrameOfReferenceType = function() {
    console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.");
  };
}
function checkIntersection(object, raycaster, ray, thresholdSq, a, b) {
  const positionAttribute = object.geometry.attributes.position;
  _vStart.fromBufferAttribute(positionAttribute, a);
  _vEnd.fromBufferAttribute(positionAttribute, b);
  const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);
  if (distSq > thresholdSq) return;
  _intersectPointOnRay.applyMatrix4(object.matrixWorld);
  const distance2 = raycaster.ray.origin.distanceTo(_intersectPointOnRay);
  if (distance2 < raycaster.near || distance2 > raycaster.far) return;
  return {
    distance: distance2,
    // What do we want? intersection point on the ray or on the segment??
    // point: raycaster.ray.at( distance ),
    point: _intersectPointOnSegment.clone().applyMatrix4(object.matrixWorld),
    index: a,
    face: null,
    faceIndex: null,
    object
  };
}
function CubicPoly() {
  let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
  function init(x0, x1, t0, t1) {
    c0 = x0;
    c1 = t0;
    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
    c3 = 2 * x0 - 2 * x1 + t0 + t1;
  }
  return {
    initCatmullRom: function(x0, x1, x2, x3, tension) {
      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
    },
    initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
      t1 *= dt1;
      t2 *= dt1;
      init(x1, x2, t1, t2);
    },
    calc: function(t) {
      const t2 = t * t;
      const t3 = t2 * t;
      return c0 + c1 * t + c2 * t2 + c3 * t3;
    }
  };
}
function CatmullRom(t, p0, p1, p2, p3) {
  const v0 = (p2 - p0) * 0.5;
  const v1 = (p3 - p1) * 0.5;
  const t2 = t * t;
  const t3 = t * t2;
  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
function QuadraticBezierP0(t, p2) {
  const k = 1 - t;
  return k * k * p2;
}
function QuadraticBezierP1(t, p2) {
  return 2 * (1 - t) * t * p2;
}
function QuadraticBezierP2(t, p2) {
  return t * t * p2;
}
function QuadraticBezier(t, p0, p1, p2) {
  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
}
function CubicBezierP0(t, p2) {
  const k = 1 - t;
  return k * k * k * p2;
}
function CubicBezierP1(t, p2) {
  const k = 1 - t;
  return 3 * k * k * t * p2;
}
function CubicBezierP2(t, p2) {
  return 3 * (1 - t) * t * t * p2;
}
function CubicBezierP3(t, p2) {
  return t * t * t * p2;
}
function CubicBezier(t, p0, p1, p2, p3) {
  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}
function linkedList(data, start, end, dim, clockwise) {
  let i, last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
  } else {
    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start) return start;
  if (!end) end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals(p2, p2.next) || area(p2.prev, p2, p2.next) === 0)) {
      removeNode(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next) break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return;
  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
  let stop = ear, prev, next;
  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i / dim | 0);
      triangles.push(ear.i / dim | 0);
      triangles.push(next.i / dim | 0);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a = ear.prev, b = ear, c = ear.next;
  if (area(a, b, c) >= 0) return false;
  const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
  const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  let p2 = c.next;
  while (p2 !== a) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a = ear.prev, b = ear, c = ear.next;
  if (area(a, b, c) >= 0) return false;
  const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
  const x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  const minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
  let p2 = ear.prevZ, n = ear.nextZ;
  while (p2 && p2.z >= minZ && n && n.z <= maxZ) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a && p2 !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a && p2 !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
  }
  while (n && n.z <= maxZ) {
    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
    n = n.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles, dim) {
  let p2 = start;
  do {
    const a = p2.prev, b = p2.next.next;
    if (!equals(a, b) && intersects(a, p2, p2.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i / dim | 0);
      triangles.push(p2.i / dim | 0);
      triangles.push(b.i / dim | 0);
      removeNode(p2);
      removeNode(p2.next);
      p2 = start = b;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints(p2);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a = start;
  do {
    let b = a.next.next;
    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        let c = splitPolygon(a, b);
        a = filterPoints(a, a.next);
        c = filterPoints(c, c.next);
        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
        earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a = a.next;
  } while (a !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue = [];
  let i, len, start, end, list;
  for (i = 0, len = holeIndices.length; i < len; i++) {
    start = holeIndices[i] * dim;
    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost(list));
  }
  queue.sort(compareX);
  for (i = 0; i < queue.length; i++) {
    outerNode = eliminateHole(queue[i], outerNode);
  }
  return outerNode;
}
function compareX(a, b) {
  return a.x - b.x;
}
function eliminateHole(hole, outerNode) {
  const bridge = findHoleBridge(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon(bridge, hole);
  filterPoints(bridgeReverse, bridgeReverse.next);
  return filterPoints(bridge, bridge.next);
}
function findHoleBridge(hole, outerNode) {
  let p2 = outerNode, qx = -Infinity, m;
  const hx = hole.x, hy = hole.y;
  do {
    if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x <= hx && x > qx) {
        qx = x;
        m = p2.x < p2.next.x ? p2 : p2.next;
        if (x === hx) return m;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m) return null;
  const stop = m, mx = m.x, my = m.y;
  let tanMin = Infinity, tan;
  p2 = m;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      tan = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside(p2, hole) && (tan < tanMin || tan === tanMin && (p2.x > m.x || p2.x === m.x && sectorContainsSector(m, p2)))) {
        m = p2;
        tanMin = tan;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m;
}
function sectorContainsSector(m, p2) {
  return area(m.prev, m, p2.prev) < 0 && area(p2.next, m, m.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === 0) p2.z = zOrder(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked(p2);
}
function sortLinked(list) {
  let i, p2, q, e, tail, numMerges, pSize, qSize, inSize = 1;
  do {
    p2 = list;
    list = null;
    tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      q = p2;
      pSize = 0;
      for (i = 0; i < inSize; i++) {
        pSize++;
        q = q.nextZ;
        if (!q) break;
      }
      qSize = inSize;
      while (pSize > 0 || qSize > 0 && q) {
        if (pSize !== 0 && (qSize === 0 || !q || p2.z <= q.z)) {
          e = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e = q;
          q = q.nextZ;
          qSize--;
        }
        if (tail) tail.nextZ = e;
        else list = e;
        e.prevZ = tail;
        tail = e;
      }
      p2 = q;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x, y, minX, minY, invSize) {
  x = (x - minX) * invSize | 0;
  y = (y - minY) * invSize | 0;
  x = (x | x << 8) & 16711935;
  x = (x | x << 4) & 252645135;
  x = (x | x << 2) & 858993459;
  x = (x | x << 1) & 1431655765;
  y = (y | y << 8) & 16711935;
  y = (y | y << 4) & 252645135;
  y = (y | y << 2) & 858993459;
  y = (y | y << 1) & 1431655765;
  return x | y << 1;
}
function getLeftmost(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y) leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
  return (cx - px2) * (ay - py2) >= (ax - px2) * (cy - py2) && (ax - px2) * (by - py2) >= (bx - px2) * (ay - py2) && (bx - px2) * (cy - py2) >= (cx - px2) * (by - py2);
}
function isValidDiagonal(a, b) {
  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
  (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
  (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p2, q, r) {
  return (q.y - p2.y) * (r.x - q.x) - (q.x - p2.x) * (r.y - q.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
  const o1 = sign(area(p1, q1, p2));
  const o2 = sign(area(p1, q1, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true;
  if (o1 === 0 && onSegment(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment(p2, q1, q2)) return true;
  return false;
}
function onSegment(p2, q, r) {
  return q.x <= Math.max(p2.x, r.x) && q.x >= Math.min(p2.x, r.x) && q.y <= Math.max(p2.y, r.y) && q.y >= Math.min(p2.y, r.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a, b) {
  let p2 = a;
  do {
    if (p2.i !== a.i && p2.next.i !== a.i && p2.i !== b.i && p2.next.i !== b.i && intersects(p2, p2.next, a, b)) return true;
    p2 = p2.next;
  } while (p2 !== a);
  return false;
}
function locallyInside(a, b) {
  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
function middleInside(a, b) {
  let p2 = a, inside = false;
  const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
  do {
    if (p2.y > py2 !== p2.next.y > py2 && p2.next.y !== p2.y && px2 < (p2.next.x - p2.x) * (py2 - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a);
  return inside;
}
function splitPolygon(a, b) {
  const a2 = new Node(a.i, a.x, a.y), b22 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
  a.next = b;
  b.prev = a;
  a2.next = an;
  an.prev = a2;
  b22.next = a2;
  a2.prev = b22;
  bp.next = b22;
  b22.prev = bp;
  return b22;
}
function insertNode(i, x, y, last) {
  const p2 = new Node(i, x, y);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ) p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ) p2.nextZ.prevZ = p2.prevZ;
}
function Node(i, x, y) {
  this.i = i;
  this.x = x;
  this.y = y;
  this.prev = null;
  this.next = null;
  this.z = 0;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function signedArea(data, start, end, dim) {
  let sum = 0;
  for (let i = start, j = end - dim; i < end; i += dim) {
    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
    j = i;
  }
  return sum;
}
function removeDupEndPts(points) {
  const l = points.length;
  if (l > 2 && points[l - 1].equals(points[0])) {
    points.pop();
  }
}
function addContour(vertices, contour) {
  for (let i = 0; i < contour.length; i++) {
    vertices.push(contour[i].x);
    vertices.push(contour[i].y);
  }
}
function toJSON$1(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  data.options = Object.assign({}, options);
  if (options.extrudePath !== void 0) data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
function toJSON(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
function isUniqueEdge(start, end, edges) {
  const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
  const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;
  if (edges.has(hash1) === true || edges.has(hash2) === true) {
    return false;
  } else {
    edges.add(hash1);
    edges.add(hash2);
    return true;
  }
}
function convertArray(array, type, forceClone) {
  if (!array || // let 'undefined' and 'null' pass
  !forceClone && array.constructor === type) return array;
  if (typeof type.BYTES_PER_ELEMENT === "number") {
    return new type(array);
  }
  return Array.prototype.slice.call(array);
}
function isTypedArray(object) {
  return ArrayBuffer.isView(object) && !(object instanceof DataView);
}
function getKeyframeOrder(times) {
  function compareTime(i, j) {
    return times[i] - times[j];
  }
  const n = times.length;
  const result = new Array(n);
  for (let i = 0; i !== n; ++i) result[i] = i;
  result.sort(compareTime);
  return result;
}
function sortedArray(values, stride, order) {
  const nValues = values.length;
  const result = new values.constructor(nValues);
  for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
    const srcOffset = order[i] * stride;
    for (let j = 0; j !== stride; ++j) {
      result[dstOffset++] = values[srcOffset + j];
    }
  }
  return result;
}
function flattenJSON(jsonKeys, times, values, valuePropertyName) {
  let i = 1, key = jsonKeys[0];
  while (key !== void 0 && key[valuePropertyName] === void 0) {
    key = jsonKeys[i++];
  }
  if (key === void 0) return;
  let value = key[valuePropertyName];
  if (value === void 0) return;
  if (Array.isArray(value)) {
    do {
      value = key[valuePropertyName];
      if (value !== void 0) {
        times.push(key.time);
        values.push.apply(values, value);
      }
      key = jsonKeys[i++];
    } while (key !== void 0);
  } else if (value.toArray !== void 0) {
    do {
      value = key[valuePropertyName];
      if (value !== void 0) {
        times.push(key.time);
        value.toArray(values, values.length);
      }
      key = jsonKeys[i++];
    } while (key !== void 0);
  } else {
    do {
      value = key[valuePropertyName];
      if (value !== void 0) {
        times.push(key.time);
        values.push(value);
      }
      key = jsonKeys[i++];
    } while (key !== void 0);
  }
}
function getTrackTypeForValueTypeName(typeName) {
  switch (typeName.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return NumberKeyframeTrack;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return VectorKeyframeTrack;
    case "color":
      return ColorKeyframeTrack;
    case "quaternion":
      return QuaternionKeyframeTrack;
    case "bool":
    case "boolean":
      return BooleanKeyframeTrack;
    case "string":
      return StringKeyframeTrack;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function parseKeyframeTrack(json) {
  if (json.type === void 0) {
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  }
  const trackType = getTrackTypeForValueTypeName(json.type);
  if (json.times === void 0) {
    const times = [], values = [];
    flattenJSON(json.keys, times, values, "value");
    json.times = times;
    json.values = values;
  }
  if (trackType.parse !== void 0) {
    return trackType.parse(json);
  } else {
    return new trackType(json.name, json.times, json.values, json.interpolation);
  }
}
var REVISION, FrontSide, BackSide, NormalBlending, AddEquation, SrcAlphaFactor, OneMinusSrcAlphaFactor, LessEqualDepth, MultiplyOperation, AttachedBindMode, DetachedBindMode, UVMapping, CubeReflectionMapping, EquirectangularReflectionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, LinearFilter, LinearMipmapLinearFilter, UnsignedByteType, UnsignedIntType, FloatType, UnsignedInt248Type, RGBAFormat, DepthFormat, DepthStencilFormat, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, NormalAnimationBlendMode, TangentSpaceNormalMap, NoColorSpace, SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace, LinearDisplayP3ColorSpace, LinearTransfer, SRGBTransfer, Rec709Primaries, P3Primaries, KeepStencilOp, AlwaysStencilFunc, LessEqualCompare, StaticDrawUsage, WebGLCoordinateSystem, WebGPUCoordinateSystem, EventDispatcher, _lut, _seed, DEG2RAD, RAD2DEG, MathUtils, Vector2, Matrix3, _m3, _cache, LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, COLOR_SPACES, SUPPORTED_WORKING_COLOR_SPACES, ColorManagement, _canvas, ImageUtils, _sourceId, Source, _textureId, Texture, Vector4, RenderTarget, WebGLRenderTarget, DataArrayTexture, Data3DTexture, Quaternion, Vector3, _vector$c, _quaternion$4, Box3, _points, _vector$b, _box$4, _v0$2, _v1$7, _v2$4, _f0, _f1, _f2, _center, _extents, _triangleNormal, _testAxis, _box$3, _v1$6, _v2$3, Sphere, _vector$a, _segCenter, _segDir, _diff, _edge1, _edge2, _normal$1, Ray, Matrix4, _v1$5, _m1$4, _zero, _one, _x, _y, _z, _matrix$2, _quaternion$3, Euler, Layers, _object3DId, _v1$4, _q1, _m1$3, _target, _position$3, _scale$2, _quaternion$2, _xAxis, _yAxis, _zAxis, _addedEvent, _removedEvent, _childaddedEvent, _childremovedEvent, Object3D, _v0$1, _v1$3, _v2$2, _v3$2, _vab, _vac, _vbc, _vap, _vbp, _vcp, Triangle, _colorKeywords, _hslA, _hslB, Color, _color, _materialId, Material, MeshBasicMaterial, _tables, _vector$9, _vector2$1, BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute, Float32BufferAttribute, _id$2, _m1$2, _obj, _offset, _box$2, _boxMorphTargets, _vector$8, BufferGeometry, _inverseMatrix$3, _ray$3, _sphere$6, _sphereHitAt, _vA$1, _vB$1, _vC$1, _tempA, _morphA, _uvA$1, _uvB$1, _uvC$1, _normalA, _normalB, _normalC, _intersectionPoint, _intersectionPointWorld, Mesh, BoxGeometry, Camera, _v3$1, _minTarget, _maxTarget, PerspectiveCamera, CubeTexture, _vector1, _vector2, _normalMatrix, Plane, _sphere$5, _vector$7, Frustum, PlaneGeometry, alphahash_fragment, alphahash_pars_fragment, alphamap_fragment, alphamap_pars_fragment, alphatest_fragment, alphatest_pars_fragment, aomap_fragment, aomap_pars_fragment, batching_pars_vertex, batching_vertex, begin_vertex, beginnormal_vertex, bsdfs, iridescence_fragment, bumpmap_pars_fragment, clipping_planes_fragment, clipping_planes_pars_fragment, clipping_planes_pars_vertex, clipping_planes_vertex, color_fragment, color_pars_fragment, color_pars_vertex, color_vertex, common, cube_uv_reflection_fragment, defaultnormal_vertex, displacementmap_pars_vertex, displacementmap_vertex, emissivemap_fragment, emissivemap_pars_fragment, colorspace_fragment, colorspace_pars_fragment, envmap_fragment, envmap_common_pars_fragment, envmap_pars_fragment, envmap_pars_vertex, envmap_vertex, fog_vertex, fog_pars_vertex, fog_fragment, fog_pars_fragment, gradientmap_pars_fragment, lightmap_pars_fragment, lights_lambert_fragment, lights_lambert_pars_fragment, lights_pars_begin, envmap_physical_pars_fragment, lights_toon_fragment, lights_toon_pars_fragment, lights_phong_fragment, lights_phong_pars_fragment, lights_physical_fragment, lights_physical_pars_fragment, lights_fragment_begin, lights_fragment_maps, lights_fragment_end, logdepthbuf_fragment, logdepthbuf_pars_fragment, logdepthbuf_pars_vertex, logdepthbuf_vertex, map_fragment, map_pars_fragment, map_particle_fragment, map_particle_pars_fragment, metalnessmap_fragment, metalnessmap_pars_fragment, morphinstance_vertex, morphcolor_vertex, morphnormal_vertex, morphtarget_pars_vertex, morphtarget_vertex, normal_fragment_begin, normal_fragment_maps, normal_pars_fragment, normal_pars_vertex, normal_vertex, normalmap_pars_fragment, clearcoat_normal_fragment_begin, clearcoat_normal_fragment_maps, clearcoat_pars_fragment, iridescence_pars_fragment, opaque_fragment, packing, premultiplied_alpha_fragment, project_vertex, dithering_fragment, dithering_pars_fragment, roughnessmap_fragment, roughnessmap_pars_fragment, shadowmap_pars_fragment, shadowmap_pars_vertex, shadowmap_vertex, shadowmask_pars_fragment, skinbase_vertex, skinning_pars_vertex, skinning_vertex, skinnormal_vertex, specularmap_fragment, specularmap_pars_fragment, tonemapping_fragment, tonemapping_pars_fragment, transmission_fragment, transmission_pars_fragment, uv_pars_fragment, uv_pars_vertex, uv_vertex, worldpos_vertex, vertex$h, fragment$h, vertex$g, fragment$g, vertex$f, fragment$f, vertex$e, fragment$e, vertex$d, fragment$d, vertex$c, fragment$c, vertex$b, fragment$b, vertex$a, fragment$a, vertex$9, fragment$9, vertex$8, fragment$8, vertex$7, fragment$7, vertex$6, fragment$6, vertex$5, fragment$5, vertex$4, fragment$4, vertex$3, fragment$3, vertex$2, fragment$2, vertex$1, fragment$1, ShaderChunk, UniformsLib, ShaderLib, _e1$1, _m1$1, OrthographicCamera, _flatCamera, _clearColor, PHI, INV_PHI, _axisDirections, DepthTexture, emptyTexture, emptyShadowTexture, emptyArrayTexture, empty3dTexture, emptyCubeTexture, mat4array, mat3array, mat2array, Group, ArrayCamera, cameraLPos, cameraRPos, WebGLMultiviewRenderTarget, _e1, _m1, _vector$6, _intersectPoint, _worldScale, _mvPosition, _alignedPosition, _rotatedPosition, _viewWorldMatrix, _vA, _vB, _vC, _uvA, _uvB, _uvC, _v1$2, _v2$1, _basePosition, _skinIndex, _skinWeight, _vector3, _matrix4, _vertex, _sphere$4, _inverseMatrix$2, _ray$2, SkinnedMesh, Bone, DataTexture, _offsetMatrix, _identityMatrix$1, Skeleton, _instanceLocalMatrix, _instanceWorldMatrix, _box3, _identity, _mesh$1, _sphere$3, MultiDrawRenderList, _matrix$1, _invMatrixWorld, _identityMatrix, _projScreenMatrix$2, _frustum, _box$1, _sphere$2, _vector$5, _renderList, _mesh, LineBasicMaterial, _vStart, _vEnd, _inverseMatrix$1, _ray$1, _sphere$1, _intersectPointOnRay, _intersectPointOnSegment, Line, _start, _end, _inverseMatrix, _ray, _sphere, _position$2, Curve, EllipseCurve, ArcCurve, tmp, px, py, pz, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, Curves, CurvePath, Path, LatheGeometry, CapsuleGeometry, CircleGeometry, CylinderGeometry, ConeGeometry, PolyhedronGeometry, DodecahedronGeometry, _v0, _v1$1, _normal, _triangle, EdgesGeometry, Shape, Earcut, ShapeUtils, ExtrudeGeometry, WorldUVGenerator, IcosahedronGeometry, OctahedronGeometry, RingGeometry, ShapeGeometry, SphereGeometry, TetrahedronGeometry, TorusGeometry, TorusKnotGeometry, TubeGeometry, WireframeGeometry, Geometries, MeshPhongMaterial, MeshLambertMaterial, Interpolant, CubicInterpolant, LinearInterpolant, DiscreteInterpolant, KeyframeTrack, BooleanKeyframeTrack, ColorKeyframeTrack, NumberKeyframeTrack, QuaternionLinearInterpolant, QuaternionKeyframeTrack, StringKeyframeTrack, VectorKeyframeTrack, AnimationClip, Cache, LoadingManager, DefaultLoadingManager, Loader, loading, HttpError, FileLoader, ImageLoader, TextureLoader, Light, _projScreenMatrix$1, _lightPositionWorld$1, _lookTarget$1, LightShadow, SpotLightShadow, SpotLight, _projScreenMatrix, _lightPositionWorld, _lookTarget, PointLightShadow, PointLight, DirectionalLightShadow, DirectionalLight, AmbientLight, LoaderUtils, _eyeRight, _eyeLeft, _projectionMatrix, _position$1, _quaternion$1, _scale$1, _orientation$1, _position, _quaternion, _scale, _orientation, _RESERVED_CHARS_RE, _reservedRe, _wordChar, _wordCharOrDot, _directoryRe, _nodeRe, _objectRe, _propertyRe, _trackRe, _supportedObjectNames, Composite, PropertyBinding, _controlInterpolantsResultBuffer, _matrix, _vector$4, _startP, _startEnd, _vector$3, _vector$2, _boneMatrix, _matrixWorldInv, _vector$1, _color1, _color2, _v1, _v2, _v3, _vector, _camera, _box, _axis;
var init_three_module = __esm({
  "node_modules/three/build/three.module.js"() {
    REVISION = "164";
    FrontSide = 0;
    BackSide = 1;
    NormalBlending = 1;
    AddEquation = 100;
    SrcAlphaFactor = 204;
    OneMinusSrcAlphaFactor = 205;
    LessEqualDepth = 3;
    MultiplyOperation = 0;
    AttachedBindMode = "attached";
    DetachedBindMode = "detached";
    UVMapping = 300;
    CubeReflectionMapping = 301;
    EquirectangularReflectionMapping = 303;
    RepeatWrapping = 1e3;
    ClampToEdgeWrapping = 1001;
    MirroredRepeatWrapping = 1002;
    NearestFilter = 1003;
    LinearFilter = 1006;
    LinearMipmapLinearFilter = 1008;
    UnsignedByteType = 1009;
    UnsignedIntType = 1014;
    FloatType = 1015;
    UnsignedInt248Type = 1020;
    RGBAFormat = 1023;
    DepthFormat = 1026;
    DepthStencilFormat = 1027;
    InterpolateDiscrete = 2300;
    InterpolateLinear = 2301;
    InterpolateSmooth = 2302;
    ZeroCurvatureEnding = 2400;
    ZeroSlopeEnding = 2401;
    WrapAroundEnding = 2402;
    NormalAnimationBlendMode = 2500;
    TangentSpaceNormalMap = 0;
    NoColorSpace = "";
    SRGBColorSpace = "srgb";
    LinearSRGBColorSpace = "srgb-linear";
    DisplayP3ColorSpace = "display-p3";
    LinearDisplayP3ColorSpace = "display-p3-linear";
    LinearTransfer = "linear";
    SRGBTransfer = "srgb";
    Rec709Primaries = "rec709";
    P3Primaries = "p3";
    KeepStencilOp = 7680;
    AlwaysStencilFunc = 519;
    LessEqualCompare = 515;
    StaticDrawUsage = 35044;
    WebGLCoordinateSystem = 2e3;
    WebGPUCoordinateSystem = 2001;
    EventDispatcher = class {
      addEventListener(type, listener) {
        if (this._listeners === void 0) this._listeners = {};
        const listeners = this._listeners;
        if (listeners[type] === void 0) {
          listeners[type] = [];
        }
        if (listeners[type].indexOf(listener) === -1) {
          listeners[type].push(listener);
        }
      }
      hasEventListener(type, listener) {
        if (this._listeners === void 0) return false;
        const listeners = this._listeners;
        return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
      }
      removeEventListener(type, listener) {
        if (this._listeners === void 0) return;
        const listeners = this._listeners;
        const listenerArray = listeners[type];
        if (listenerArray !== void 0) {
          const index = listenerArray.indexOf(listener);
          if (index !== -1) {
            listenerArray.splice(index, 1);
          }
        }
      }
      dispatchEvent(event) {
        if (this._listeners === void 0) return;
        const listeners = this._listeners;
        const listenerArray = listeners[event.type];
        if (listenerArray !== void 0) {
          event.target = this;
          const array = listenerArray.slice(0);
          for (let i = 0, l = array.length; i < l; i++) {
            array[i].call(this, event);
          }
          event.target = null;
        }
      }
    };
    _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
    _seed = 1234567;
    DEG2RAD = Math.PI / 180;
    RAD2DEG = 180 / Math.PI;
    MathUtils = {
      DEG2RAD,
      RAD2DEG,
      generateUUID,
      clamp: clamp2,
      euclideanModulo,
      mapLinear,
      inverseLerp,
      lerp,
      damp,
      pingpong,
      smoothstep,
      smootherstep,
      randInt,
      randFloat,
      randFloatSpread,
      seededRandom,
      degToRad,
      radToDeg,
      isPowerOfTwo,
      ceilPowerOfTwo,
      floorPowerOfTwo,
      setQuaternionFromProperEuler,
      normalize,
      denormalize
    };
    Vector2 = class _Vector2 {
      constructor(x = 0, y = 0) {
        _Vector2.prototype.isVector2 = true;
        this.x = x;
        this.y = y;
      }
      get width() {
        return this.x;
      }
      set width(value) {
        this.x = value;
      }
      get height() {
        return this.y;
      }
      set height(value) {
        this.y = value;
      }
      set(x, y) {
        this.x = x;
        this.y = y;
        return this;
      }
      setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
      }
      setX(x) {
        this.x = x;
        return this;
      }
      setY(y) {
        this.y = y;
        return this;
      }
      setComponent(index, value) {
        switch (index) {
          case 0:
            this.x = value;
            break;
          case 1:
            this.y = value;
            break;
          default:
            throw new Error("index is out of range: " + index);
        }
        return this;
      }
      getComponent(index) {
        switch (index) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          default:
            throw new Error("index is out of range: " + index);
        }
      }
      clone() {
        return new this.constructor(this.x, this.y);
      }
      copy(v2) {
        this.x = v2.x;
        this.y = v2.y;
        return this;
      }
      add(v2) {
        this.x += v2.x;
        this.y += v2.y;
        return this;
      }
      addScalar(s) {
        this.x += s;
        this.y += s;
        return this;
      }
      addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
      }
      addScaledVector(v2, s) {
        this.x += v2.x * s;
        this.y += v2.y * s;
        return this;
      }
      sub(v2) {
        this.x -= v2.x;
        this.y -= v2.y;
        return this;
      }
      subScalar(s) {
        this.x -= s;
        this.y -= s;
        return this;
      }
      subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
      }
      multiply(v2) {
        this.x *= v2.x;
        this.y *= v2.y;
        return this;
      }
      multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
      }
      divide(v2) {
        this.x /= v2.x;
        this.y /= v2.y;
        return this;
      }
      divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
      }
      applyMatrix3(m) {
        const x = this.x, y = this.y;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
      }
      min(v2) {
        this.x = Math.min(this.x, v2.x);
        this.y = Math.min(this.y, v2.y);
        return this;
      }
      max(v2) {
        this.x = Math.max(this.x, v2.x);
        this.y = Math.max(this.y, v2.y);
        return this;
      }
      clamp(min, max2) {
        this.x = Math.max(min.x, Math.min(max2.x, this.x));
        this.y = Math.max(min.y, Math.min(max2.y, this.y));
        return this;
      }
      clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
      }
      clampLength(min, max2) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max2, length)));
      }
      floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
      }
      ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
      }
      round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
      }
      roundToZero() {
        this.x = Math.trunc(this.x);
        this.y = Math.trunc(this.y);
        return this;
      }
      negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
      }
      dot(v2) {
        return this.x * v2.x + this.y * v2.y;
      }
      cross(v2) {
        return this.x * v2.y - this.y * v2.x;
      }
      lengthSq() {
        return this.x * this.x + this.y * this.y;
      }
      length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
      }
      manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
      }
      normalize() {
        return this.divideScalar(this.length() || 1);
      }
      angle() {
        const angle2 = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle2;
      }
      angleTo(v2) {
        const denominator = Math.sqrt(this.lengthSq() * v2.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v2) / denominator;
        return Math.acos(clamp2(theta, -1, 1));
      }
      distanceTo(v2) {
        return Math.sqrt(this.distanceToSquared(v2));
      }
      distanceToSquared(v2) {
        const dx = this.x - v2.x, dy = this.y - v2.y;
        return dx * dx + dy * dy;
      }
      manhattanDistanceTo(v2) {
        return Math.abs(this.x - v2.x) + Math.abs(this.y - v2.y);
      }
      setLength(length) {
        return this.normalize().multiplyScalar(length);
      }
      lerp(v2, alpha) {
        this.x += (v2.x - this.x) * alpha;
        this.y += (v2.y - this.y) * alpha;
        return this;
      }
      lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        return this;
      }
      equals(v2) {
        return v2.x === this.x && v2.y === this.y;
      }
      fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        return this;
      }
      rotateAround(center, angle2) {
        const c = Math.cos(angle2), s = Math.sin(angle2);
        const x = this.x - center.x;
        const y = this.y - center.y;
        this.x = x * c - y * s + center.x;
        this.y = x * s + y * c + center.y;
        return this;
      }
      random() {
        this.x = Math.random();
        this.y = Math.random();
        return this;
      }
      *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
      }
    };
    Matrix3 = class _Matrix3 {
      constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        _Matrix3.prototype.isMatrix3 = true;
        this.elements = [
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1
        ];
        if (n11 !== void 0) {
          this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
        }
      }
      set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        const te2 = this.elements;
        te2[0] = n11;
        te2[1] = n21;
        te2[2] = n31;
        te2[3] = n12;
        te2[4] = n22;
        te2[5] = n32;
        te2[6] = n13;
        te2[7] = n23;
        te2[8] = n33;
        return this;
      }
      identity() {
        this.set(
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1
        );
        return this;
      }
      copy(m) {
        const te2 = this.elements;
        const me = m.elements;
        te2[0] = me[0];
        te2[1] = me[1];
        te2[2] = me[2];
        te2[3] = me[3];
        te2[4] = me[4];
        te2[5] = me[5];
        te2[6] = me[6];
        te2[7] = me[7];
        te2[8] = me[8];
        return this;
      }
      extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrix3Column(this, 0);
        yAxis.setFromMatrix3Column(this, 1);
        zAxis.setFromMatrix3Column(this, 2);
        return this;
      }
      setFromMatrix4(m) {
        const me = m.elements;
        this.set(
          me[0],
          me[4],
          me[8],
          me[1],
          me[5],
          me[9],
          me[2],
          me[6],
          me[10]
        );
        return this;
      }
      multiply(m) {
        return this.multiplyMatrices(this, m);
      }
      premultiply(m) {
        return this.multiplyMatrices(m, this);
      }
      multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te2 = this.elements;
        const a11 = ae[0], a12 = ae[3], a13 = ae[6];
        const a21 = ae[1], a22 = ae[4], a23 = ae[7];
        const a31 = ae[2], a32 = ae[5], a33 = ae[8];
        const b11 = be[0], b12 = be[3], b13 = be[6];
        const b21 = be[1], b22 = be[4], b23 = be[7];
        const b31 = be[2], b32 = be[5], b33 = be[8];
        te2[0] = a11 * b11 + a12 * b21 + a13 * b31;
        te2[3] = a11 * b12 + a12 * b22 + a13 * b32;
        te2[6] = a11 * b13 + a12 * b23 + a13 * b33;
        te2[1] = a21 * b11 + a22 * b21 + a23 * b31;
        te2[4] = a21 * b12 + a22 * b22 + a23 * b32;
        te2[7] = a21 * b13 + a22 * b23 + a23 * b33;
        te2[2] = a31 * b11 + a32 * b21 + a33 * b31;
        te2[5] = a31 * b12 + a32 * b22 + a33 * b32;
        te2[8] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
      }
      multiplyScalar(s) {
        const te2 = this.elements;
        te2[0] *= s;
        te2[3] *= s;
        te2[6] *= s;
        te2[1] *= s;
        te2[4] *= s;
        te2[7] *= s;
        te2[2] *= s;
        te2[5] *= s;
        te2[8] *= s;
        return this;
      }
      determinant() {
        const te2 = this.elements;
        const a = te2[0], b = te2[1], c = te2[2], d2 = te2[3], e = te2[4], f2 = te2[5], g2 = te2[6], h = te2[7], i = te2[8];
        return a * e * i - a * f2 * h - b * d2 * i + b * f2 * g2 + c * d2 * h - c * e * g2;
      }
      invert() {
        const te2 = this.elements, n11 = te2[0], n21 = te2[1], n31 = te2[2], n12 = te2[3], n22 = te2[4], n32 = te2[5], n13 = te2[6], n23 = te2[7], n33 = te2[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te2[0] = t11 * detInv;
        te2[1] = (n31 * n23 - n33 * n21) * detInv;
        te2[2] = (n32 * n21 - n31 * n22) * detInv;
        te2[3] = t12 * detInv;
        te2[4] = (n33 * n11 - n31 * n13) * detInv;
        te2[5] = (n31 * n12 - n32 * n11) * detInv;
        te2[6] = t13 * detInv;
        te2[7] = (n21 * n13 - n23 * n11) * detInv;
        te2[8] = (n22 * n11 - n21 * n12) * detInv;
        return this;
      }
      transpose() {
        let tmp2;
        const m = this.elements;
        tmp2 = m[1];
        m[1] = m[3];
        m[3] = tmp2;
        tmp2 = m[2];
        m[2] = m[6];
        m[6] = tmp2;
        tmp2 = m[5];
        m[5] = m[7];
        m[7] = tmp2;
        return this;
      }
      getNormalMatrix(matrix4) {
        return this.setFromMatrix4(matrix4).invert().transpose();
      }
      transposeIntoArray(r) {
        const m = this.elements;
        r[0] = m[0];
        r[1] = m[3];
        r[2] = m[6];
        r[3] = m[1];
        r[4] = m[4];
        r[5] = m[7];
        r[6] = m[2];
        r[7] = m[5];
        r[8] = m[8];
        return this;
      }
      setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
        const c = Math.cos(rotation);
        const s = Math.sin(rotation);
        this.set(
          sx * c,
          sx * s,
          -sx * (c * cx + s * cy) + cx + tx,
          -sy * s,
          sy * c,
          -sy * (-s * cx + c * cy) + cy + ty,
          0,
          0,
          1
        );
        return this;
      }
      //
      scale(sx, sy) {
        this.premultiply(_m3.makeScale(sx, sy));
        return this;
      }
      rotate(theta) {
        this.premultiply(_m3.makeRotation(-theta));
        return this;
      }
      translate(tx, ty) {
        this.premultiply(_m3.makeTranslation(tx, ty));
        return this;
      }
      // for 2D Transforms
      makeTranslation(x, y) {
        if (x.isVector2) {
          this.set(
            1,
            0,
            x.x,
            0,
            1,
            x.y,
            0,
            0,
            1
          );
        } else {
          this.set(
            1,
            0,
            x,
            0,
            1,
            y,
            0,
            0,
            1
          );
        }
        return this;
      }
      makeRotation(theta) {
        const c = Math.cos(theta);
        const s = Math.sin(theta);
        this.set(
          c,
          -s,
          0,
          s,
          c,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeScale(x, y) {
        this.set(
          x,
          0,
          0,
          0,
          y,
          0,
          0,
          0,
          1
        );
        return this;
      }
      //
      equals(matrix) {
        const te2 = this.elements;
        const me = matrix.elements;
        for (let i = 0; i < 9; i++) {
          if (te2[i] !== me[i]) return false;
        }
        return true;
      }
      fromArray(array, offset = 0) {
        for (let i = 0; i < 9; i++) {
          this.elements[i] = array[i + offset];
        }
        return this;
      }
      toArray(array = [], offset = 0) {
        const te2 = this.elements;
        array[offset] = te2[0];
        array[offset + 1] = te2[1];
        array[offset + 2] = te2[2];
        array[offset + 3] = te2[3];
        array[offset + 4] = te2[4];
        array[offset + 5] = te2[5];
        array[offset + 6] = te2[6];
        array[offset + 7] = te2[7];
        array[offset + 8] = te2[8];
        return array;
      }
      clone() {
        return new this.constructor().fromArray(this.elements);
      }
    };
    _m3 = new Matrix3();
    _cache = {};
    LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = new Matrix3().set(
      0.8224621,
      0.177538,
      0,
      0.0331941,
      0.9668058,
      0,
      0.0170827,
      0.0723974,
      0.9105199
    );
    LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = new Matrix3().set(
      1.2249401,
      -0.2249404,
      0,
      -0.0420569,
      1.0420571,
      0,
      -0.0196376,
      -0.0786361,
      1.0982735
    );
    COLOR_SPACES = {
      [LinearSRGBColorSpace]: {
        transfer: LinearTransfer,
        primaries: Rec709Primaries,
        toReference: (color) => color,
        fromReference: (color) => color
      },
      [SRGBColorSpace]: {
        transfer: SRGBTransfer,
        primaries: Rec709Primaries,
        toReference: (color) => color.convertSRGBToLinear(),
        fromReference: (color) => color.convertLinearToSRGB()
      },
      [LinearDisplayP3ColorSpace]: {
        transfer: LinearTransfer,
        primaries: P3Primaries,
        toReference: (color) => color.applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),
        fromReference: (color) => color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3)
      },
      [DisplayP3ColorSpace]: {
        transfer: SRGBTransfer,
        primaries: P3Primaries,
        toReference: (color) => color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),
        fromReference: (color) => color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB()
      }
    };
    SUPPORTED_WORKING_COLOR_SPACES = /* @__PURE__ */ new Set([LinearSRGBColorSpace, LinearDisplayP3ColorSpace]);
    ColorManagement = {
      enabled: true,
      _workingColorSpace: LinearSRGBColorSpace,
      get workingColorSpace() {
        return this._workingColorSpace;
      },
      set workingColorSpace(colorSpace) {
        if (!SUPPORTED_WORKING_COLOR_SPACES.has(colorSpace)) {
          throw new Error(`Unsupported working color space, "${colorSpace}".`);
        }
        this._workingColorSpace = colorSpace;
      },
      convert: function(color, sourceColorSpace, targetColorSpace) {
        if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
          return color;
        }
        const sourceToReference = COLOR_SPACES[sourceColorSpace].toReference;
        const targetFromReference = COLOR_SPACES[targetColorSpace].fromReference;
        return targetFromReference(sourceToReference(color));
      },
      fromWorkingColorSpace: function(color, targetColorSpace) {
        return this.convert(color, this._workingColorSpace, targetColorSpace);
      },
      toWorkingColorSpace: function(color, sourceColorSpace) {
        return this.convert(color, sourceColorSpace, this._workingColorSpace);
      },
      getPrimaries: function(colorSpace) {
        return COLOR_SPACES[colorSpace].primaries;
      },
      getTransfer: function(colorSpace) {
        if (colorSpace === NoColorSpace) return LinearTransfer;
        return COLOR_SPACES[colorSpace].transfer;
      }
    };
    ImageUtils = class {
      static getDataURL(image) {
        if (/^data:/i.test(image.src)) {
          return image.src;
        }
        if (typeof HTMLCanvasElement === "undefined") {
          return image.src;
        }
        let canvas;
        if (image instanceof HTMLCanvasElement) {
          canvas = image;
        } else {
          if (_canvas === void 0) _canvas = createElementNS("canvas");
          _canvas.width = image.width;
          _canvas.height = image.height;
          const context = _canvas.getContext("2d");
          if (image instanceof ImageData) {
            context.putImageData(image, 0, 0);
          } else {
            context.drawImage(image, 0, 0, image.width, image.height);
          }
          canvas = _canvas;
        }
        if (canvas.width > 2048 || canvas.height > 2048) {
          console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
          return canvas.toDataURL("image/jpeg", 0.6);
        } else {
          return canvas.toDataURL("image/png");
        }
      }
      static sRGBToLinear(image) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const canvas = createElementNS("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, image.width, image.height);
          const imageData = context.getImageData(0, 0, image.width, image.height);
          const data = imageData.data;
          for (let i = 0; i < data.length; i++) {
            data[i] = SRGBToLinear(data[i] / 255) * 255;
          }
          context.putImageData(imageData, 0, 0);
          return canvas;
        } else if (image.data) {
          const data = image.data.slice(0);
          for (let i = 0; i < data.length; i++) {
            if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
              data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
            } else {
              data[i] = SRGBToLinear(data[i]);
            }
          }
          return {
            data,
            width: image.width,
            height: image.height
          };
        } else {
          console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
          return image;
        }
      }
    };
    _sourceId = 0;
    Source = class {
      constructor(data = null) {
        this.isSource = true;
        Object.defineProperty(this, "id", { value: _sourceId++ });
        this.uuid = generateUUID();
        this.data = data;
        this.dataReady = true;
        this.version = 0;
      }
      set needsUpdate(value) {
        if (value === true) this.version++;
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        if (!isRootObject && meta.images[this.uuid] !== void 0) {
          return meta.images[this.uuid];
        }
        const output = {
          uuid: this.uuid,
          url: ""
        };
        const data = this.data;
        if (data !== null) {
          let url;
          if (Array.isArray(data)) {
            url = [];
            for (let i = 0, l = data.length; i < l; i++) {
              if (data[i].isDataTexture) {
                url.push(serializeImage(data[i].image));
              } else {
                url.push(serializeImage(data[i]));
              }
            }
          } else {
            url = serializeImage(data);
          }
          output.url = url;
        }
        if (!isRootObject) {
          meta.images[this.uuid] = output;
        }
        return output;
      }
    };
    _textureId = 0;
    Texture = class _Texture extends EventDispatcher {
      constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
        super();
        this.isTexture = true;
        Object.defineProperty(this, "id", { value: _textureId++ });
        this.uuid = generateUUID();
        this.name = "";
        this.source = new Source(image);
        this.mipmaps = [];
        this.mapping = mapping;
        this.channel = 0;
        this.wrapS = wrapS;
        this.wrapT = wrapT;
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.anisotropy = anisotropy;
        this.format = format;
        this.internalFormat = null;
        this.type = type;
        this.offset = new Vector2(0, 0);
        this.repeat = new Vector2(1, 1);
        this.center = new Vector2(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = true;
        this.matrix = new Matrix3();
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4;
        this.colorSpace = colorSpace;
        this.userData = {};
        this.version = 0;
        this.onUpdate = null;
        this.isRenderTargetTexture = false;
        this.pmremVersion = 0;
      }
      get image() {
        return this.source.data;
      }
      set image(value = null) {
        this.source.data = value;
      }
      updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.name = source.name;
        this.source = source.source;
        this.mipmaps = source.mipmaps.slice(0);
        this.mapping = source.mapping;
        this.channel = source.channel;
        this.wrapS = source.wrapS;
        this.wrapT = source.wrapT;
        this.magFilter = source.magFilter;
        this.minFilter = source.minFilter;
        this.anisotropy = source.anisotropy;
        this.format = source.format;
        this.internalFormat = source.internalFormat;
        this.type = source.type;
        this.offset.copy(source.offset);
        this.repeat.copy(source.repeat);
        this.center.copy(source.center);
        this.rotation = source.rotation;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrix.copy(source.matrix);
        this.generateMipmaps = source.generateMipmaps;
        this.premultiplyAlpha = source.premultiplyAlpha;
        this.flipY = source.flipY;
        this.unpackAlignment = source.unpackAlignment;
        this.colorSpace = source.colorSpace;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        this.needsUpdate = true;
        return this;
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        if (!isRootObject && meta.textures[this.uuid] !== void 0) {
          return meta.textures[this.uuid];
        }
        const output = {
          metadata: {
            version: 4.6,
            type: "Texture",
            generator: "Texture.toJSON"
          },
          uuid: this.uuid,
          name: this.name,
          image: this.source.toJSON(meta).uuid,
          mapping: this.mapping,
          channel: this.channel,
          repeat: [this.repeat.x, this.repeat.y],
          offset: [this.offset.x, this.offset.y],
          center: [this.center.x, this.center.y],
          rotation: this.rotation,
          wrap: [this.wrapS, this.wrapT],
          format: this.format,
          internalFormat: this.internalFormat,
          type: this.type,
          colorSpace: this.colorSpace,
          minFilter: this.minFilter,
          magFilter: this.magFilter,
          anisotropy: this.anisotropy,
          flipY: this.flipY,
          generateMipmaps: this.generateMipmaps,
          premultiplyAlpha: this.premultiplyAlpha,
          unpackAlignment: this.unpackAlignment
        };
        if (Object.keys(this.userData).length > 0) output.userData = this.userData;
        if (!isRootObject) {
          meta.textures[this.uuid] = output;
        }
        return output;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
      transformUv(uv) {
        if (this.mapping !== UVMapping) return uv;
        uv.applyMatrix3(this.matrix);
        if (uv.x < 0 || uv.x > 1) {
          switch (this.wrapS) {
            case RepeatWrapping:
              uv.x = uv.x - Math.floor(uv.x);
              break;
            case ClampToEdgeWrapping:
              uv.x = uv.x < 0 ? 0 : 1;
              break;
            case MirroredRepeatWrapping:
              if (Math.abs(Math.floor(uv.x) % 2) === 1) {
                uv.x = Math.ceil(uv.x) - uv.x;
              } else {
                uv.x = uv.x - Math.floor(uv.x);
              }
              break;
          }
        }
        if (uv.y < 0 || uv.y > 1) {
          switch (this.wrapT) {
            case RepeatWrapping:
              uv.y = uv.y - Math.floor(uv.y);
              break;
            case ClampToEdgeWrapping:
              uv.y = uv.y < 0 ? 0 : 1;
              break;
            case MirroredRepeatWrapping:
              if (Math.abs(Math.floor(uv.y) % 2) === 1) {
                uv.y = Math.ceil(uv.y) - uv.y;
              } else {
                uv.y = uv.y - Math.floor(uv.y);
              }
              break;
          }
        }
        if (this.flipY) {
          uv.y = 1 - uv.y;
        }
        return uv;
      }
      set needsUpdate(value) {
        if (value === true) {
          this.version++;
          this.source.needsUpdate = true;
        }
      }
      set needsPMREMUpdate(value) {
        if (value === true) {
          this.pmremVersion++;
        }
      }
    };
    Texture.DEFAULT_IMAGE = null;
    Texture.DEFAULT_MAPPING = UVMapping;
    Texture.DEFAULT_ANISOTROPY = 1;
    Vector4 = class _Vector4 {
      constructor(x = 0, y = 0, z = 0, w = 1) {
        _Vector4.prototype.isVector4 = true;
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
      }
      get width() {
        return this.z;
      }
      set width(value) {
        this.z = value;
      }
      get height() {
        return this.w;
      }
      set height(value) {
        this.w = value;
      }
      set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
      }
      setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        this.w = scalar;
        return this;
      }
      setX(x) {
        this.x = x;
        return this;
      }
      setY(y) {
        this.y = y;
        return this;
      }
      setZ(z) {
        this.z = z;
        return this;
      }
      setW(w) {
        this.w = w;
        return this;
      }
      setComponent(index, value) {
        switch (index) {
          case 0:
            this.x = value;
            break;
          case 1:
            this.y = value;
            break;
          case 2:
            this.z = value;
            break;
          case 3:
            this.w = value;
            break;
          default:
            throw new Error("index is out of range: " + index);
        }
        return this;
      }
      getComponent(index) {
        switch (index) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          case 3:
            return this.w;
          default:
            throw new Error("index is out of range: " + index);
        }
      }
      clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
      }
      copy(v2) {
        this.x = v2.x;
        this.y = v2.y;
        this.z = v2.z;
        this.w = v2.w !== void 0 ? v2.w : 1;
        return this;
      }
      add(v2) {
        this.x += v2.x;
        this.y += v2.y;
        this.z += v2.z;
        this.w += v2.w;
        return this;
      }
      addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        this.w += s;
        return this;
      }
      addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this;
      }
      addScaledVector(v2, s) {
        this.x += v2.x * s;
        this.y += v2.y * s;
        this.z += v2.z * s;
        this.w += v2.w * s;
        return this;
      }
      sub(v2) {
        this.x -= v2.x;
        this.y -= v2.y;
        this.z -= v2.z;
        this.w -= v2.w;
        return this;
      }
      subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        this.w -= s;
        return this;
      }
      subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this;
      }
      multiply(v2) {
        this.x *= v2.x;
        this.y *= v2.y;
        this.z *= v2.z;
        this.w *= v2.w;
        return this;
      }
      multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        this.w *= scalar;
        return this;
      }
      applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
        return this;
      }
      divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
      }
      setAxisAngleFromQuaternion(q) {
        this.w = 2 * Math.acos(q.w);
        const s = Math.sqrt(1 - q.w * q.w);
        if (s < 1e-4) {
          this.x = 1;
          this.y = 0;
          this.z = 0;
        } else {
          this.x = q.x / s;
          this.y = q.y / s;
          this.z = q.z / s;
        }
        return this;
      }
      setAxisAngleFromRotationMatrix(m) {
        let angle2, x, y, z;
        const epsilon = 0.01, epsilon2 = 0.1, te2 = m.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10];
        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
          if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
            this.set(1, 0, 0, 0);
            return this;
          }
          angle2 = Math.PI;
          const xx = (m11 + 1) / 2;
          const yy = (m22 + 1) / 2;
          const zz = (m33 + 1) / 2;
          const xy = (m12 + m21) / 4;
          const xz = (m13 + m31) / 4;
          const yz = (m23 + m32) / 4;
          if (xx > yy && xx > zz) {
            if (xx < epsilon) {
              x = 0;
              y = 0.707106781;
              z = 0.707106781;
            } else {
              x = Math.sqrt(xx);
              y = xy / x;
              z = xz / x;
            }
          } else if (yy > zz) {
            if (yy < epsilon) {
              x = 0.707106781;
              y = 0;
              z = 0.707106781;
            } else {
              y = Math.sqrt(yy);
              x = xy / y;
              z = yz / y;
            }
          } else {
            if (zz < epsilon) {
              x = 0.707106781;
              y = 0.707106781;
              z = 0;
            } else {
              z = Math.sqrt(zz);
              x = xz / z;
              y = yz / z;
            }
          }
          this.set(x, y, z, angle2);
          return this;
        }
        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
        if (Math.abs(s) < 1e-3) s = 1;
        this.x = (m32 - m23) / s;
        this.y = (m13 - m31) / s;
        this.z = (m21 - m12) / s;
        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
        return this;
      }
      min(v2) {
        this.x = Math.min(this.x, v2.x);
        this.y = Math.min(this.y, v2.y);
        this.z = Math.min(this.z, v2.z);
        this.w = Math.min(this.w, v2.w);
        return this;
      }
      max(v2) {
        this.x = Math.max(this.x, v2.x);
        this.y = Math.max(this.y, v2.y);
        this.z = Math.max(this.z, v2.z);
        this.w = Math.max(this.w, v2.w);
        return this;
      }
      clamp(min, max2) {
        this.x = Math.max(min.x, Math.min(max2.x, this.x));
        this.y = Math.max(min.y, Math.min(max2.y, this.y));
        this.z = Math.max(min.z, Math.min(max2.z, this.z));
        this.w = Math.max(min.w, Math.min(max2.w, this.w));
        return this;
      }
      clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        this.w = Math.max(minVal, Math.min(maxVal, this.w));
        return this;
      }
      clampLength(min, max2) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max2, length)));
      }
      floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
      }
      ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
      }
      round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
      }
      roundToZero() {
        this.x = Math.trunc(this.x);
        this.y = Math.trunc(this.y);
        this.z = Math.trunc(this.z);
        this.w = Math.trunc(this.w);
        return this;
      }
      negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
      }
      dot(v2) {
        return this.x * v2.x + this.y * v2.y + this.z * v2.z + this.w * v2.w;
      }
      lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
      }
      length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      }
      manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
      }
      normalize() {
        return this.divideScalar(this.length() || 1);
      }
      setLength(length) {
        return this.normalize().multiplyScalar(length);
      }
      lerp(v2, alpha) {
        this.x += (v2.x - this.x) * alpha;
        this.y += (v2.y - this.y) * alpha;
        this.z += (v2.z - this.z) * alpha;
        this.w += (v2.w - this.w) * alpha;
        return this;
      }
      lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        this.w = v1.w + (v2.w - v1.w) * alpha;
        return this;
      }
      equals(v2) {
        return v2.x === this.x && v2.y === this.y && v2.z === this.z && v2.w === this.w;
      }
      fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        this.w = array[offset + 3];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        array[offset + 3] = this.w;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        this.w = attribute.getW(index);
        return this;
      }
      random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        this.w = Math.random();
        return this;
      }
      *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
        yield this.w;
      }
    };
    RenderTarget = class extends EventDispatcher {
      constructor(width = 1, height = 1, options = {}) {
        super();
        this.isRenderTarget = true;
        this.width = width;
        this.height = height;
        this.depth = 1;
        this.scissor = new Vector4(0, 0, width, height);
        this.scissorTest = false;
        this.viewport = new Vector4(0, 0, width, height);
        const image = { width, height, depth: 1 };
        options = Object.assign({
          generateMipmaps: false,
          internalFormat: null,
          minFilter: LinearFilter,
          depthBuffer: true,
          stencilBuffer: false,
          resolveDepthBuffer: true,
          resolveStencilBuffer: true,
          depthTexture: null,
          samples: 0,
          count: 1
        }, options);
        const texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
        texture.flipY = false;
        texture.generateMipmaps = options.generateMipmaps;
        texture.internalFormat = options.internalFormat;
        this.textures = [];
        const count = options.count;
        for (let i = 0; i < count; i++) {
          this.textures[i] = texture.clone();
          this.textures[i].isRenderTargetTexture = true;
        }
        this.depthBuffer = options.depthBuffer;
        this.stencilBuffer = options.stencilBuffer;
        this.resolveDepthBuffer = options.resolveDepthBuffer;
        this.resolveStencilBuffer = options.resolveStencilBuffer;
        this.depthTexture = options.depthTexture;
        this.samples = options.samples;
      }
      get texture() {
        return this.textures[0];
      }
      set texture(value) {
        this.textures[0] = value;
      }
      setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
          this.width = width;
          this.height = height;
          this.depth = depth;
          for (let i = 0, il = this.textures.length; i < il; i++) {
            this.textures[i].image.width = width;
            this.textures[i].image.height = height;
            this.textures[i].image.depth = depth;
          }
          this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.scissor.copy(source.scissor);
        this.scissorTest = source.scissorTest;
        this.viewport.copy(source.viewport);
        this.textures.length = 0;
        for (let i = 0, il = source.textures.length; i < il; i++) {
          this.textures[i] = source.textures[i].clone();
          this.textures[i].isRenderTargetTexture = true;
        }
        const image = Object.assign({}, source.texture.image);
        this.texture.source = new Source(image);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        this.resolveDepthBuffer = source.resolveDepthBuffer;
        this.resolveStencilBuffer = source.resolveStencilBuffer;
        if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
        this.samples = source.samples;
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
    };
    WebGLRenderTarget = class extends RenderTarget {
      constructor(width = 1, height = 1, options = {}) {
        super(width, height, options);
        this.isWebGLRenderTarget = true;
      }
    };
    DataArrayTexture = class extends Texture {
      constructor(data = null, width = 1, height = 1, depth = 1) {
        super(null);
        this.isDataArrayTexture = true;
        this.image = { data, width, height, depth };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
      }
    };
    Data3DTexture = class extends Texture {
      constructor(data = null, width = 1, height = 1, depth = 1) {
        super(null);
        this.isData3DTexture = true;
        this.image = { data, width, height, depth };
        this.magFilter = NearestFilter;
        this.minFilter = NearestFilter;
        this.wrapR = ClampToEdgeWrapping;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
      }
    };
    Quaternion = class {
      constructor(x = 0, y = 0, z = 0, w = 1) {
        this.isQuaternion = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
      }
      static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
        let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
        if (t === 0) {
          dst[dstOffset + 0] = x0;
          dst[dstOffset + 1] = y0;
          dst[dstOffset + 2] = z0;
          dst[dstOffset + 3] = w0;
          return;
        }
        if (t === 1) {
          dst[dstOffset + 0] = x1;
          dst[dstOffset + 1] = y1;
          dst[dstOffset + 2] = z1;
          dst[dstOffset + 3] = w1;
          return;
        }
        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
          let s = 1 - t;
          const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
          if (sqrSin > Number.EPSILON) {
            const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
            s = Math.sin(s * len) / sin;
            t = Math.sin(t * len) / sin;
          }
          const tDir = t * dir;
          x0 = x0 * s + x1 * tDir;
          y0 = y0 * s + y1 * tDir;
          z0 = z0 * s + z1 * tDir;
          w0 = w0 * s + w1 * tDir;
          if (s === 1 - t) {
            const f2 = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
            x0 *= f2;
            y0 *= f2;
            z0 *= f2;
            w0 *= f2;
          }
        }
        dst[dstOffset] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
      }
      static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
        const x0 = src0[srcOffset0];
        const y0 = src0[srcOffset0 + 1];
        const z0 = src0[srcOffset0 + 2];
        const w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1];
        const y1 = src1[srcOffset1 + 1];
        const z1 = src1[srcOffset1 + 2];
        const w1 = src1[srcOffset1 + 3];
        dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
        dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
        dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
        dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
        return dst;
      }
      get x() {
        return this._x;
      }
      set x(value) {
        this._x = value;
        this._onChangeCallback();
      }
      get y() {
        return this._y;
      }
      set y(value) {
        this._y = value;
        this._onChangeCallback();
      }
      get z() {
        return this._z;
      }
      set z(value) {
        this._z = value;
        this._onChangeCallback();
      }
      get w() {
        return this._w;
      }
      set w(value) {
        this._w = value;
        this._onChangeCallback();
      }
      set(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onChangeCallback();
        return this;
      }
      clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
      }
      copy(quaternion) {
        this._x = quaternion.x;
        this._y = quaternion.y;
        this._z = quaternion.z;
        this._w = quaternion.w;
        this._onChangeCallback();
        return this;
      }
      setFromEuler(euler, update = true) {
        const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
        const cos = Math.cos;
        const sin = Math.sin;
        const c1 = cos(x / 2);
        const c2 = cos(y / 2);
        const c3 = cos(z / 2);
        const s1 = sin(x / 2);
        const s2 = sin(y / 2);
        const s3 = sin(z / 2);
        switch (order) {
          case "XYZ":
            this._x = s1 * c2 * c3 + c1 * s2 * s3;
            this._y = c1 * s2 * c3 - s1 * c2 * s3;
            this._z = c1 * c2 * s3 + s1 * s2 * c3;
            this._w = c1 * c2 * c3 - s1 * s2 * s3;
            break;
          case "YXZ":
            this._x = s1 * c2 * c3 + c1 * s2 * s3;
            this._y = c1 * s2 * c3 - s1 * c2 * s3;
            this._z = c1 * c2 * s3 - s1 * s2 * c3;
            this._w = c1 * c2 * c3 + s1 * s2 * s3;
            break;
          case "ZXY":
            this._x = s1 * c2 * c3 - c1 * s2 * s3;
            this._y = c1 * s2 * c3 + s1 * c2 * s3;
            this._z = c1 * c2 * s3 + s1 * s2 * c3;
            this._w = c1 * c2 * c3 - s1 * s2 * s3;
            break;
          case "ZYX":
            this._x = s1 * c2 * c3 - c1 * s2 * s3;
            this._y = c1 * s2 * c3 + s1 * c2 * s3;
            this._z = c1 * c2 * s3 - s1 * s2 * c3;
            this._w = c1 * c2 * c3 + s1 * s2 * s3;
            break;
          case "YZX":
            this._x = s1 * c2 * c3 + c1 * s2 * s3;
            this._y = c1 * s2 * c3 + s1 * c2 * s3;
            this._z = c1 * c2 * s3 - s1 * s2 * c3;
            this._w = c1 * c2 * c3 - s1 * s2 * s3;
            break;
          case "XZY":
            this._x = s1 * c2 * c3 - c1 * s2 * s3;
            this._y = c1 * s2 * c3 - s1 * c2 * s3;
            this._z = c1 * c2 * s3 + s1 * s2 * c3;
            this._w = c1 * c2 * c3 + s1 * s2 * s3;
            break;
          default:
            console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
        }
        if (update === true) this._onChangeCallback();
        return this;
      }
      setFromAxisAngle(axis, angle2) {
        const halfAngle = angle2 / 2, s = Math.sin(halfAngle);
        this._x = axis.x * s;
        this._y = axis.y * s;
        this._z = axis.z * s;
        this._w = Math.cos(halfAngle);
        this._onChangeCallback();
        return this;
      }
      setFromRotationMatrix(m) {
        const te2 = m.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10], trace = m11 + m22 + m33;
        if (trace > 0) {
          const s = 0.5 / Math.sqrt(trace + 1);
          this._w = 0.25 / s;
          this._x = (m32 - m23) * s;
          this._y = (m13 - m31) * s;
          this._z = (m21 - m12) * s;
        } else if (m11 > m22 && m11 > m33) {
          const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
          this._w = (m32 - m23) / s;
          this._x = 0.25 * s;
          this._y = (m12 + m21) / s;
          this._z = (m13 + m31) / s;
        } else if (m22 > m33) {
          const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
          this._w = (m13 - m31) / s;
          this._x = (m12 + m21) / s;
          this._y = 0.25 * s;
          this._z = (m23 + m32) / s;
        } else {
          const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
          this._w = (m21 - m12) / s;
          this._x = (m13 + m31) / s;
          this._y = (m23 + m32) / s;
          this._z = 0.25 * s;
        }
        this._onChangeCallback();
        return this;
      }
      setFromUnitVectors(vFrom, vTo) {
        let r = vFrom.dot(vTo) + 1;
        if (r < Number.EPSILON) {
          r = 0;
          if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
            this._x = -vFrom.y;
            this._y = vFrom.x;
            this._z = 0;
            this._w = r;
          } else {
            this._x = 0;
            this._y = -vFrom.z;
            this._z = vFrom.y;
            this._w = r;
          }
        } else {
          this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
          this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
          this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
          this._w = r;
        }
        return this.normalize();
      }
      angleTo(q) {
        return 2 * Math.acos(Math.abs(clamp2(this.dot(q), -1, 1)));
      }
      rotateTowards(q, step) {
        const angle2 = this.angleTo(q);
        if (angle2 === 0) return this;
        const t = Math.min(1, step / angle2);
        this.slerp(q, t);
        return this;
      }
      identity() {
        return this.set(0, 0, 0, 1);
      }
      invert() {
        return this.conjugate();
      }
      conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onChangeCallback();
        return this;
      }
      dot(v2) {
        return this._x * v2._x + this._y * v2._y + this._z * v2._z + this._w * v2._w;
      }
      lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
      }
      length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
      }
      normalize() {
        let l = this.length();
        if (l === 0) {
          this._x = 0;
          this._y = 0;
          this._z = 0;
          this._w = 1;
        } else {
          l = 1 / l;
          this._x = this._x * l;
          this._y = this._y * l;
          this._z = this._z * l;
          this._w = this._w * l;
        }
        this._onChangeCallback();
        return this;
      }
      multiply(q) {
        return this.multiplyQuaternions(this, q);
      }
      premultiply(q) {
        return this.multiplyQuaternions(q, this);
      }
      multiplyQuaternions(a, b) {
        const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
        const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        this._onChangeCallback();
        return this;
      }
      slerp(qb, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(qb);
        const x = this._x, y = this._y, z = this._z, w = this._w;
        let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
        if (cosHalfTheta < 0) {
          this._w = -qb._w;
          this._x = -qb._x;
          this._y = -qb._y;
          this._z = -qb._z;
          cosHalfTheta = -cosHalfTheta;
        } else {
          this.copy(qb);
        }
        if (cosHalfTheta >= 1) {
          this._w = w;
          this._x = x;
          this._y = y;
          this._z = z;
          return this;
        }
        const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
        if (sqrSinHalfTheta <= Number.EPSILON) {
          const s = 1 - t;
          this._w = s * w + t * this._w;
          this._x = s * x + t * this._x;
          this._y = s * y + t * this._y;
          this._z = s * z + t * this._z;
          this.normalize();
          return this;
        }
        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
        this._w = w * ratioA + this._w * ratioB;
        this._x = x * ratioA + this._x * ratioB;
        this._y = y * ratioA + this._y * ratioB;
        this._z = z * ratioA + this._z * ratioB;
        this._onChangeCallback();
        return this;
      }
      slerpQuaternions(qa, qb, t) {
        return this.copy(qa).slerp(qb, t);
      }
      random() {
        const theta1 = 2 * Math.PI * Math.random();
        const theta2 = 2 * Math.PI * Math.random();
        const x0 = Math.random();
        const r1 = Math.sqrt(1 - x0);
        const r2 = Math.sqrt(x0);
        return this.set(
          r1 * Math.sin(theta1),
          r1 * Math.cos(theta1),
          r2 * Math.sin(theta2),
          r2 * Math.cos(theta2)
        );
      }
      equals(quaternion) {
        return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
      }
      fromArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onChangeCallback();
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._w;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this._x = attribute.getX(index);
        this._y = attribute.getY(index);
        this._z = attribute.getZ(index);
        this._w = attribute.getW(index);
        this._onChangeCallback();
        return this;
      }
      toJSON() {
        return this.toArray();
      }
      _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
      }
      _onChangeCallback() {
      }
      *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._w;
      }
    };
    Vector3 = class _Vector3 {
      constructor(x = 0, y = 0, z = 0) {
        _Vector3.prototype.isVector3 = true;
        this.x = x;
        this.y = y;
        this.z = z;
      }
      set(x, y, z) {
        if (z === void 0) z = this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      }
      setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        return this;
      }
      setX(x) {
        this.x = x;
        return this;
      }
      setY(y) {
        this.y = y;
        return this;
      }
      setZ(z) {
        this.z = z;
        return this;
      }
      setComponent(index, value) {
        switch (index) {
          case 0:
            this.x = value;
            break;
          case 1:
            this.y = value;
            break;
          case 2:
            this.z = value;
            break;
          default:
            throw new Error("index is out of range: " + index);
        }
        return this;
      }
      getComponent(index) {
        switch (index) {
          case 0:
            return this.x;
          case 1:
            return this.y;
          case 2:
            return this.z;
          default:
            throw new Error("index is out of range: " + index);
        }
      }
      clone() {
        return new this.constructor(this.x, this.y, this.z);
      }
      copy(v2) {
        this.x = v2.x;
        this.y = v2.y;
        this.z = v2.z;
        return this;
      }
      add(v2) {
        this.x += v2.x;
        this.y += v2.y;
        this.z += v2.z;
        return this;
      }
      addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        return this;
      }
      addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this;
      }
      addScaledVector(v2, s) {
        this.x += v2.x * s;
        this.y += v2.y * s;
        this.z += v2.z * s;
        return this;
      }
      sub(v2) {
        this.x -= v2.x;
        this.y -= v2.y;
        this.z -= v2.z;
        return this;
      }
      subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        return this;
      }
      subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this;
      }
      multiply(v2) {
        this.x *= v2.x;
        this.y *= v2.y;
        this.z *= v2.z;
        return this;
      }
      multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
      }
      multiplyVectors(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this;
      }
      applyEuler(euler) {
        return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
      }
      applyAxisAngle(axis, angle2) {
        return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle2));
      }
      applyMatrix3(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6] * z;
        this.y = e[1] * x + e[4] * y + e[7] * z;
        this.z = e[2] * x + e[5] * y + e[8] * z;
        return this;
      }
      applyNormalMatrix(m) {
        return this.applyMatrix3(m).normalize();
      }
      applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
        return this;
      }
      applyQuaternion(q) {
        const vx = this.x, vy = this.y, vz = this.z;
        const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
        const tx = 2 * (qy * vz - qz * vy);
        const ty = 2 * (qz * vx - qx * vz);
        const tz = 2 * (qx * vy - qy * vx);
        this.x = vx + qw * tx + qy * tz - qz * ty;
        this.y = vy + qw * ty + qz * tx - qx * tz;
        this.z = vz + qw * tz + qx * ty - qy * tx;
        return this;
      }
      project(camera) {
        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
      }
      unproject(camera) {
        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
      }
      transformDirection(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z;
        this.y = e[1] * x + e[5] * y + e[9] * z;
        this.z = e[2] * x + e[6] * y + e[10] * z;
        return this.normalize();
      }
      divide(v2) {
        this.x /= v2.x;
        this.y /= v2.y;
        this.z /= v2.z;
        return this;
      }
      divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
      }
      min(v2) {
        this.x = Math.min(this.x, v2.x);
        this.y = Math.min(this.y, v2.y);
        this.z = Math.min(this.z, v2.z);
        return this;
      }
      max(v2) {
        this.x = Math.max(this.x, v2.x);
        this.y = Math.max(this.y, v2.y);
        this.z = Math.max(this.z, v2.z);
        return this;
      }
      clamp(min, max2) {
        this.x = Math.max(min.x, Math.min(max2.x, this.x));
        this.y = Math.max(min.y, Math.min(max2.y, this.y));
        this.z = Math.max(min.z, Math.min(max2.z, this.z));
        return this;
      }
      clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        return this;
      }
      clampLength(min, max2) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max2, length)));
      }
      floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
      }
      ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
      }
      round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
      }
      roundToZero() {
        this.x = Math.trunc(this.x);
        this.y = Math.trunc(this.y);
        this.z = Math.trunc(this.z);
        return this;
      }
      negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
      }
      dot(v2) {
        return this.x * v2.x + this.y * v2.y + this.z * v2.z;
      }
      // TODO lengthSquared?
      lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      }
      length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }
      manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
      }
      normalize() {
        return this.divideScalar(this.length() || 1);
      }
      setLength(length) {
        return this.normalize().multiplyScalar(length);
      }
      lerp(v2, alpha) {
        this.x += (v2.x - this.x) * alpha;
        this.y += (v2.y - this.y) * alpha;
        this.z += (v2.z - this.z) * alpha;
        return this;
      }
      lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        return this;
      }
      cross(v2) {
        return this.crossVectors(this, v2);
      }
      crossVectors(a, b) {
        const ax = a.x, ay = a.y, az = a.z;
        const bx = b.x, by = b.y, bz = b.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
      }
      projectOnVector(v2) {
        const denominator = v2.lengthSq();
        if (denominator === 0) return this.set(0, 0, 0);
        const scalar = v2.dot(this) / denominator;
        return this.copy(v2).multiplyScalar(scalar);
      }
      projectOnPlane(planeNormal) {
        _vector$c.copy(this).projectOnVector(planeNormal);
        return this.sub(_vector$c);
      }
      reflect(normal) {
        return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
      }
      angleTo(v2) {
        const denominator = Math.sqrt(this.lengthSq() * v2.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v2) / denominator;
        return Math.acos(clamp2(theta, -1, 1));
      }
      distanceTo(v2) {
        return Math.sqrt(this.distanceToSquared(v2));
      }
      distanceToSquared(v2) {
        const dx = this.x - v2.x, dy = this.y - v2.y, dz = this.z - v2.z;
        return dx * dx + dy * dy + dz * dz;
      }
      manhattanDistanceTo(v2) {
        return Math.abs(this.x - v2.x) + Math.abs(this.y - v2.y) + Math.abs(this.z - v2.z);
      }
      setFromSpherical(s) {
        return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
      }
      setFromSphericalCoords(radius, phi, theta) {
        const sinPhiRadius = Math.sin(phi) * radius;
        this.x = sinPhiRadius * Math.sin(theta);
        this.y = Math.cos(phi) * radius;
        this.z = sinPhiRadius * Math.cos(theta);
        return this;
      }
      setFromCylindrical(c) {
        return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
      }
      setFromCylindricalCoords(radius, theta, y) {
        this.x = radius * Math.sin(theta);
        this.y = y;
        this.z = radius * Math.cos(theta);
        return this;
      }
      setFromMatrixPosition(m) {
        const e = m.elements;
        this.x = e[12];
        this.y = e[13];
        this.z = e[14];
        return this;
      }
      setFromMatrixScale(m) {
        const sx = this.setFromMatrixColumn(m, 0).length();
        const sy = this.setFromMatrixColumn(m, 1).length();
        const sz = this.setFromMatrixColumn(m, 2).length();
        this.x = sx;
        this.y = sy;
        this.z = sz;
        return this;
      }
      setFromMatrixColumn(m, index) {
        return this.fromArray(m.elements, index * 4);
      }
      setFromMatrix3Column(m, index) {
        return this.fromArray(m.elements, index * 3);
      }
      setFromEuler(e) {
        this.x = e._x;
        this.y = e._y;
        this.z = e._z;
        return this;
      }
      setFromColor(c) {
        this.x = c.r;
        this.y = c.g;
        this.z = c.b;
        return this;
      }
      equals(v2) {
        return v2.x === this.x && v2.y === this.y && v2.z === this.z;
      }
      fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        return this;
      }
      random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        return this;
      }
      randomDirection() {
        const theta = Math.random() * Math.PI * 2;
        const u = Math.random() * 2 - 1;
        const c = Math.sqrt(1 - u * u);
        this.x = c * Math.cos(theta);
        this.y = u;
        this.z = c * Math.sin(theta);
        return this;
      }
      *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
      }
    };
    _vector$c = new Vector3();
    _quaternion$4 = new Quaternion();
    Box3 = class {
      constructor(min = new Vector3(Infinity, Infinity, Infinity), max2 = new Vector3(-Infinity, -Infinity, -Infinity)) {
        this.isBox3 = true;
        this.min = min;
        this.max = max2;
      }
      set(min, max2) {
        this.min.copy(min);
        this.max.copy(max2);
        return this;
      }
      setFromArray(array) {
        this.makeEmpty();
        for (let i = 0, il = array.length; i < il; i += 3) {
          this.expandByPoint(_vector$b.fromArray(array, i));
        }
        return this;
      }
      setFromBufferAttribute(attribute) {
        this.makeEmpty();
        for (let i = 0, il = attribute.count; i < il; i++) {
          this.expandByPoint(_vector$b.fromBufferAttribute(attribute, i));
        }
        return this;
      }
      setFromPoints(points) {
        this.makeEmpty();
        for (let i = 0, il = points.length; i < il; i++) {
          this.expandByPoint(points[i]);
        }
        return this;
      }
      setFromCenterAndSize(center, size) {
        const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
      }
      setFromObject(object, precise = false) {
        this.makeEmpty();
        return this.expandByObject(object, precise);
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
      }
      makeEmpty() {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
      }
      isEmpty() {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
      }
      getCenter(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
      }
      getSize(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
      }
      expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
      }
      expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
      }
      expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
      }
      expandByObject(object, precise = false) {
        object.updateWorldMatrix(false, false);
        const geometry = object.geometry;
        if (geometry !== void 0) {
          const positionAttribute = geometry.getAttribute("position");
          if (precise === true && positionAttribute !== void 0 && object.isInstancedMesh !== true) {
            for (let i = 0, l = positionAttribute.count; i < l; i++) {
              if (object.isMesh === true) {
                object.getVertexPosition(i, _vector$b);
              } else {
                _vector$b.fromBufferAttribute(positionAttribute, i);
              }
              _vector$b.applyMatrix4(object.matrixWorld);
              this.expandByPoint(_vector$b);
            }
          } else {
            if (object.boundingBox !== void 0) {
              if (object.boundingBox === null) {
                object.computeBoundingBox();
              }
              _box$4.copy(object.boundingBox);
            } else {
              if (geometry.boundingBox === null) {
                geometry.computeBoundingBox();
              }
              _box$4.copy(geometry.boundingBox);
            }
            _box$4.applyMatrix4(object.matrixWorld);
            this.union(_box$4);
          }
        }
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          this.expandByObject(children[i], precise);
        }
        return this;
      }
      containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
      }
      containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
      }
      getParameter(point, target) {
        return target.set(
          (point.x - this.min.x) / (this.max.x - this.min.x),
          (point.y - this.min.y) / (this.max.y - this.min.y),
          (point.z - this.min.z) / (this.max.z - this.min.z)
        );
      }
      intersectsBox(box) {
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
      }
      intersectsSphere(sphere) {
        this.clampPoint(sphere.center, _vector$b);
        return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
      }
      intersectsPlane(plane) {
        let min, max2;
        if (plane.normal.x > 0) {
          min = plane.normal.x * this.min.x;
          max2 = plane.normal.x * this.max.x;
        } else {
          min = plane.normal.x * this.max.x;
          max2 = plane.normal.x * this.min.x;
        }
        if (plane.normal.y > 0) {
          min += plane.normal.y * this.min.y;
          max2 += plane.normal.y * this.max.y;
        } else {
          min += plane.normal.y * this.max.y;
          max2 += plane.normal.y * this.min.y;
        }
        if (plane.normal.z > 0) {
          min += plane.normal.z * this.min.z;
          max2 += plane.normal.z * this.max.z;
        } else {
          min += plane.normal.z * this.max.z;
          max2 += plane.normal.z * this.min.z;
        }
        return min <= -plane.constant && max2 >= -plane.constant;
      }
      intersectsTriangle(triangle) {
        if (this.isEmpty()) {
          return false;
        }
        this.getCenter(_center);
        _extents.subVectors(this.max, _center);
        _v0$2.subVectors(triangle.a, _center);
        _v1$7.subVectors(triangle.b, _center);
        _v2$4.subVectors(triangle.c, _center);
        _f0.subVectors(_v1$7, _v0$2);
        _f1.subVectors(_v2$4, _v1$7);
        _f2.subVectors(_v0$2, _v2$4);
        let axes = [
          0,
          -_f0.z,
          _f0.y,
          0,
          -_f1.z,
          _f1.y,
          0,
          -_f2.z,
          _f2.y,
          _f0.z,
          0,
          -_f0.x,
          _f1.z,
          0,
          -_f1.x,
          _f2.z,
          0,
          -_f2.x,
          -_f0.y,
          _f0.x,
          0,
          -_f1.y,
          _f1.x,
          0,
          -_f2.y,
          _f2.x,
          0
        ];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
          return false;
        }
        axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
        if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
          return false;
        }
        _triangleNormal.crossVectors(_f0, _f1);
        axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
        return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
      }
      clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
      }
      distanceToPoint(point) {
        return this.clampPoint(point, _vector$b).distanceTo(point);
      }
      getBoundingSphere(target) {
        if (this.isEmpty()) {
          target.makeEmpty();
        } else {
          this.getCenter(target.center);
          target.radius = this.getSize(_vector$b).length() * 0.5;
        }
        return target;
      }
      intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        if (this.isEmpty()) this.makeEmpty();
        return this;
      }
      union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
      }
      applyMatrix4(matrix) {
        if (this.isEmpty()) return this;
        _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
        _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
        _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
        _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
        _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
        _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
        _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
        _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
        this.setFromPoints(_points);
        return this;
      }
      translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
      }
      equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
      }
    };
    _points = [
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3(),
      new Vector3()
    ];
    _vector$b = new Vector3();
    _box$4 = new Box3();
    _v0$2 = new Vector3();
    _v1$7 = new Vector3();
    _v2$4 = new Vector3();
    _f0 = new Vector3();
    _f1 = new Vector3();
    _f2 = new Vector3();
    _center = new Vector3();
    _extents = new Vector3();
    _triangleNormal = new Vector3();
    _testAxis = new Vector3();
    _box$3 = new Box3();
    _v1$6 = new Vector3();
    _v2$3 = new Vector3();
    Sphere = class {
      constructor(center = new Vector3(), radius = -1) {
        this.isSphere = true;
        this.center = center;
        this.radius = radius;
      }
      set(center, radius) {
        this.center.copy(center);
        this.radius = radius;
        return this;
      }
      setFromPoints(points, optionalCenter) {
        const center = this.center;
        if (optionalCenter !== void 0) {
          center.copy(optionalCenter);
        } else {
          _box$3.setFromPoints(points).getCenter(center);
        }
        let maxRadiusSq = 0;
        for (let i = 0, il = points.length; i < il; i++) {
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
        }
        this.radius = Math.sqrt(maxRadiusSq);
        return this;
      }
      copy(sphere) {
        this.center.copy(sphere.center);
        this.radius = sphere.radius;
        return this;
      }
      isEmpty() {
        return this.radius < 0;
      }
      makeEmpty() {
        this.center.set(0, 0, 0);
        this.radius = -1;
        return this;
      }
      containsPoint(point) {
        return point.distanceToSquared(this.center) <= this.radius * this.radius;
      }
      distanceToPoint(point) {
        return point.distanceTo(this.center) - this.radius;
      }
      intersectsSphere(sphere) {
        const radiusSum = this.radius + sphere.radius;
        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
      }
      intersectsBox(box) {
        return box.intersectsSphere(this);
      }
      intersectsPlane(plane) {
        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
      }
      clampPoint(point, target) {
        const deltaLengthSq = this.center.distanceToSquared(point);
        target.copy(point);
        if (deltaLengthSq > this.radius * this.radius) {
          target.sub(this.center).normalize();
          target.multiplyScalar(this.radius).add(this.center);
        }
        return target;
      }
      getBoundingBox(target) {
        if (this.isEmpty()) {
          target.makeEmpty();
          return target;
        }
        target.set(this.center, this.center);
        target.expandByScalar(this.radius);
        return target;
      }
      applyMatrix4(matrix) {
        this.center.applyMatrix4(matrix);
        this.radius = this.radius * matrix.getMaxScaleOnAxis();
        return this;
      }
      translate(offset) {
        this.center.add(offset);
        return this;
      }
      expandByPoint(point) {
        if (this.isEmpty()) {
          this.center.copy(point);
          this.radius = 0;
          return this;
        }
        _v1$6.subVectors(point, this.center);
        const lengthSq = _v1$6.lengthSq();
        if (lengthSq > this.radius * this.radius) {
          const length = Math.sqrt(lengthSq);
          const delta = (length - this.radius) * 0.5;
          this.center.addScaledVector(_v1$6, delta / length);
          this.radius += delta;
        }
        return this;
      }
      union(sphere) {
        if (sphere.isEmpty()) {
          return this;
        }
        if (this.isEmpty()) {
          this.copy(sphere);
          return this;
        }
        if (this.center.equals(sphere.center) === true) {
          this.radius = Math.max(this.radius, sphere.radius);
        } else {
          _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
          this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
          this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
        }
        return this;
      }
      equals(sphere) {
        return sphere.center.equals(this.center) && sphere.radius === this.radius;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    _vector$a = new Vector3();
    _segCenter = new Vector3();
    _segDir = new Vector3();
    _diff = new Vector3();
    _edge1 = new Vector3();
    _edge2 = new Vector3();
    _normal$1 = new Vector3();
    Ray = class {
      constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
        this.origin = origin;
        this.direction = direction;
      }
      set(origin, direction) {
        this.origin.copy(origin);
        this.direction.copy(direction);
        return this;
      }
      copy(ray) {
        this.origin.copy(ray.origin);
        this.direction.copy(ray.direction);
        return this;
      }
      at(t, target) {
        return target.copy(this.origin).addScaledVector(this.direction, t);
      }
      lookAt(v2) {
        this.direction.copy(v2).sub(this.origin).normalize();
        return this;
      }
      recast(t) {
        this.origin.copy(this.at(t, _vector$a));
        return this;
      }
      closestPointToPoint(point, target) {
        target.subVectors(point, this.origin);
        const directionDistance = target.dot(this.direction);
        if (directionDistance < 0) {
          return target.copy(this.origin);
        }
        return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
      }
      distanceToPoint(point) {
        return Math.sqrt(this.distanceSqToPoint(point));
      }
      distanceSqToPoint(point) {
        const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction);
        if (directionDistance < 0) {
          return this.origin.distanceToSquared(point);
        }
        _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
        return _vector$a.distanceToSquared(point);
      }
      distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
        _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
        _segDir.copy(v1).sub(v0).normalize();
        _diff.copy(this.origin).sub(_segCenter);
        const segExtent = v0.distanceTo(v1) * 0.5;
        const a01 = -this.direction.dot(_segDir);
        const b0 = _diff.dot(this.direction);
        const b1 = -_diff.dot(_segDir);
        const c = _diff.lengthSq();
        const det = Math.abs(1 - a01 * a01);
        let s0, s1, sqrDist, extDet;
        if (det > 0) {
          s0 = a01 * b1 - b0;
          s1 = a01 * b0 - b1;
          extDet = segExtent * det;
          if (s0 >= 0) {
            if (s1 >= -extDet) {
              if (s1 <= extDet) {
                const invDet = 1 / det;
                s0 *= invDet;
                s1 *= invDet;
                sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
              } else {
                s1 = segExtent;
                s0 = Math.max(0, -(a01 * s1 + b0));
                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
              }
            } else {
              s1 = -segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            if (s1 <= -extDet) {
              s0 = Math.max(0, -(-a01 * segExtent + b0));
              s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            } else if (s1 <= extDet) {
              s0 = 0;
              s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
              sqrDist = s1 * (s1 + 2 * b1) + c;
            } else {
              s0 = Math.max(0, -(a01 * segExtent + b0));
              s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          }
        } else {
          s1 = a01 > 0 ? -segExtent : segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
        if (optionalPointOnRay) {
          optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
        }
        if (optionalPointOnSegment) {
          optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
        }
        return sqrDist;
      }
      intersectSphere(sphere, target) {
        _vector$a.subVectors(sphere.center, this.origin);
        const tca = _vector$a.dot(this.direction);
        const d2 = _vector$a.dot(_vector$a) - tca * tca;
        const radius2 = sphere.radius * sphere.radius;
        if (d2 > radius2) return null;
        const thc = Math.sqrt(radius2 - d2);
        const t0 = tca - thc;
        const t1 = tca + thc;
        if (t1 < 0) return null;
        if (t0 < 0) return this.at(t1, target);
        return this.at(t0, target);
      }
      intersectsSphere(sphere) {
        return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
      }
      distanceToPlane(plane) {
        const denominator = plane.normal.dot(this.direction);
        if (denominator === 0) {
          if (plane.distanceToPoint(this.origin) === 0) {
            return 0;
          }
          return null;
        }
        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
        return t >= 0 ? t : null;
      }
      intersectPlane(plane, target) {
        const t = this.distanceToPlane(plane);
        if (t === null) {
          return null;
        }
        return this.at(t, target);
      }
      intersectsPlane(plane) {
        const distToPoint = plane.distanceToPoint(this.origin);
        if (distToPoint === 0) {
          return true;
        }
        const denominator = plane.normal.dot(this.direction);
        if (denominator * distToPoint < 0) {
          return true;
        }
        return false;
      }
      intersectBox(box, target) {
        let tmin, tmax, tymin, tymax, tzmin, tzmax;
        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
        const origin = this.origin;
        if (invdirx >= 0) {
          tmin = (box.min.x - origin.x) * invdirx;
          tmax = (box.max.x - origin.x) * invdirx;
        } else {
          tmin = (box.max.x - origin.x) * invdirx;
          tmax = (box.min.x - origin.x) * invdirx;
        }
        if (invdiry >= 0) {
          tymin = (box.min.y - origin.y) * invdiry;
          tymax = (box.max.y - origin.y) * invdiry;
        } else {
          tymin = (box.max.y - origin.y) * invdiry;
          tymax = (box.min.y - origin.y) * invdiry;
        }
        if (tmin > tymax || tymin > tmax) return null;
        if (tymin > tmin || isNaN(tmin)) tmin = tymin;
        if (tymax < tmax || isNaN(tmax)) tmax = tymax;
        if (invdirz >= 0) {
          tzmin = (box.min.z - origin.z) * invdirz;
          tzmax = (box.max.z - origin.z) * invdirz;
        } else {
          tzmin = (box.max.z - origin.z) * invdirz;
          tzmax = (box.min.z - origin.z) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax) return null;
        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
        if (tmax < 0) return null;
        return this.at(tmin >= 0 ? tmin : tmax, target);
      }
      intersectsBox(box) {
        return this.intersectBox(box, _vector$a) !== null;
      }
      intersectTriangle(a, b, c, backfaceCulling, target) {
        _edge1.subVectors(b, a);
        _edge2.subVectors(c, a);
        _normal$1.crossVectors(_edge1, _edge2);
        let DdN = this.direction.dot(_normal$1);
        let sign2;
        if (DdN > 0) {
          if (backfaceCulling) return null;
          sign2 = 1;
        } else if (DdN < 0) {
          sign2 = -1;
          DdN = -DdN;
        } else {
          return null;
        }
        _diff.subVectors(this.origin, a);
        const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
        if (DdQxE2 < 0) {
          return null;
        }
        const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
        if (DdE1xQ < 0) {
          return null;
        }
        if (DdQxE2 + DdE1xQ > DdN) {
          return null;
        }
        const QdN = -sign2 * _diff.dot(_normal$1);
        if (QdN < 0) {
          return null;
        }
        return this.at(QdN / DdN, target);
      }
      applyMatrix4(matrix4) {
        this.origin.applyMatrix4(matrix4);
        this.direction.transformDirection(matrix4);
        return this;
      }
      equals(ray) {
        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    Matrix4 = class _Matrix4 {
      constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
        _Matrix4.prototype.isMatrix4 = true;
        this.elements = [
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        ];
        if (n11 !== void 0) {
          this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
        }
      }
      set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
        const te2 = this.elements;
        te2[0] = n11;
        te2[4] = n12;
        te2[8] = n13;
        te2[12] = n14;
        te2[1] = n21;
        te2[5] = n22;
        te2[9] = n23;
        te2[13] = n24;
        te2[2] = n31;
        te2[6] = n32;
        te2[10] = n33;
        te2[14] = n34;
        te2[3] = n41;
        te2[7] = n42;
        te2[11] = n43;
        te2[15] = n44;
        return this;
      }
      identity() {
        this.set(
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      clone() {
        return new _Matrix4().fromArray(this.elements);
      }
      copy(m) {
        const te2 = this.elements;
        const me = m.elements;
        te2[0] = me[0];
        te2[1] = me[1];
        te2[2] = me[2];
        te2[3] = me[3];
        te2[4] = me[4];
        te2[5] = me[5];
        te2[6] = me[6];
        te2[7] = me[7];
        te2[8] = me[8];
        te2[9] = me[9];
        te2[10] = me[10];
        te2[11] = me[11];
        te2[12] = me[12];
        te2[13] = me[13];
        te2[14] = me[14];
        te2[15] = me[15];
        return this;
      }
      copyPosition(m) {
        const te2 = this.elements, me = m.elements;
        te2[12] = me[12];
        te2[13] = me[13];
        te2[14] = me[14];
        return this;
      }
      setFromMatrix3(m) {
        const me = m.elements;
        this.set(
          me[0],
          me[3],
          me[6],
          0,
          me[1],
          me[4],
          me[7],
          0,
          me[2],
          me[5],
          me[8],
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrixColumn(this, 0);
        yAxis.setFromMatrixColumn(this, 1);
        zAxis.setFromMatrixColumn(this, 2);
        return this;
      }
      makeBasis(xAxis, yAxis, zAxis) {
        this.set(
          xAxis.x,
          yAxis.x,
          zAxis.x,
          0,
          xAxis.y,
          yAxis.y,
          zAxis.y,
          0,
          xAxis.z,
          yAxis.z,
          zAxis.z,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      extractRotation(m) {
        const te2 = this.elements;
        const me = m.elements;
        const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
        const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
        const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
        te2[0] = me[0] * scaleX;
        te2[1] = me[1] * scaleX;
        te2[2] = me[2] * scaleX;
        te2[3] = 0;
        te2[4] = me[4] * scaleY;
        te2[5] = me[5] * scaleY;
        te2[6] = me[6] * scaleY;
        te2[7] = 0;
        te2[8] = me[8] * scaleZ;
        te2[9] = me[9] * scaleZ;
        te2[10] = me[10] * scaleZ;
        te2[11] = 0;
        te2[12] = 0;
        te2[13] = 0;
        te2[14] = 0;
        te2[15] = 1;
        return this;
      }
      makeRotationFromEuler(euler) {
        const te2 = this.elements;
        const x = euler.x, y = euler.y, z = euler.z;
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d2 = Math.sin(y);
        const e = Math.cos(z), f2 = Math.sin(z);
        if (euler.order === "XYZ") {
          const ae = a * e, af = a * f2, be = b * e, bf = b * f2;
          te2[0] = c * e;
          te2[4] = -c * f2;
          te2[8] = d2;
          te2[1] = af + be * d2;
          te2[5] = ae - bf * d2;
          te2[9] = -b * c;
          te2[2] = bf - ae * d2;
          te2[6] = be + af * d2;
          te2[10] = a * c;
        } else if (euler.order === "YXZ") {
          const ce = c * e, cf = c * f2, de = d2 * e, df = d2 * f2;
          te2[0] = ce + df * b;
          te2[4] = de * b - cf;
          te2[8] = a * d2;
          te2[1] = a * f2;
          te2[5] = a * e;
          te2[9] = -b;
          te2[2] = cf * b - de;
          te2[6] = df + ce * b;
          te2[10] = a * c;
        } else if (euler.order === "ZXY") {
          const ce = c * e, cf = c * f2, de = d2 * e, df = d2 * f2;
          te2[0] = ce - df * b;
          te2[4] = -a * f2;
          te2[8] = de + cf * b;
          te2[1] = cf + de * b;
          te2[5] = a * e;
          te2[9] = df - ce * b;
          te2[2] = -a * d2;
          te2[6] = b;
          te2[10] = a * c;
        } else if (euler.order === "ZYX") {
          const ae = a * e, af = a * f2, be = b * e, bf = b * f2;
          te2[0] = c * e;
          te2[4] = be * d2 - af;
          te2[8] = ae * d2 + bf;
          te2[1] = c * f2;
          te2[5] = bf * d2 + ae;
          te2[9] = af * d2 - be;
          te2[2] = -d2;
          te2[6] = b * c;
          te2[10] = a * c;
        } else if (euler.order === "YZX") {
          const ac = a * c, ad = a * d2, bc = b * c, bd = b * d2;
          te2[0] = c * e;
          te2[4] = bd - ac * f2;
          te2[8] = bc * f2 + ad;
          te2[1] = f2;
          te2[5] = a * e;
          te2[9] = -b * e;
          te2[2] = -d2 * e;
          te2[6] = ad * f2 + bc;
          te2[10] = ac - bd * f2;
        } else if (euler.order === "XZY") {
          const ac = a * c, ad = a * d2, bc = b * c, bd = b * d2;
          te2[0] = c * e;
          te2[4] = -f2;
          te2[8] = d2 * e;
          te2[1] = ac * f2 + bd;
          te2[5] = a * e;
          te2[9] = ad * f2 - bc;
          te2[2] = bc * f2 - ad;
          te2[6] = b * e;
          te2[10] = bd * f2 + ac;
        }
        te2[3] = 0;
        te2[7] = 0;
        te2[11] = 0;
        te2[12] = 0;
        te2[13] = 0;
        te2[14] = 0;
        te2[15] = 1;
        return this;
      }
      makeRotationFromQuaternion(q) {
        return this.compose(_zero, q, _one);
      }
      lookAt(eye, target, up) {
        const te2 = this.elements;
        _z.subVectors(eye, target);
        if (_z.lengthSq() === 0) {
          _z.z = 1;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
        if (_x.lengthSq() === 0) {
          if (Math.abs(up.z) === 1) {
            _z.x += 1e-4;
          } else {
            _z.z += 1e-4;
          }
          _z.normalize();
          _x.crossVectors(up, _z);
        }
        _x.normalize();
        _y.crossVectors(_z, _x);
        te2[0] = _x.x;
        te2[4] = _y.x;
        te2[8] = _z.x;
        te2[1] = _x.y;
        te2[5] = _y.y;
        te2[9] = _z.y;
        te2[2] = _x.z;
        te2[6] = _y.z;
        te2[10] = _z.z;
        return this;
      }
      multiply(m) {
        return this.multiplyMatrices(this, m);
      }
      premultiply(m) {
        return this.multiplyMatrices(m, this);
      }
      multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te2 = this.elements;
        const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
        const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
        te2[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
        te2[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te2[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te2[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
        te2[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
        te2[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te2[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te2[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
        te2[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
        te2[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te2[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te2[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
        te2[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
        te2[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te2[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te2[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
        return this;
      }
      multiplyScalar(s) {
        const te2 = this.elements;
        te2[0] *= s;
        te2[4] *= s;
        te2[8] *= s;
        te2[12] *= s;
        te2[1] *= s;
        te2[5] *= s;
        te2[9] *= s;
        te2[13] *= s;
        te2[2] *= s;
        te2[6] *= s;
        te2[10] *= s;
        te2[14] *= s;
        te2[3] *= s;
        te2[7] *= s;
        te2[11] *= s;
        te2[15] *= s;
        return this;
      }
      determinant() {
        const te2 = this.elements;
        const n11 = te2[0], n12 = te2[4], n13 = te2[8], n14 = te2[12];
        const n21 = te2[1], n22 = te2[5], n23 = te2[9], n24 = te2[13];
        const n31 = te2[2], n32 = te2[6], n33 = te2[10], n34 = te2[14];
        const n41 = te2[3], n42 = te2[7], n43 = te2[11], n44 = te2[15];
        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
      }
      transpose() {
        const te2 = this.elements;
        let tmp2;
        tmp2 = te2[1];
        te2[1] = te2[4];
        te2[4] = tmp2;
        tmp2 = te2[2];
        te2[2] = te2[8];
        te2[8] = tmp2;
        tmp2 = te2[6];
        te2[6] = te2[9];
        te2[9] = tmp2;
        tmp2 = te2[3];
        te2[3] = te2[12];
        te2[12] = tmp2;
        tmp2 = te2[7];
        te2[7] = te2[13];
        te2[13] = tmp2;
        tmp2 = te2[11];
        te2[11] = te2[14];
        te2[14] = tmp2;
        return this;
      }
      setPosition(x, y, z) {
        const te2 = this.elements;
        if (x.isVector3) {
          te2[12] = x.x;
          te2[13] = x.y;
          te2[14] = x.z;
        } else {
          te2[12] = x;
          te2[13] = y;
          te2[14] = z;
        }
        return this;
      }
      invert() {
        const te2 = this.elements, n11 = te2[0], n21 = te2[1], n31 = te2[2], n41 = te2[3], n12 = te2[4], n22 = te2[5], n32 = te2[6], n42 = te2[7], n13 = te2[8], n23 = te2[9], n33 = te2[10], n43 = te2[11], n14 = te2[12], n24 = te2[13], n34 = te2[14], n44 = te2[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te2[0] = t11 * detInv;
        te2[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
        te2[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
        te2[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
        te2[4] = t12 * detInv;
        te2[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
        te2[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
        te2[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
        te2[8] = t13 * detInv;
        te2[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
        te2[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
        te2[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
        te2[12] = t14 * detInv;
        te2[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
        te2[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
        te2[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
        return this;
      }
      scale(v2) {
        const te2 = this.elements;
        const x = v2.x, y = v2.y, z = v2.z;
        te2[0] *= x;
        te2[4] *= y;
        te2[8] *= z;
        te2[1] *= x;
        te2[5] *= y;
        te2[9] *= z;
        te2[2] *= x;
        te2[6] *= y;
        te2[10] *= z;
        te2[3] *= x;
        te2[7] *= y;
        te2[11] *= z;
        return this;
      }
      getMaxScaleOnAxis() {
        const te2 = this.elements;
        const scaleXSq = te2[0] * te2[0] + te2[1] * te2[1] + te2[2] * te2[2];
        const scaleYSq = te2[4] * te2[4] + te2[5] * te2[5] + te2[6] * te2[6];
        const scaleZSq = te2[8] * te2[8] + te2[9] * te2[9] + te2[10] * te2[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
      }
      makeTranslation(x, y, z) {
        if (x.isVector3) {
          this.set(
            1,
            0,
            0,
            x.x,
            0,
            1,
            0,
            x.y,
            0,
            0,
            1,
            x.z,
            0,
            0,
            0,
            1
          );
        } else {
          this.set(
            1,
            0,
            0,
            x,
            0,
            1,
            0,
            y,
            0,
            0,
            1,
            z,
            0,
            0,
            0,
            1
          );
        }
        return this;
      }
      makeRotationX(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(
          1,
          0,
          0,
          0,
          0,
          c,
          -s,
          0,
          0,
          s,
          c,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationY(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(
          c,
          0,
          s,
          0,
          0,
          1,
          0,
          0,
          -s,
          0,
          c,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationZ(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(
          c,
          -s,
          0,
          0,
          s,
          c,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeRotationAxis(axis, angle2) {
        const c = Math.cos(angle2);
        const s = Math.sin(angle2);
        const t = 1 - c;
        const x = axis.x, y = axis.y, z = axis.z;
        const tx = t * x, ty = t * y;
        this.set(
          tx * x + c,
          tx * y - s * z,
          tx * z + s * y,
          0,
          tx * y + s * z,
          ty * y + c,
          ty * z - s * x,
          0,
          tx * z - s * y,
          ty * z + s * x,
          t * z * z + c,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeScale(x, y, z) {
        this.set(
          x,
          0,
          0,
          0,
          0,
          y,
          0,
          0,
          0,
          0,
          z,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      makeShear(xy, xz, yx, yz, zx, zy) {
        this.set(
          1,
          yx,
          zx,
          0,
          xy,
          1,
          zy,
          0,
          xz,
          yz,
          1,
          0,
          0,
          0,
          0,
          1
        );
        return this;
      }
      compose(position, quaternion, scale) {
        const te2 = this.elements;
        const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const sx = scale.x, sy = scale.y, sz = scale.z;
        te2[0] = (1 - (yy + zz)) * sx;
        te2[1] = (xy + wz) * sx;
        te2[2] = (xz - wy) * sx;
        te2[3] = 0;
        te2[4] = (xy - wz) * sy;
        te2[5] = (1 - (xx + zz)) * sy;
        te2[6] = (yz + wx) * sy;
        te2[7] = 0;
        te2[8] = (xz + wy) * sz;
        te2[9] = (yz - wx) * sz;
        te2[10] = (1 - (xx + yy)) * sz;
        te2[11] = 0;
        te2[12] = position.x;
        te2[13] = position.y;
        te2[14] = position.z;
        te2[15] = 1;
        return this;
      }
      decompose(position, quaternion, scale) {
        const te2 = this.elements;
        let sx = _v1$5.set(te2[0], te2[1], te2[2]).length();
        const sy = _v1$5.set(te2[4], te2[5], te2[6]).length();
        const sz = _v1$5.set(te2[8], te2[9], te2[10]).length();
        const det = this.determinant();
        if (det < 0) sx = -sx;
        position.x = te2[12];
        position.y = te2[13];
        position.z = te2[14];
        _m1$4.copy(this);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        _m1$4.elements[0] *= invSX;
        _m1$4.elements[1] *= invSX;
        _m1$4.elements[2] *= invSX;
        _m1$4.elements[4] *= invSY;
        _m1$4.elements[5] *= invSY;
        _m1$4.elements[6] *= invSY;
        _m1$4.elements[8] *= invSZ;
        _m1$4.elements[9] *= invSZ;
        _m1$4.elements[10] *= invSZ;
        quaternion.setFromRotationMatrix(_m1$4);
        scale.x = sx;
        scale.y = sy;
        scale.z = sz;
        return this;
      }
      makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
        const te2 = this.elements;
        const x = 2 * near / (right - left);
        const y = 2 * near / (top - bottom);
        const a = (right + left) / (right - left);
        const b = (top + bottom) / (top - bottom);
        let c, d2;
        if (coordinateSystem === WebGLCoordinateSystem) {
          c = -(far + near) / (far - near);
          d2 = -2 * far * near / (far - near);
        } else if (coordinateSystem === WebGPUCoordinateSystem) {
          c = -far / (far - near);
          d2 = -far * near / (far - near);
        } else {
          throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
        }
        te2[0] = x;
        te2[4] = 0;
        te2[8] = a;
        te2[12] = 0;
        te2[1] = 0;
        te2[5] = y;
        te2[9] = b;
        te2[13] = 0;
        te2[2] = 0;
        te2[6] = 0;
        te2[10] = c;
        te2[14] = d2;
        te2[3] = 0;
        te2[7] = 0;
        te2[11] = -1;
        te2[15] = 0;
        return this;
      }
      makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
        const te2 = this.elements;
        const w = 1 / (right - left);
        const h = 1 / (top - bottom);
        const p2 = 1 / (far - near);
        const x = (right + left) * w;
        const y = (top + bottom) * h;
        let z, zInv;
        if (coordinateSystem === WebGLCoordinateSystem) {
          z = (far + near) * p2;
          zInv = -2 * p2;
        } else if (coordinateSystem === WebGPUCoordinateSystem) {
          z = near * p2;
          zInv = -1 * p2;
        } else {
          throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
        }
        te2[0] = 2 * w;
        te2[4] = 0;
        te2[8] = 0;
        te2[12] = -x;
        te2[1] = 0;
        te2[5] = 2 * h;
        te2[9] = 0;
        te2[13] = -y;
        te2[2] = 0;
        te2[6] = 0;
        te2[10] = zInv;
        te2[14] = -z;
        te2[3] = 0;
        te2[7] = 0;
        te2[11] = 0;
        te2[15] = 1;
        return this;
      }
      equals(matrix) {
        const te2 = this.elements;
        const me = matrix.elements;
        for (let i = 0; i < 16; i++) {
          if (te2[i] !== me[i]) return false;
        }
        return true;
      }
      fromArray(array, offset = 0) {
        for (let i = 0; i < 16; i++) {
          this.elements[i] = array[i + offset];
        }
        return this;
      }
      toArray(array = [], offset = 0) {
        const te2 = this.elements;
        array[offset] = te2[0];
        array[offset + 1] = te2[1];
        array[offset + 2] = te2[2];
        array[offset + 3] = te2[3];
        array[offset + 4] = te2[4];
        array[offset + 5] = te2[5];
        array[offset + 6] = te2[6];
        array[offset + 7] = te2[7];
        array[offset + 8] = te2[8];
        array[offset + 9] = te2[9];
        array[offset + 10] = te2[10];
        array[offset + 11] = te2[11];
        array[offset + 12] = te2[12];
        array[offset + 13] = te2[13];
        array[offset + 14] = te2[14];
        array[offset + 15] = te2[15];
        return array;
      }
    };
    _v1$5 = new Vector3();
    _m1$4 = new Matrix4();
    _zero = new Vector3(0, 0, 0);
    _one = new Vector3(1, 1, 1);
    _x = new Vector3();
    _y = new Vector3();
    _z = new Vector3();
    _matrix$2 = new Matrix4();
    _quaternion$3 = new Quaternion();
    Euler = class _Euler {
      constructor(x = 0, y = 0, z = 0, order = _Euler.DEFAULT_ORDER) {
        this.isEuler = true;
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
      }
      get x() {
        return this._x;
      }
      set x(value) {
        this._x = value;
        this._onChangeCallback();
      }
      get y() {
        return this._y;
      }
      set y(value) {
        this._y = value;
        this._onChangeCallback();
      }
      get z() {
        return this._z;
      }
      set z(value) {
        this._z = value;
        this._onChangeCallback();
      }
      get order() {
        return this._order;
      }
      set order(value) {
        this._order = value;
        this._onChangeCallback();
      }
      set(x, y, z, order = this._order) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
        this._onChangeCallback();
        return this;
      }
      clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
      }
      copy(euler) {
        this._x = euler._x;
        this._y = euler._y;
        this._z = euler._z;
        this._order = euler._order;
        this._onChangeCallback();
        return this;
      }
      setFromRotationMatrix(m, order = this._order, update = true) {
        const te2 = m.elements;
        const m11 = te2[0], m12 = te2[4], m13 = te2[8];
        const m21 = te2[1], m22 = te2[5], m23 = te2[9];
        const m31 = te2[2], m32 = te2[6], m33 = te2[10];
        switch (order) {
          case "XYZ":
            this._y = Math.asin(clamp2(m13, -1, 1));
            if (Math.abs(m13) < 0.9999999) {
              this._x = Math.atan2(-m23, m33);
              this._z = Math.atan2(-m12, m11);
            } else {
              this._x = Math.atan2(m32, m22);
              this._z = 0;
            }
            break;
          case "YXZ":
            this._x = Math.asin(-clamp2(m23, -1, 1));
            if (Math.abs(m23) < 0.9999999) {
              this._y = Math.atan2(m13, m33);
              this._z = Math.atan2(m21, m22);
            } else {
              this._y = Math.atan2(-m31, m11);
              this._z = 0;
            }
            break;
          case "ZXY":
            this._x = Math.asin(clamp2(m32, -1, 1));
            if (Math.abs(m32) < 0.9999999) {
              this._y = Math.atan2(-m31, m33);
              this._z = Math.atan2(-m12, m22);
            } else {
              this._y = 0;
              this._z = Math.atan2(m21, m11);
            }
            break;
          case "ZYX":
            this._y = Math.asin(-clamp2(m31, -1, 1));
            if (Math.abs(m31) < 0.9999999) {
              this._x = Math.atan2(m32, m33);
              this._z = Math.atan2(m21, m11);
            } else {
              this._x = 0;
              this._z = Math.atan2(-m12, m22);
            }
            break;
          case "YZX":
            this._z = Math.asin(clamp2(m21, -1, 1));
            if (Math.abs(m21) < 0.9999999) {
              this._x = Math.atan2(-m23, m22);
              this._y = Math.atan2(-m31, m11);
            } else {
              this._x = 0;
              this._y = Math.atan2(m13, m33);
            }
            break;
          case "XZY":
            this._z = Math.asin(-clamp2(m12, -1, 1));
            if (Math.abs(m12) < 0.9999999) {
              this._x = Math.atan2(m32, m22);
              this._y = Math.atan2(m13, m11);
            } else {
              this._x = Math.atan2(-m23, m33);
              this._y = 0;
            }
            break;
          default:
            console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
        }
        this._order = order;
        if (update === true) this._onChangeCallback();
        return this;
      }
      setFromQuaternion(q, order, update) {
        _matrix$2.makeRotationFromQuaternion(q);
        return this.setFromRotationMatrix(_matrix$2, order, update);
      }
      setFromVector3(v2, order = this._order) {
        return this.set(v2.x, v2.y, v2.z, order);
      }
      reorder(newOrder) {
        _quaternion$3.setFromEuler(this);
        return this.setFromQuaternion(_quaternion$3, newOrder);
      }
      equals(euler) {
        return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
      }
      fromArray(array) {
        this._x = array[0];
        this._y = array[1];
        this._z = array[2];
        if (array[3] !== void 0) this._order = array[3];
        this._onChangeCallback();
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._order;
        return array;
      }
      _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
      }
      _onChangeCallback() {
      }
      *[Symbol.iterator]() {
        yield this._x;
        yield this._y;
        yield this._z;
        yield this._order;
      }
    };
    Euler.DEFAULT_ORDER = "XYZ";
    Layers = class {
      constructor() {
        this.mask = 1 | 0;
      }
      set(channel) {
        this.mask = (1 << channel | 0) >>> 0;
      }
      enable(channel) {
        this.mask |= 1 << channel | 0;
      }
      enableAll() {
        this.mask = 4294967295 | 0;
      }
      toggle(channel) {
        this.mask ^= 1 << channel | 0;
      }
      disable(channel) {
        this.mask &= ~(1 << channel | 0);
      }
      disableAll() {
        this.mask = 0;
      }
      test(layers) {
        return (this.mask & layers.mask) !== 0;
      }
      isEnabled(channel) {
        return (this.mask & (1 << channel | 0)) !== 0;
      }
    };
    _object3DId = 0;
    _v1$4 = new Vector3();
    _q1 = new Quaternion();
    _m1$3 = new Matrix4();
    _target = new Vector3();
    _position$3 = new Vector3();
    _scale$2 = new Vector3();
    _quaternion$2 = new Quaternion();
    _xAxis = new Vector3(1, 0, 0);
    _yAxis = new Vector3(0, 1, 0);
    _zAxis = new Vector3(0, 0, 1);
    _addedEvent = { type: "added" };
    _removedEvent = { type: "removed" };
    _childaddedEvent = { type: "childadded", child: null };
    _childremovedEvent = { type: "childremoved", child: null };
    Object3D = class _Object3D extends EventDispatcher {
      constructor() {
        super();
        this.isObject3D = true;
        Object.defineProperty(this, "id", { value: _object3DId++ });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "Object3D";
        this.parent = null;
        this.children = [];
        this.up = _Object3D.DEFAULT_UP.clone();
        const position = new Vector3();
        const rotation = new Euler();
        const quaternion = new Quaternion();
        const scale = new Vector3(1, 1, 1);
        function onRotationChange() {
          quaternion.setFromEuler(rotation, false);
        }
        function onQuaternionChange() {
          rotation.setFromQuaternion(quaternion, void 0, false);
        }
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties(this, {
          position: {
            configurable: true,
            enumerable: true,
            value: position
          },
          rotation: {
            configurable: true,
            enumerable: true,
            value: rotation
          },
          quaternion: {
            configurable: true,
            enumerable: true,
            value: quaternion
          },
          scale: {
            configurable: true,
            enumerable: true,
            value: scale
          },
          modelViewMatrix: {
            value: new Matrix4()
          },
          normalMatrix: {
            value: new Matrix3()
          }
        });
        this.matrix = new Matrix4();
        this.matrixWorld = new Matrix4();
        this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
        this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
        this.matrixWorldNeedsUpdate = false;
        this.layers = new Layers();
        this.visible = true;
        this.castShadow = false;
        this.receiveShadow = false;
        this.frustumCulled = true;
        this.renderOrder = 0;
        this.animations = [];
        this.userData = {};
      }
      onBeforeShadow() {
      }
      onAfterShadow() {
      }
      onBeforeRender() {
      }
      onAfterRender() {
      }
      applyMatrix4(matrix) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        this.matrix.premultiply(matrix);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
      }
      applyQuaternion(q) {
        this.quaternion.premultiply(q);
        return this;
      }
      setRotationFromAxisAngle(axis, angle2) {
        this.quaternion.setFromAxisAngle(axis, angle2);
      }
      setRotationFromEuler(euler) {
        this.quaternion.setFromEuler(euler, true);
      }
      setRotationFromMatrix(m) {
        this.quaternion.setFromRotationMatrix(m);
      }
      setRotationFromQuaternion(q) {
        this.quaternion.copy(q);
      }
      rotateOnAxis(axis, angle2) {
        _q1.setFromAxisAngle(axis, angle2);
        this.quaternion.multiply(_q1);
        return this;
      }
      rotateOnWorldAxis(axis, angle2) {
        _q1.setFromAxisAngle(axis, angle2);
        this.quaternion.premultiply(_q1);
        return this;
      }
      rotateX(angle2) {
        return this.rotateOnAxis(_xAxis, angle2);
      }
      rotateY(angle2) {
        return this.rotateOnAxis(_yAxis, angle2);
      }
      rotateZ(angle2) {
        return this.rotateOnAxis(_zAxis, angle2);
      }
      translateOnAxis(axis, distance2) {
        _v1$4.copy(axis).applyQuaternion(this.quaternion);
        this.position.add(_v1$4.multiplyScalar(distance2));
        return this;
      }
      translateX(distance2) {
        return this.translateOnAxis(_xAxis, distance2);
      }
      translateY(distance2) {
        return this.translateOnAxis(_yAxis, distance2);
      }
      translateZ(distance2) {
        return this.translateOnAxis(_zAxis, distance2);
      }
      localToWorld(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(this.matrixWorld);
      }
      worldToLocal(vector) {
        this.updateWorldMatrix(true, false);
        return vector.applyMatrix4(_m1$3.copy(this.matrixWorld).invert());
      }
      lookAt(x, y, z) {
        if (x.isVector3) {
          _target.copy(x);
        } else {
          _target.set(x, y, z);
        }
        const parent = this.parent;
        this.updateWorldMatrix(true, false);
        _position$3.setFromMatrixPosition(this.matrixWorld);
        if (this.isCamera || this.isLight) {
          _m1$3.lookAt(_position$3, _target, this.up);
        } else {
          _m1$3.lookAt(_target, _position$3, this.up);
        }
        this.quaternion.setFromRotationMatrix(_m1$3);
        if (parent) {
          _m1$3.extractRotation(parent.matrixWorld);
          _q1.setFromRotationMatrix(_m1$3);
          this.quaternion.premultiply(_q1.invert());
        }
      }
      add(object) {
        if (arguments.length > 1) {
          for (let i = 0; i < arguments.length; i++) {
            this.add(arguments[i]);
          }
          return this;
        }
        if (object === this) {
          console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
          return this;
        }
        if (object && object.isObject3D) {
          object.removeFromParent();
          object.parent = this;
          this.children.push(object);
          object.dispatchEvent(_addedEvent);
          _childaddedEvent.child = object;
          this.dispatchEvent(_childaddedEvent);
          _childaddedEvent.child = null;
        } else {
          console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
        }
        return this;
      }
      remove(object) {
        if (arguments.length > 1) {
          for (let i = 0; i < arguments.length; i++) {
            this.remove(arguments[i]);
          }
          return this;
        }
        const index = this.children.indexOf(object);
        if (index !== -1) {
          object.parent = null;
          this.children.splice(index, 1);
          object.dispatchEvent(_removedEvent);
          _childremovedEvent.child = object;
          this.dispatchEvent(_childremovedEvent);
          _childremovedEvent.child = null;
        }
        return this;
      }
      removeFromParent() {
        const parent = this.parent;
        if (parent !== null) {
          parent.remove(this);
        }
        return this;
      }
      clear() {
        return this.remove(...this.children);
      }
      attach(object) {
        this.updateWorldMatrix(true, false);
        _m1$3.copy(this.matrixWorld).invert();
        if (object.parent !== null) {
          object.parent.updateWorldMatrix(true, false);
          _m1$3.multiply(object.parent.matrixWorld);
        }
        object.applyMatrix4(_m1$3);
        object.removeFromParent();
        object.parent = this;
        this.children.push(object);
        object.updateWorldMatrix(false, true);
        object.dispatchEvent(_addedEvent);
        _childaddedEvent.child = object;
        this.dispatchEvent(_childaddedEvent);
        _childaddedEvent.child = null;
        return this;
      }
      getObjectById(id) {
        return this.getObjectByProperty("id", id);
      }
      getObjectByName(name) {
        return this.getObjectByProperty("name", name);
      }
      getObjectByProperty(name, value) {
        if (this[name] === value) return this;
        for (let i = 0, l = this.children.length; i < l; i++) {
          const child = this.children[i];
          const object = child.getObjectByProperty(name, value);
          if (object !== void 0) {
            return object;
          }
        }
        return void 0;
      }
      getObjectsByProperty(name, value, result = []) {
        if (this[name] === value) result.push(this);
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].getObjectsByProperty(name, value, result);
        }
        return result;
      }
      getWorldPosition(target) {
        this.updateWorldMatrix(true, false);
        return target.setFromMatrixPosition(this.matrixWorld);
      }
      getWorldQuaternion(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, target, _scale$2);
        return target;
      }
      getWorldScale(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose(_position$3, _quaternion$2, target);
        return target;
      }
      getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(e[8], e[9], e[10]).normalize();
      }
      raycast() {
      }
      traverse(callback) {
        callback(this);
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].traverse(callback);
        }
      }
      traverseVisible(callback) {
        if (this.visible === false) return;
        callback(this);
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].traverseVisible(callback);
        }
      }
      traverseAncestors(callback) {
        const parent = this.parent;
        if (parent !== null) {
          callback(parent);
          parent.traverseAncestors(callback);
        }
      }
      updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = true;
      }
      updateMatrixWorld(force) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || force) {
          if (this.parent === null) {
            this.matrixWorld.copy(this.matrix);
          } else {
            this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
          }
          this.matrixWorldNeedsUpdate = false;
          force = true;
        }
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          if (child.matrixWorldAutoUpdate === true || force === true) {
            child.updateMatrixWorld(force);
          }
        }
      }
      updateWorldMatrix(updateParents, updateChildren) {
        const parent = this.parent;
        if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) {
          parent.updateWorldMatrix(true, false);
        }
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
        if (updateChildren === true) {
          const children = this.children;
          for (let i = 0, l = children.length; i < l; i++) {
            const child = children[i];
            if (child.matrixWorldAutoUpdate === true) {
              child.updateWorldMatrix(false, true);
            }
          }
        }
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        const output = {};
        if (isRootObject) {
          meta = {
            geometries: {},
            materials: {},
            textures: {},
            images: {},
            shapes: {},
            skeletons: {},
            animations: {},
            nodes: {}
          };
          output.metadata = {
            version: 4.6,
            type: "Object",
            generator: "Object3D.toJSON"
          };
        }
        const object = {};
        object.uuid = this.uuid;
        object.type = this.type;
        if (this.name !== "") object.name = this.name;
        if (this.castShadow === true) object.castShadow = true;
        if (this.receiveShadow === true) object.receiveShadow = true;
        if (this.visible === false) object.visible = false;
        if (this.frustumCulled === false) object.frustumCulled = false;
        if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
        if (Object.keys(this.userData).length > 0) object.userData = this.userData;
        object.layers = this.layers.mask;
        object.matrix = this.matrix.toArray();
        object.up = this.up.toArray();
        if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
        if (this.isInstancedMesh) {
          object.type = "InstancedMesh";
          object.count = this.count;
          object.instanceMatrix = this.instanceMatrix.toJSON();
          if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
        }
        if (this.isBatchedMesh) {
          object.type = "BatchedMesh";
          object.perObjectFrustumCulled = this.perObjectFrustumCulled;
          object.sortObjects = this.sortObjects;
          object.drawRanges = this._drawRanges;
          object.reservedRanges = this._reservedRanges;
          object.visibility = this._visibility;
          object.active = this._active;
          object.bounds = this._bounds.map((bound) => ({
            boxInitialized: bound.boxInitialized,
            boxMin: bound.box.min.toArray(),
            boxMax: bound.box.max.toArray(),
            sphereInitialized: bound.sphereInitialized,
            sphereRadius: bound.sphere.radius,
            sphereCenter: bound.sphere.center.toArray()
          }));
          object.maxGeometryCount = this._maxGeometryCount;
          object.maxVertexCount = this._maxVertexCount;
          object.maxIndexCount = this._maxIndexCount;
          object.geometryInitialized = this._geometryInitialized;
          object.geometryCount = this._geometryCount;
          object.matricesTexture = this._matricesTexture.toJSON(meta);
          if (this.boundingSphere !== null) {
            object.boundingSphere = {
              center: object.boundingSphere.center.toArray(),
              radius: object.boundingSphere.radius
            };
          }
          if (this.boundingBox !== null) {
            object.boundingBox = {
              min: object.boundingBox.min.toArray(),
              max: object.boundingBox.max.toArray()
            };
          }
        }
        function serialize(library, element) {
          if (library[element.uuid] === void 0) {
            library[element.uuid] = element.toJSON(meta);
          }
          return element.uuid;
        }
        if (this.isScene) {
          if (this.background) {
            if (this.background.isColor) {
              object.background = this.background.toJSON();
            } else if (this.background.isTexture) {
              object.background = this.background.toJSON(meta).uuid;
            }
          }
          if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
            object.environment = this.environment.toJSON(meta).uuid;
          }
        } else if (this.isMesh || this.isLine || this.isPoints) {
          object.geometry = serialize(meta.geometries, this.geometry);
          const parameters = this.geometry.parameters;
          if (parameters !== void 0 && parameters.shapes !== void 0) {
            const shapes = parameters.shapes;
            if (Array.isArray(shapes)) {
              for (let i = 0, l = shapes.length; i < l; i++) {
                const shape = shapes[i];
                serialize(meta.shapes, shape);
              }
            } else {
              serialize(meta.shapes, shapes);
            }
          }
        }
        if (this.isSkinnedMesh) {
          object.bindMode = this.bindMode;
          object.bindMatrix = this.bindMatrix.toArray();
          if (this.skeleton !== void 0) {
            serialize(meta.skeletons, this.skeleton);
            object.skeleton = this.skeleton.uuid;
          }
        }
        if (this.material !== void 0) {
          if (Array.isArray(this.material)) {
            const uuids = [];
            for (let i = 0, l = this.material.length; i < l; i++) {
              uuids.push(serialize(meta.materials, this.material[i]));
            }
            object.material = uuids;
          } else {
            object.material = serialize(meta.materials, this.material);
          }
        }
        if (this.children.length > 0) {
          object.children = [];
          for (let i = 0; i < this.children.length; i++) {
            object.children.push(this.children[i].toJSON(meta).object);
          }
        }
        if (this.animations.length > 0) {
          object.animations = [];
          for (let i = 0; i < this.animations.length; i++) {
            const animation = this.animations[i];
            object.animations.push(serialize(meta.animations, animation));
          }
        }
        if (isRootObject) {
          const geometries = extractFromCache(meta.geometries);
          const materials = extractFromCache(meta.materials);
          const textures = extractFromCache(meta.textures);
          const images = extractFromCache(meta.images);
          const shapes = extractFromCache(meta.shapes);
          const skeletons = extractFromCache(meta.skeletons);
          const animations = extractFromCache(meta.animations);
          const nodes = extractFromCache(meta.nodes);
          if (geometries.length > 0) output.geometries = geometries;
          if (materials.length > 0) output.materials = materials;
          if (textures.length > 0) output.textures = textures;
          if (images.length > 0) output.images = images;
          if (shapes.length > 0) output.shapes = shapes;
          if (skeletons.length > 0) output.skeletons = skeletons;
          if (animations.length > 0) output.animations = animations;
          if (nodes.length > 0) output.nodes = nodes;
        }
        output.object = object;
        return output;
        function extractFromCache(cache) {
          const values = [];
          for (const key in cache) {
            const data = cache[key];
            delete data.metadata;
            values.push(data);
          }
          return values;
        }
      }
      clone(recursive) {
        return new this.constructor().copy(this, recursive);
      }
      copy(source, recursive = true) {
        this.name = source.name;
        this.up.copy(source.up);
        this.position.copy(source.position);
        this.rotation.order = source.rotation.order;
        this.quaternion.copy(source.quaternion);
        this.scale.copy(source.scale);
        this.matrix.copy(source.matrix);
        this.matrixWorld.copy(source.matrixWorld);
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
        this.layers.mask = source.layers.mask;
        this.visible = source.visible;
        this.castShadow = source.castShadow;
        this.receiveShadow = source.receiveShadow;
        this.frustumCulled = source.frustumCulled;
        this.renderOrder = source.renderOrder;
        this.animations = source.animations.slice();
        this.userData = JSON.parse(JSON.stringify(source.userData));
        if (recursive === true) {
          for (let i = 0; i < source.children.length; i++) {
            const child = source.children[i];
            this.add(child.clone());
          }
        }
        return this;
      }
    };
    Object3D.DEFAULT_UP = new Vector3(0, 1, 0);
    Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
    Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
    _v0$1 = new Vector3();
    _v1$3 = new Vector3();
    _v2$2 = new Vector3();
    _v3$2 = new Vector3();
    _vab = new Vector3();
    _vac = new Vector3();
    _vbc = new Vector3();
    _vap = new Vector3();
    _vbp = new Vector3();
    _vcp = new Vector3();
    Triangle = class _Triangle {
      constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
        this.a = a;
        this.b = b;
        this.c = c;
      }
      static getNormal(a, b, c, target) {
        target.subVectors(c, b);
        _v0$1.subVectors(a, b);
        target.cross(_v0$1);
        const targetLengthSq = target.lengthSq();
        if (targetLengthSq > 0) {
          return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
        }
        return target.set(0, 0, 0);
      }
      // static/instance method to calculate barycentric coordinates
      // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
      static getBarycoord(point, a, b, c, target) {
        _v0$1.subVectors(c, a);
        _v1$3.subVectors(b, a);
        _v2$2.subVectors(point, a);
        const dot00 = _v0$1.dot(_v0$1);
        const dot01 = _v0$1.dot(_v1$3);
        const dot02 = _v0$1.dot(_v2$2);
        const dot11 = _v1$3.dot(_v1$3);
        const dot12 = _v1$3.dot(_v2$2);
        const denom = dot00 * dot11 - dot01 * dot01;
        if (denom === 0) {
          target.set(0, 0, 0);
          return null;
        }
        const invDenom = 1 / denom;
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v2 = (dot00 * dot12 - dot01 * dot02) * invDenom;
        return target.set(1 - u - v2, v2, u);
      }
      static containsPoint(point, a, b, c) {
        if (this.getBarycoord(point, a, b, c, _v3$2) === null) {
          return false;
        }
        return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
      }
      static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
        if (this.getBarycoord(point, p1, p2, p3, _v3$2) === null) {
          target.x = 0;
          target.y = 0;
          if ("z" in target) target.z = 0;
          if ("w" in target) target.w = 0;
          return null;
        }
        target.setScalar(0);
        target.addScaledVector(v1, _v3$2.x);
        target.addScaledVector(v2, _v3$2.y);
        target.addScaledVector(v3, _v3$2.z);
        return target;
      }
      static isFrontFacing(a, b, c, direction) {
        _v0$1.subVectors(c, b);
        _v1$3.subVectors(a, b);
        return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
      }
      set(a, b, c) {
        this.a.copy(a);
        this.b.copy(b);
        this.c.copy(c);
        return this;
      }
      setFromPointsAndIndices(points, i0, i1, i2) {
        this.a.copy(points[i0]);
        this.b.copy(points[i1]);
        this.c.copy(points[i2]);
        return this;
      }
      setFromAttributeAndIndices(attribute, i0, i1, i2) {
        this.a.fromBufferAttribute(attribute, i0);
        this.b.fromBufferAttribute(attribute, i1);
        this.c.fromBufferAttribute(attribute, i2);
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(triangle) {
        this.a.copy(triangle.a);
        this.b.copy(triangle.b);
        this.c.copy(triangle.c);
        return this;
      }
      getArea() {
        _v0$1.subVectors(this.c, this.b);
        _v1$3.subVectors(this.a, this.b);
        return _v0$1.cross(_v1$3).length() * 0.5;
      }
      getMidpoint(target) {
        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
      }
      getNormal(target) {
        return _Triangle.getNormal(this.a, this.b, this.c, target);
      }
      getPlane(target) {
        return target.setFromCoplanarPoints(this.a, this.b, this.c);
      }
      getBarycoord(point, target) {
        return _Triangle.getBarycoord(point, this.a, this.b, this.c, target);
      }
      getInterpolation(point, v1, v2, v3, target) {
        return _Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
      }
      containsPoint(point) {
        return _Triangle.containsPoint(point, this.a, this.b, this.c);
      }
      isFrontFacing(direction) {
        return _Triangle.isFrontFacing(this.a, this.b, this.c, direction);
      }
      intersectsBox(box) {
        return box.intersectsTriangle(this);
      }
      closestPointToPoint(p2, target) {
        const a = this.a, b = this.b, c = this.c;
        let v2, w;
        _vab.subVectors(b, a);
        _vac.subVectors(c, a);
        _vap.subVectors(p2, a);
        const d1 = _vab.dot(_vap);
        const d2 = _vac.dot(_vap);
        if (d1 <= 0 && d2 <= 0) {
          return target.copy(a);
        }
        _vbp.subVectors(p2, b);
        const d3 = _vab.dot(_vbp);
        const d4 = _vac.dot(_vbp);
        if (d3 >= 0 && d4 <= d3) {
          return target.copy(b);
        }
        const vc = d1 * d4 - d3 * d2;
        if (vc <= 0 && d1 >= 0 && d3 <= 0) {
          v2 = d1 / (d1 - d3);
          return target.copy(a).addScaledVector(_vab, v2);
        }
        _vcp.subVectors(p2, c);
        const d5 = _vab.dot(_vcp);
        const d6 = _vac.dot(_vcp);
        if (d6 >= 0 && d5 <= d6) {
          return target.copy(c);
        }
        const vb = d5 * d2 - d1 * d6;
        if (vb <= 0 && d2 >= 0 && d6 <= 0) {
          w = d2 / (d2 - d6);
          return target.copy(a).addScaledVector(_vac, w);
        }
        const va = d3 * d6 - d5 * d4;
        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
          _vbc.subVectors(c, b);
          w = (d4 - d3) / (d4 - d3 + (d5 - d6));
          return target.copy(b).addScaledVector(_vbc, w);
        }
        const denom = 1 / (va + vb + vc);
        v2 = vb * denom;
        w = vc * denom;
        return target.copy(a).addScaledVector(_vab, v2).addScaledVector(_vac, w);
      }
      equals(triangle) {
        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
      }
    };
    _colorKeywords = {
      "aliceblue": 15792383,
      "antiquewhite": 16444375,
      "aqua": 65535,
      "aquamarine": 8388564,
      "azure": 15794175,
      "beige": 16119260,
      "bisque": 16770244,
      "black": 0,
      "blanchedalmond": 16772045,
      "blue": 255,
      "blueviolet": 9055202,
      "brown": 10824234,
      "burlywood": 14596231,
      "cadetblue": 6266528,
      "chartreuse": 8388352,
      "chocolate": 13789470,
      "coral": 16744272,
      "cornflowerblue": 6591981,
      "cornsilk": 16775388,
      "crimson": 14423100,
      "cyan": 65535,
      "darkblue": 139,
      "darkcyan": 35723,
      "darkgoldenrod": 12092939,
      "darkgray": 11119017,
      "darkgreen": 25600,
      "darkgrey": 11119017,
      "darkkhaki": 12433259,
      "darkmagenta": 9109643,
      "darkolivegreen": 5597999,
      "darkorange": 16747520,
      "darkorchid": 10040012,
      "darkred": 9109504,
      "darksalmon": 15308410,
      "darkseagreen": 9419919,
      "darkslateblue": 4734347,
      "darkslategray": 3100495,
      "darkslategrey": 3100495,
      "darkturquoise": 52945,
      "darkviolet": 9699539,
      "deeppink": 16716947,
      "deepskyblue": 49151,
      "dimgray": 6908265,
      "dimgrey": 6908265,
      "dodgerblue": 2003199,
      "firebrick": 11674146,
      "floralwhite": 16775920,
      "forestgreen": 2263842,
      "fuchsia": 16711935,
      "gainsboro": 14474460,
      "ghostwhite": 16316671,
      "gold": 16766720,
      "goldenrod": 14329120,
      "gray": 8421504,
      "green": 32768,
      "greenyellow": 11403055,
      "grey": 8421504,
      "honeydew": 15794160,
      "hotpink": 16738740,
      "indianred": 13458524,
      "indigo": 4915330,
      "ivory": 16777200,
      "khaki": 15787660,
      "lavender": 15132410,
      "lavenderblush": 16773365,
      "lawngreen": 8190976,
      "lemonchiffon": 16775885,
      "lightblue": 11393254,
      "lightcoral": 15761536,
      "lightcyan": 14745599,
      "lightgoldenrodyellow": 16448210,
      "lightgray": 13882323,
      "lightgreen": 9498256,
      "lightgrey": 13882323,
      "lightpink": 16758465,
      "lightsalmon": 16752762,
      "lightseagreen": 2142890,
      "lightskyblue": 8900346,
      "lightslategray": 7833753,
      "lightslategrey": 7833753,
      "lightsteelblue": 11584734,
      "lightyellow": 16777184,
      "lime": 65280,
      "limegreen": 3329330,
      "linen": 16445670,
      "magenta": 16711935,
      "maroon": 8388608,
      "mediumaquamarine": 6737322,
      "mediumblue": 205,
      "mediumorchid": 12211667,
      "mediumpurple": 9662683,
      "mediumseagreen": 3978097,
      "mediumslateblue": 8087790,
      "mediumspringgreen": 64154,
      "mediumturquoise": 4772300,
      "mediumvioletred": 13047173,
      "midnightblue": 1644912,
      "mintcream": 16121850,
      "mistyrose": 16770273,
      "moccasin": 16770229,
      "navajowhite": 16768685,
      "navy": 128,
      "oldlace": 16643558,
      "olive": 8421376,
      "olivedrab": 7048739,
      "orange": 16753920,
      "orangered": 16729344,
      "orchid": 14315734,
      "palegoldenrod": 15657130,
      "palegreen": 10025880,
      "paleturquoise": 11529966,
      "palevioletred": 14381203,
      "papayawhip": 16773077,
      "peachpuff": 16767673,
      "peru": 13468991,
      "pink": 16761035,
      "plum": 14524637,
      "powderblue": 11591910,
      "purple": 8388736,
      "rebeccapurple": 6697881,
      "red": 16711680,
      "rosybrown": 12357519,
      "royalblue": 4286945,
      "saddlebrown": 9127187,
      "salmon": 16416882,
      "sandybrown": 16032864,
      "seagreen": 3050327,
      "seashell": 16774638,
      "sienna": 10506797,
      "silver": 12632256,
      "skyblue": 8900331,
      "slateblue": 6970061,
      "slategray": 7372944,
      "slategrey": 7372944,
      "snow": 16775930,
      "springgreen": 65407,
      "steelblue": 4620980,
      "tan": 13808780,
      "teal": 32896,
      "thistle": 14204888,
      "tomato": 16737095,
      "turquoise": 4251856,
      "violet": 15631086,
      "wheat": 16113331,
      "white": 16777215,
      "whitesmoke": 16119285,
      "yellow": 16776960,
      "yellowgreen": 10145074
    };
    _hslA = { h: 0, s: 0, l: 0 };
    _hslB = { h: 0, s: 0, l: 0 };
    Color = class {
      constructor(r, g2, b) {
        this.isColor = true;
        this.r = 1;
        this.g = 1;
        this.b = 1;
        return this.set(r, g2, b);
      }
      set(r, g2, b) {
        if (g2 === void 0 && b === void 0) {
          const value = r;
          if (value && value.isColor) {
            this.copy(value);
          } else if (typeof value === "number") {
            this.setHex(value);
          } else if (typeof value === "string") {
            this.setStyle(value);
          }
        } else {
          this.setRGB(r, g2, b);
        }
        return this;
      }
      setScalar(scalar) {
        this.r = scalar;
        this.g = scalar;
        this.b = scalar;
        return this;
      }
      setHex(hex, colorSpace = SRGBColorSpace) {
        hex = Math.floor(hex);
        this.r = (hex >> 16 & 255) / 255;
        this.g = (hex >> 8 & 255) / 255;
        this.b = (hex & 255) / 255;
        ColorManagement.toWorkingColorSpace(this, colorSpace);
        return this;
      }
      setRGB(r, g2, b, colorSpace = ColorManagement.workingColorSpace) {
        this.r = r;
        this.g = g2;
        this.b = b;
        ColorManagement.toWorkingColorSpace(this, colorSpace);
        return this;
      }
      setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
        h = euclideanModulo(h, 1);
        s = clamp2(s, 0, 1);
        l = clamp2(l, 0, 1);
        if (s === 0) {
          this.r = this.g = this.b = l;
        } else {
          const p2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
          const q = 2 * l - p2;
          this.r = hue2rgb(q, p2, h + 1 / 3);
          this.g = hue2rgb(q, p2, h);
          this.b = hue2rgb(q, p2, h - 1 / 3);
        }
        ColorManagement.toWorkingColorSpace(this, colorSpace);
        return this;
      }
      setStyle(style, colorSpace = SRGBColorSpace) {
        function handleAlpha(string) {
          if (string === void 0) return;
          if (parseFloat(string) < 1) {
            console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
          }
        }
        let m;
        if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
          let color;
          const name = m[1];
          const components = m[2];
          switch (name) {
            case "rgb":
            case "rgba":
              if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                handleAlpha(color[4]);
                return this.setRGB(
                  Math.min(255, parseInt(color[1], 10)) / 255,
                  Math.min(255, parseInt(color[2], 10)) / 255,
                  Math.min(255, parseInt(color[3], 10)) / 255,
                  colorSpace
                );
              }
              if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                handleAlpha(color[4]);
                return this.setRGB(
                  Math.min(100, parseInt(color[1], 10)) / 100,
                  Math.min(100, parseInt(color[2], 10)) / 100,
                  Math.min(100, parseInt(color[3], 10)) / 100,
                  colorSpace
                );
              }
              break;
            case "hsl":
            case "hsla":
              if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                handleAlpha(color[4]);
                return this.setHSL(
                  parseFloat(color[1]) / 360,
                  parseFloat(color[2]) / 100,
                  parseFloat(color[3]) / 100,
                  colorSpace
                );
              }
              break;
            default:
              console.warn("THREE.Color: Unknown color model " + style);
          }
        } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
          const hex = m[1];
          const size = hex.length;
          if (size === 3) {
            return this.setRGB(
              parseInt(hex.charAt(0), 16) / 15,
              parseInt(hex.charAt(1), 16) / 15,
              parseInt(hex.charAt(2), 16) / 15,
              colorSpace
            );
          } else if (size === 6) {
            return this.setHex(parseInt(hex, 16), colorSpace);
          } else {
            console.warn("THREE.Color: Invalid hex color " + style);
          }
        } else if (style && style.length > 0) {
          return this.setColorName(style, colorSpace);
        }
        return this;
      }
      setColorName(style, colorSpace = SRGBColorSpace) {
        const hex = _colorKeywords[style.toLowerCase()];
        if (hex !== void 0) {
          this.setHex(hex, colorSpace);
        } else {
          console.warn("THREE.Color: Unknown color " + style);
        }
        return this;
      }
      clone() {
        return new this.constructor(this.r, this.g, this.b);
      }
      copy(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        return this;
      }
      copySRGBToLinear(color) {
        this.r = SRGBToLinear(color.r);
        this.g = SRGBToLinear(color.g);
        this.b = SRGBToLinear(color.b);
        return this;
      }
      copyLinearToSRGB(color) {
        this.r = LinearToSRGB(color.r);
        this.g = LinearToSRGB(color.g);
        this.b = LinearToSRGB(color.b);
        return this;
      }
      convertSRGBToLinear() {
        this.copySRGBToLinear(this);
        return this;
      }
      convertLinearToSRGB() {
        this.copyLinearToSRGB(this);
        return this;
      }
      getHex(colorSpace = SRGBColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
        return Math.round(clamp2(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp2(_color.g * 255, 0, 255)) * 256 + Math.round(clamp2(_color.b * 255, 0, 255));
      }
      getHexString(colorSpace = SRGBColorSpace) {
        return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
      }
      getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
        const r = _color.r, g2 = _color.g, b = _color.b;
        const max2 = Math.max(r, g2, b);
        const min = Math.min(r, g2, b);
        let hue, saturation;
        const lightness = (min + max2) / 2;
        if (min === max2) {
          hue = 0;
          saturation = 0;
        } else {
          const delta = max2 - min;
          saturation = lightness <= 0.5 ? delta / (max2 + min) : delta / (2 - max2 - min);
          switch (max2) {
            case r:
              hue = (g2 - b) / delta + (g2 < b ? 6 : 0);
              break;
            case g2:
              hue = (b - r) / delta + 2;
              break;
            case b:
              hue = (r - g2) / delta + 4;
              break;
          }
          hue /= 6;
        }
        target.h = hue;
        target.s = saturation;
        target.l = lightness;
        return target;
      }
      getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
        target.r = _color.r;
        target.g = _color.g;
        target.b = _color.b;
        return target;
      }
      getStyle(colorSpace = SRGBColorSpace) {
        ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
        const r = _color.r, g2 = _color.g, b = _color.b;
        if (colorSpace !== SRGBColorSpace) {
          return `color(${colorSpace} ${r.toFixed(3)} ${g2.toFixed(3)} ${b.toFixed(3)})`;
        }
        return `rgb(${Math.round(r * 255)},${Math.round(g2 * 255)},${Math.round(b * 255)})`;
      }
      offsetHSL(h, s, l) {
        this.getHSL(_hslA);
        return this.setHSL(_hslA.h + h, _hslA.s + s, _hslA.l + l);
      }
      add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        return this;
      }
      addColors(color1, color2) {
        this.r = color1.r + color2.r;
        this.g = color1.g + color2.g;
        this.b = color1.b + color2.b;
        return this;
      }
      addScalar(s) {
        this.r += s;
        this.g += s;
        this.b += s;
        return this;
      }
      sub(color) {
        this.r = Math.max(0, this.r - color.r);
        this.g = Math.max(0, this.g - color.g);
        this.b = Math.max(0, this.b - color.b);
        return this;
      }
      multiply(color) {
        this.r *= color.r;
        this.g *= color.g;
        this.b *= color.b;
        return this;
      }
      multiplyScalar(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        return this;
      }
      lerp(color, alpha) {
        this.r += (color.r - this.r) * alpha;
        this.g += (color.g - this.g) * alpha;
        this.b += (color.b - this.b) * alpha;
        return this;
      }
      lerpColors(color1, color2, alpha) {
        this.r = color1.r + (color2.r - color1.r) * alpha;
        this.g = color1.g + (color2.g - color1.g) * alpha;
        this.b = color1.b + (color2.b - color1.b) * alpha;
        return this;
      }
      lerpHSL(color, alpha) {
        this.getHSL(_hslA);
        color.getHSL(_hslB);
        const h = lerp(_hslA.h, _hslB.h, alpha);
        const s = lerp(_hslA.s, _hslB.s, alpha);
        const l = lerp(_hslA.l, _hslB.l, alpha);
        this.setHSL(h, s, l);
        return this;
      }
      setFromVector3(v2) {
        this.r = v2.x;
        this.g = v2.y;
        this.b = v2.z;
        return this;
      }
      applyMatrix3(m) {
        const r = this.r, g2 = this.g, b = this.b;
        const e = m.elements;
        this.r = e[0] * r + e[3] * g2 + e[6] * b;
        this.g = e[1] * r + e[4] * g2 + e[7] * b;
        this.b = e[2] * r + e[5] * g2 + e[8] * b;
        return this;
      }
      equals(c) {
        return c.r === this.r && c.g === this.g && c.b === this.b;
      }
      fromArray(array, offset = 0) {
        this.r = array[offset];
        this.g = array[offset + 1];
        this.b = array[offset + 2];
        return this;
      }
      toArray(array = [], offset = 0) {
        array[offset] = this.r;
        array[offset + 1] = this.g;
        array[offset + 2] = this.b;
        return array;
      }
      fromBufferAttribute(attribute, index) {
        this.r = attribute.getX(index);
        this.g = attribute.getY(index);
        this.b = attribute.getZ(index);
        return this;
      }
      toJSON() {
        return this.getHex();
      }
      *[Symbol.iterator]() {
        yield this.r;
        yield this.g;
        yield this.b;
      }
    };
    _color = new Color();
    Color.NAMES = _colorKeywords;
    _materialId = 0;
    Material = class extends EventDispatcher {
      constructor() {
        super();
        this.isMaterial = true;
        Object.defineProperty(this, "id", { value: _materialId++ });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "Material";
        this.blending = NormalBlending;
        this.side = FrontSide;
        this.vertexColors = false;
        this.opacity = 1;
        this.transparent = false;
        this.alphaHash = false;
        this.blendSrc = SrcAlphaFactor;
        this.blendDst = OneMinusSrcAlphaFactor;
        this.blendEquation = AddEquation;
        this.blendSrcAlpha = null;
        this.blendDstAlpha = null;
        this.blendEquationAlpha = null;
        this.blendColor = new Color(0, 0, 0);
        this.blendAlpha = 0;
        this.depthFunc = LessEqualDepth;
        this.depthTest = true;
        this.depthWrite = true;
        this.stencilWriteMask = 255;
        this.stencilFunc = AlwaysStencilFunc;
        this.stencilRef = 0;
        this.stencilFuncMask = 255;
        this.stencilFail = KeepStencilOp;
        this.stencilZFail = KeepStencilOp;
        this.stencilZPass = KeepStencilOp;
        this.stencilWrite = false;
        this.clippingPlanes = null;
        this.clipIntersection = false;
        this.clipShadows = false;
        this.shadowSide = null;
        this.colorWrite = true;
        this.precision = null;
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.dithering = false;
        this.alphaToCoverage = false;
        this.premultipliedAlpha = false;
        this.forceSinglePass = false;
        this.visible = true;
        this.toneMapped = true;
        this.userData = {};
        this.version = 0;
        this._alphaTest = 0;
      }
      get alphaTest() {
        return this._alphaTest;
      }
      set alphaTest(value) {
        if (this._alphaTest > 0 !== value > 0) {
          this.version++;
        }
        this._alphaTest = value;
      }
      onBuild() {
      }
      onBeforeRender() {
      }
      onBeforeCompile() {
      }
      customProgramCacheKey() {
        return this.onBeforeCompile.toString();
      }
      setValues(values) {
        if (values === void 0) return;
        for (const key in values) {
          const newValue = values[key];
          if (newValue === void 0) {
            console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
            continue;
          }
          const currentValue = this[key];
          if (currentValue === void 0) {
            console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
            continue;
          }
          if (currentValue && currentValue.isColor) {
            currentValue.set(newValue);
          } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
            currentValue.copy(newValue);
          } else {
            this[key] = newValue;
          }
        }
      }
      toJSON(meta) {
        const isRootObject = meta === void 0 || typeof meta === "string";
        if (isRootObject) {
          meta = {
            textures: {},
            images: {}
          };
        }
        const data = {
          metadata: {
            version: 4.6,
            type: "Material",
            generator: "Material.toJSON"
          }
        };
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "") data.name = this.name;
        if (this.color && this.color.isColor) data.color = this.color.getHex();
        if (this.roughness !== void 0) data.roughness = this.roughness;
        if (this.metalness !== void 0) data.metalness = this.metalness;
        if (this.sheen !== void 0) data.sheen = this.sheen;
        if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
        if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
        if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
        if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
        if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
        if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
        if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
        if (this.shininess !== void 0) data.shininess = this.shininess;
        if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
        if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
        if (this.clearcoatMap && this.clearcoatMap.isTexture) {
          data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
        }
        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
          data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
        }
        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
          data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
          data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
        }
        if (this.dispersion !== void 0) data.dispersion = this.dispersion;
        if (this.iridescence !== void 0) data.iridescence = this.iridescence;
        if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
        if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
        if (this.iridescenceMap && this.iridescenceMap.isTexture) {
          data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
        }
        if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
          data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
        }
        if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
        if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
        if (this.anisotropyMap && this.anisotropyMap.isTexture) {
          data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
        }
        if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
        if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
        if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
        if (this.lightMap && this.lightMap.isTexture) {
          data.lightMap = this.lightMap.toJSON(meta).uuid;
          data.lightMapIntensity = this.lightMapIntensity;
        }
        if (this.aoMap && this.aoMap.isTexture) {
          data.aoMap = this.aoMap.toJSON(meta).uuid;
          data.aoMapIntensity = this.aoMapIntensity;
        }
        if (this.bumpMap && this.bumpMap.isTexture) {
          data.bumpMap = this.bumpMap.toJSON(meta).uuid;
          data.bumpScale = this.bumpScale;
        }
        if (this.normalMap && this.normalMap.isTexture) {
          data.normalMap = this.normalMap.toJSON(meta).uuid;
          data.normalMapType = this.normalMapType;
          data.normalScale = this.normalScale.toArray();
        }
        if (this.displacementMap && this.displacementMap.isTexture) {
          data.displacementMap = this.displacementMap.toJSON(meta).uuid;
          data.displacementScale = this.displacementScale;
          data.displacementBias = this.displacementBias;
        }
        if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
        if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
        if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
        if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
        if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
        if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
        if (this.envMap && this.envMap.isTexture) {
          data.envMap = this.envMap.toJSON(meta).uuid;
          if (this.combine !== void 0) data.combine = this.combine;
        }
        if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
        if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
        if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
        if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
        if (this.gradientMap && this.gradientMap.isTexture) {
          data.gradientMap = this.gradientMap.toJSON(meta).uuid;
        }
        if (this.transmission !== void 0) data.transmission = this.transmission;
        if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
        if (this.thickness !== void 0) data.thickness = this.thickness;
        if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
        if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
        if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
        if (this.size !== void 0) data.size = this.size;
        if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
        if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
        if (this.blending !== NormalBlending) data.blending = this.blending;
        if (this.side !== FrontSide) data.side = this.side;
        if (this.vertexColors === true) data.vertexColors = true;
        if (this.opacity < 1) data.opacity = this.opacity;
        if (this.transparent === true) data.transparent = true;
        if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
        if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
        if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
        if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
        if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
        if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
        if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
        if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
        if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
        if (this.depthTest === false) data.depthTest = this.depthTest;
        if (this.depthWrite === false) data.depthWrite = this.depthWrite;
        if (this.colorWrite === false) data.colorWrite = this.colorWrite;
        if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
        if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
        if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
        if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
        if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
        if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
        if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
        if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
        if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
        if (this.polygonOffset === true) data.polygonOffset = true;
        if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
        if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
        if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
        if (this.dashSize !== void 0) data.dashSize = this.dashSize;
        if (this.gapSize !== void 0) data.gapSize = this.gapSize;
        if (this.scale !== void 0) data.scale = this.scale;
        if (this.dithering === true) data.dithering = true;
        if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
        if (this.alphaHash === true) data.alphaHash = true;
        if (this.alphaToCoverage === true) data.alphaToCoverage = true;
        if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
        if (this.forceSinglePass === true) data.forceSinglePass = true;
        if (this.wireframe === true) data.wireframe = true;
        if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
        if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
        if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
        if (this.flatShading === true) data.flatShading = true;
        if (this.visible === false) data.visible = false;
        if (this.toneMapped === false) data.toneMapped = false;
        if (this.fog === false) data.fog = false;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        function extractFromCache(cache) {
          const values = [];
          for (const key in cache) {
            const data2 = cache[key];
            delete data2.metadata;
            values.push(data2);
          }
          return values;
        }
        if (isRootObject) {
          const textures = extractFromCache(meta.textures);
          const images = extractFromCache(meta.images);
          if (textures.length > 0) data.textures = textures;
          if (images.length > 0) data.images = images;
        }
        return data;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.name = source.name;
        this.blending = source.blending;
        this.side = source.side;
        this.vertexColors = source.vertexColors;
        this.opacity = source.opacity;
        this.transparent = source.transparent;
        this.blendSrc = source.blendSrc;
        this.blendDst = source.blendDst;
        this.blendEquation = source.blendEquation;
        this.blendSrcAlpha = source.blendSrcAlpha;
        this.blendDstAlpha = source.blendDstAlpha;
        this.blendEquationAlpha = source.blendEquationAlpha;
        this.blendColor.copy(source.blendColor);
        this.blendAlpha = source.blendAlpha;
        this.depthFunc = source.depthFunc;
        this.depthTest = source.depthTest;
        this.depthWrite = source.depthWrite;
        this.stencilWriteMask = source.stencilWriteMask;
        this.stencilFunc = source.stencilFunc;
        this.stencilRef = source.stencilRef;
        this.stencilFuncMask = source.stencilFuncMask;
        this.stencilFail = source.stencilFail;
        this.stencilZFail = source.stencilZFail;
        this.stencilZPass = source.stencilZPass;
        this.stencilWrite = source.stencilWrite;
        const srcPlanes = source.clippingPlanes;
        let dstPlanes = null;
        if (srcPlanes !== null) {
          const n = srcPlanes.length;
          dstPlanes = new Array(n);
          for (let i = 0; i !== n; ++i) {
            dstPlanes[i] = srcPlanes[i].clone();
          }
        }
        this.clippingPlanes = dstPlanes;
        this.clipIntersection = source.clipIntersection;
        this.clipShadows = source.clipShadows;
        this.shadowSide = source.shadowSide;
        this.colorWrite = source.colorWrite;
        this.precision = source.precision;
        this.polygonOffset = source.polygonOffset;
        this.polygonOffsetFactor = source.polygonOffsetFactor;
        this.polygonOffsetUnits = source.polygonOffsetUnits;
        this.dithering = source.dithering;
        this.alphaTest = source.alphaTest;
        this.alphaHash = source.alphaHash;
        this.alphaToCoverage = source.alphaToCoverage;
        this.premultipliedAlpha = source.premultipliedAlpha;
        this.forceSinglePass = source.forceSinglePass;
        this.visible = source.visible;
        this.toneMapped = source.toneMapped;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
      set needsUpdate(value) {
        if (value === true) this.version++;
      }
    };
    MeshBasicMaterial = class extends Material {
      constructor(parameters) {
        super();
        this.isMeshBasicMaterial = true;
        this.type = "MeshBasicMaterial";
        this.color = new Color(16777215);
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapRotation = new Euler();
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapRotation.copy(source.envMapRotation);
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.fog = source.fog;
        return this;
      }
    };
    _tables = _generateTables();
    _vector$9 = new Vector3();
    _vector2$1 = new Vector2();
    BufferAttribute = class {
      constructor(array, itemSize, normalized = false) {
        if (Array.isArray(array)) {
          throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        }
        this.isBufferAttribute = true;
        this.name = "";
        this.array = array;
        this.itemSize = itemSize;
        this.count = array !== void 0 ? array.length / itemSize : 0;
        this.normalized = normalized;
        this.usage = StaticDrawUsage;
        this._updateRange = { offset: 0, count: -1 };
        this.updateRanges = [];
        this.gpuType = FloatType;
        this.version = 0;
      }
      onUploadCallback() {
      }
      set needsUpdate(value) {
        if (value === true) this.version++;
      }
      get updateRange() {
        warnOnce("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");
        return this._updateRange;
      }
      setUsage(value) {
        this.usage = value;
        return this;
      }
      addUpdateRange(start, count) {
        this.updateRanges.push({ start, count });
      }
      clearUpdateRanges() {
        this.updateRanges.length = 0;
      }
      copy(source) {
        this.name = source.name;
        this.array = new source.array.constructor(source.array);
        this.itemSize = source.itemSize;
        this.count = source.count;
        this.normalized = source.normalized;
        this.usage = source.usage;
        this.gpuType = source.gpuType;
        return this;
      }
      copyAt(index1, attribute, index2) {
        index1 *= this.itemSize;
        index2 *= attribute.itemSize;
        for (let i = 0, l = this.itemSize; i < l; i++) {
          this.array[index1 + i] = attribute.array[index2 + i];
        }
        return this;
      }
      copyArray(array) {
        this.array.set(array);
        return this;
      }
      applyMatrix3(m) {
        if (this.itemSize === 2) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector2$1.fromBufferAttribute(this, i);
            _vector2$1.applyMatrix3(m);
            this.setXY(i, _vector2$1.x, _vector2$1.y);
          }
        } else if (this.itemSize === 3) {
          for (let i = 0, l = this.count; i < l; i++) {
            _vector$9.fromBufferAttribute(this, i);
            _vector$9.applyMatrix3(m);
            this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
          }
        }
        return this;
      }
      applyMatrix4(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$9.fromBufferAttribute(this, i);
          _vector$9.applyMatrix4(m);
          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
      }
      applyNormalMatrix(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$9.fromBufferAttribute(this, i);
          _vector$9.applyNormalMatrix(m);
          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
      }
      transformDirection(m) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$9.fromBufferAttribute(this, i);
          _vector$9.transformDirection(m);
          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);
        }
        return this;
      }
      set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
      }
      getComponent(index, component) {
        let value = this.array[index * this.itemSize + component];
        if (this.normalized) value = denormalize(value, this.array);
        return value;
      }
      setComponent(index, component, value) {
        if (this.normalized) value = normalize(value, this.array);
        this.array[index * this.itemSize + component] = value;
        return this;
      }
      getX(index) {
        let x = this.array[index * this.itemSize];
        if (this.normalized) x = denormalize(x, this.array);
        return x;
      }
      setX(index, x) {
        if (this.normalized) x = normalize(x, this.array);
        this.array[index * this.itemSize] = x;
        return this;
      }
      getY(index) {
        let y = this.array[index * this.itemSize + 1];
        if (this.normalized) y = denormalize(y, this.array);
        return y;
      }
      setY(index, y) {
        if (this.normalized) y = normalize(y, this.array);
        this.array[index * this.itemSize + 1] = y;
        return this;
      }
      getZ(index) {
        let z = this.array[index * this.itemSize + 2];
        if (this.normalized) z = denormalize(z, this.array);
        return z;
      }
      setZ(index, z) {
        if (this.normalized) z = normalize(z, this.array);
        this.array[index * this.itemSize + 2] = z;
        return this;
      }
      getW(index) {
        let w = this.array[index * this.itemSize + 3];
        if (this.normalized) w = denormalize(w, this.array);
        return w;
      }
      setW(index, w) {
        if (this.normalized) w = normalize(w, this.array);
        this.array[index * this.itemSize + 3] = w;
        return this;
      }
      setXY(index, x, y) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        return this;
      }
      setXYZ(index, x, y, z) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        return this;
      }
      setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        if (this.normalized) {
          x = normalize(x, this.array);
          y = normalize(y, this.array);
          z = normalize(z, this.array);
          w = normalize(w, this.array);
        }
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        this.array[index + 3] = w;
        return this;
      }
      onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
      }
      clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
      }
      toJSON() {
        const data = {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: Array.from(this.array),
          normalized: this.normalized
        };
        if (this.name !== "") data.name = this.name;
        if (this.usage !== StaticDrawUsage) data.usage = this.usage;
        return data;
      }
    };
    Uint16BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint16Array(array), itemSize, normalized);
      }
    };
    Uint32BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Uint32Array(array), itemSize, normalized);
      }
    };
    Float32BufferAttribute = class extends BufferAttribute {
      constructor(array, itemSize, normalized) {
        super(new Float32Array(array), itemSize, normalized);
      }
    };
    _id$2 = 0;
    _m1$2 = new Matrix4();
    _obj = new Object3D();
    _offset = new Vector3();
    _box$2 = new Box3();
    _boxMorphTargets = new Box3();
    _vector$8 = new Vector3();
    BufferGeometry = class _BufferGeometry extends EventDispatcher {
      constructor() {
        super();
        this.isBufferGeometry = true;
        Object.defineProperty(this, "id", { value: _id$2++ });
        this.uuid = generateUUID();
        this.name = "";
        this.type = "BufferGeometry";
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.morphTargetsRelative = false;
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        this.drawRange = { start: 0, count: Infinity };
        this.userData = {};
      }
      getIndex() {
        return this.index;
      }
      setIndex(index) {
        if (Array.isArray(index)) {
          this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
        } else {
          this.index = index;
        }
        return this;
      }
      getAttribute(name) {
        return this.attributes[name];
      }
      setAttribute(name, attribute) {
        this.attributes[name] = attribute;
        return this;
      }
      deleteAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      hasAttribute(name) {
        return this.attributes[name] !== void 0;
      }
      addGroup(start, count, materialIndex = 0) {
        this.groups.push({
          start,
          count,
          materialIndex
        });
      }
      clearGroups() {
        this.groups = [];
      }
      setDrawRange(start, count) {
        this.drawRange.start = start;
        this.drawRange.count = count;
      }
      applyMatrix4(matrix) {
        const position = this.attributes.position;
        if (position !== void 0) {
          position.applyMatrix4(matrix);
          position.needsUpdate = true;
        }
        const normal = this.attributes.normal;
        if (normal !== void 0) {
          const normalMatrix = new Matrix3().getNormalMatrix(matrix);
          normal.applyNormalMatrix(normalMatrix);
          normal.needsUpdate = true;
        }
        const tangent = this.attributes.tangent;
        if (tangent !== void 0) {
          tangent.transformDirection(matrix);
          tangent.needsUpdate = true;
        }
        if (this.boundingBox !== null) {
          this.computeBoundingBox();
        }
        if (this.boundingSphere !== null) {
          this.computeBoundingSphere();
        }
        return this;
      }
      applyQuaternion(q) {
        _m1$2.makeRotationFromQuaternion(q);
        this.applyMatrix4(_m1$2);
        return this;
      }
      rotateX(angle2) {
        _m1$2.makeRotationX(angle2);
        this.applyMatrix4(_m1$2);
        return this;
      }
      rotateY(angle2) {
        _m1$2.makeRotationY(angle2);
        this.applyMatrix4(_m1$2);
        return this;
      }
      rotateZ(angle2) {
        _m1$2.makeRotationZ(angle2);
        this.applyMatrix4(_m1$2);
        return this;
      }
      translate(x, y, z) {
        _m1$2.makeTranslation(x, y, z);
        this.applyMatrix4(_m1$2);
        return this;
      }
      scale(x, y, z) {
        _m1$2.makeScale(x, y, z);
        this.applyMatrix4(_m1$2);
        return this;
      }
      lookAt(vector) {
        _obj.lookAt(vector);
        _obj.updateMatrix();
        this.applyMatrix4(_obj.matrix);
        return this;
      }
      center() {
        this.computeBoundingBox();
        this.boundingBox.getCenter(_offset).negate();
        this.translate(_offset.x, _offset.y, _offset.z);
        return this;
      }
      setFromPoints(points) {
        const position = [];
        for (let i = 0, l = points.length; i < l; i++) {
          const point = points[i];
          position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute("position", new Float32BufferAttribute(position, 3));
        return this;
      }
      computeBoundingBox() {
        if (this.boundingBox === null) {
          this.boundingBox = new Box3();
        }
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
          console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
          this.boundingBox.set(
            new Vector3(-Infinity, -Infinity, -Infinity),
            new Vector3(Infinity, Infinity, Infinity)
          );
          return;
        }
        if (position !== void 0) {
          this.boundingBox.setFromBufferAttribute(position);
          if (morphAttributesPosition) {
            for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
              const morphAttribute = morphAttributesPosition[i];
              _box$2.setFromBufferAttribute(morphAttribute);
              if (this.morphTargetsRelative) {
                _vector$8.addVectors(this.boundingBox.min, _box$2.min);
                this.boundingBox.expandByPoint(_vector$8);
                _vector$8.addVectors(this.boundingBox.max, _box$2.max);
                this.boundingBox.expandByPoint(_vector$8);
              } else {
                this.boundingBox.expandByPoint(_box$2.min);
                this.boundingBox.expandByPoint(_box$2.max);
              }
            }
          }
        } else {
          this.boundingBox.makeEmpty();
        }
        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
          console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
        }
      }
      computeBoundingSphere() {
        if (this.boundingSphere === null) {
          this.boundingSphere = new Sphere();
        }
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
          console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
          this.boundingSphere.set(new Vector3(), Infinity);
          return;
        }
        if (position) {
          const center = this.boundingSphere.center;
          _box$2.setFromBufferAttribute(position);
          if (morphAttributesPosition) {
            for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
              const morphAttribute = morphAttributesPosition[i];
              _boxMorphTargets.setFromBufferAttribute(morphAttribute);
              if (this.morphTargetsRelative) {
                _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
                _box$2.expandByPoint(_vector$8);
                _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
                _box$2.expandByPoint(_vector$8);
              } else {
                _box$2.expandByPoint(_boxMorphTargets.min);
                _box$2.expandByPoint(_boxMorphTargets.max);
              }
            }
          }
          _box$2.getCenter(center);
          let maxRadiusSq = 0;
          for (let i = 0, il = position.count; i < il; i++) {
            _vector$8.fromBufferAttribute(position, i);
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
          }
          if (morphAttributesPosition) {
            for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
              const morphAttribute = morphAttributesPosition[i];
              const morphTargetsRelative = this.morphTargetsRelative;
              for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
                _vector$8.fromBufferAttribute(morphAttribute, j);
                if (morphTargetsRelative) {
                  _offset.fromBufferAttribute(position, j);
                  _vector$8.add(_offset);
                }
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
              }
            }
          }
          this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
          if (isNaN(this.boundingSphere.radius)) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
          }
        }
      }
      computeTangents() {
        const index = this.index;
        const attributes = this.attributes;
        if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
          console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
          return;
        }
        const positionAttribute = attributes.position;
        const normalAttribute = attributes.normal;
        const uvAttribute = attributes.uv;
        if (this.hasAttribute("tangent") === false) {
          this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
        }
        const tangentAttribute = this.getAttribute("tangent");
        const tan1 = [], tan2 = [];
        for (let i = 0; i < positionAttribute.count; i++) {
          tan1[i] = new Vector3();
          tan2[i] = new Vector3();
        }
        const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
        function handleTriangle(a, b, c) {
          vA.fromBufferAttribute(positionAttribute, a);
          vB.fromBufferAttribute(positionAttribute, b);
          vC.fromBufferAttribute(positionAttribute, c);
          uvA.fromBufferAttribute(uvAttribute, a);
          uvB.fromBufferAttribute(uvAttribute, b);
          uvC.fromBufferAttribute(uvAttribute, c);
          vB.sub(vA);
          vC.sub(vA);
          uvB.sub(uvA);
          uvC.sub(uvA);
          const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
          if (!isFinite(r)) return;
          sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
          tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
          tan1[a].add(sdir);
          tan1[b].add(sdir);
          tan1[c].add(sdir);
          tan2[a].add(tdir);
          tan2[b].add(tdir);
          tan2[c].add(tdir);
        }
        let groups = this.groups;
        if (groups.length === 0) {
          groups = [{
            start: 0,
            count: index.count
          }];
        }
        for (let i = 0, il = groups.length; i < il; ++i) {
          const group = groups[i];
          const start = group.start;
          const count = group.count;
          for (let j = start, jl = start + count; j < jl; j += 3) {
            handleTriangle(
              index.getX(j + 0),
              index.getX(j + 1),
              index.getX(j + 2)
            );
          }
        }
        const tmp2 = new Vector3(), tmp22 = new Vector3();
        const n = new Vector3(), n2 = new Vector3();
        function handleVertex(v2) {
          n.fromBufferAttribute(normalAttribute, v2);
          n2.copy(n);
          const t = tan1[v2];
          tmp2.copy(t);
          tmp2.sub(n.multiplyScalar(n.dot(t))).normalize();
          tmp22.crossVectors(n2, t);
          const test = tmp22.dot(tan2[v2]);
          const w = test < 0 ? -1 : 1;
          tangentAttribute.setXYZW(v2, tmp2.x, tmp2.y, tmp2.z, w);
        }
        for (let i = 0, il = groups.length; i < il; ++i) {
          const group = groups[i];
          const start = group.start;
          const count = group.count;
          for (let j = start, jl = start + count; j < jl; j += 3) {
            handleVertex(index.getX(j + 0));
            handleVertex(index.getX(j + 1));
            handleVertex(index.getX(j + 2));
          }
        }
      }
      computeVertexNormals() {
        const index = this.index;
        const positionAttribute = this.getAttribute("position");
        if (positionAttribute !== void 0) {
          let normalAttribute = this.getAttribute("normal");
          if (normalAttribute === void 0) {
            normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
            this.setAttribute("normal", normalAttribute);
          } else {
            for (let i = 0, il = normalAttribute.count; i < il; i++) {
              normalAttribute.setXYZ(i, 0, 0, 0);
            }
          }
          const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
          const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
          const cb = new Vector3(), ab = new Vector3();
          if (index) {
            for (let i = 0, il = index.count; i < il; i += 3) {
              const vA = index.getX(i + 0);
              const vB = index.getX(i + 1);
              const vC = index.getX(i + 2);
              pA.fromBufferAttribute(positionAttribute, vA);
              pB.fromBufferAttribute(positionAttribute, vB);
              pC.fromBufferAttribute(positionAttribute, vC);
              cb.subVectors(pC, pB);
              ab.subVectors(pA, pB);
              cb.cross(ab);
              nA.fromBufferAttribute(normalAttribute, vA);
              nB.fromBufferAttribute(normalAttribute, vB);
              nC.fromBufferAttribute(normalAttribute, vC);
              nA.add(cb);
              nB.add(cb);
              nC.add(cb);
              normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
              normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
              normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
            }
          } else {
            for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
              pA.fromBufferAttribute(positionAttribute, i + 0);
              pB.fromBufferAttribute(positionAttribute, i + 1);
              pC.fromBufferAttribute(positionAttribute, i + 2);
              cb.subVectors(pC, pB);
              ab.subVectors(pA, pB);
              cb.cross(ab);
              normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
              normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
              normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
            }
          }
          this.normalizeNormals();
          normalAttribute.needsUpdate = true;
        }
      }
      normalizeNormals() {
        const normals = this.attributes.normal;
        for (let i = 0, il = normals.count; i < il; i++) {
          _vector$8.fromBufferAttribute(normals, i);
          _vector$8.normalize();
          normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
      }
      toNonIndexed() {
        function convertBufferAttribute(attribute, indices2) {
          const array = attribute.array;
          const itemSize = attribute.itemSize;
          const normalized = attribute.normalized;
          const array2 = new array.constructor(indices2.length * itemSize);
          let index = 0, index2 = 0;
          for (let i = 0, l = indices2.length; i < l; i++) {
            if (attribute.isInterleavedBufferAttribute) {
              index = indices2[i] * attribute.data.stride + attribute.offset;
            } else {
              index = indices2[i] * itemSize;
            }
            for (let j = 0; j < itemSize; j++) {
              array2[index2++] = array[index++];
            }
          }
          return new BufferAttribute(array2, itemSize, normalized);
        }
        if (this.index === null) {
          console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
          return this;
        }
        const geometry2 = new _BufferGeometry();
        const indices = this.index.array;
        const attributes = this.attributes;
        for (const name in attributes) {
          const attribute = attributes[name];
          const newAttribute = convertBufferAttribute(attribute, indices);
          geometry2.setAttribute(name, newAttribute);
        }
        const morphAttributes = this.morphAttributes;
        for (const name in morphAttributes) {
          const morphArray = [];
          const morphAttribute = morphAttributes[name];
          for (let i = 0, il = morphAttribute.length; i < il; i++) {
            const attribute = morphAttribute[i];
            const newAttribute = convertBufferAttribute(attribute, indices);
            morphArray.push(newAttribute);
          }
          geometry2.morphAttributes[name] = morphArray;
        }
        geometry2.morphTargetsRelative = this.morphTargetsRelative;
        const groups = this.groups;
        for (let i = 0, l = groups.length; i < l; i++) {
          const group = groups[i];
          geometry2.addGroup(group.start, group.count, group.materialIndex);
        }
        return geometry2;
      }
      toJSON() {
        const data = {
          metadata: {
            version: 4.6,
            type: "BufferGeometry",
            generator: "BufferGeometry.toJSON"
          }
        };
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== "") data.name = this.name;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        if (this.parameters !== void 0) {
          const parameters = this.parameters;
          for (const key in parameters) {
            if (parameters[key] !== void 0) data[key] = parameters[key];
          }
          return data;
        }
        data.data = { attributes: {} };
        const index = this.index;
        if (index !== null) {
          data.data.index = {
            type: index.array.constructor.name,
            array: Array.prototype.slice.call(index.array)
          };
        }
        const attributes = this.attributes;
        for (const key in attributes) {
          const attribute = attributes[key];
          data.data.attributes[key] = attribute.toJSON(data.data);
        }
        const morphAttributes = {};
        let hasMorphAttributes = false;
        for (const key in this.morphAttributes) {
          const attributeArray = this.morphAttributes[key];
          const array = [];
          for (let i = 0, il = attributeArray.length; i < il; i++) {
            const attribute = attributeArray[i];
            array.push(attribute.toJSON(data.data));
          }
          if (array.length > 0) {
            morphAttributes[key] = array;
            hasMorphAttributes = true;
          }
        }
        if (hasMorphAttributes) {
          data.data.morphAttributes = morphAttributes;
          data.data.morphTargetsRelative = this.morphTargetsRelative;
        }
        const groups = this.groups;
        if (groups.length > 0) {
          data.data.groups = JSON.parse(JSON.stringify(groups));
        }
        const boundingSphere = this.boundingSphere;
        if (boundingSphere !== null) {
          data.data.boundingSphere = {
            center: boundingSphere.center.toArray(),
            radius: boundingSphere.radius
          };
        }
        return data;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.index = null;
        this.attributes = {};
        this.morphAttributes = {};
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        const data = {};
        this.name = source.name;
        const index = source.index;
        if (index !== null) {
          this.setIndex(index.clone(data));
        }
        const attributes = source.attributes;
        for (const name in attributes) {
          const attribute = attributes[name];
          this.setAttribute(name, attribute.clone(data));
        }
        const morphAttributes = source.morphAttributes;
        for (const name in morphAttributes) {
          const array = [];
          const morphAttribute = morphAttributes[name];
          for (let i = 0, l = morphAttribute.length; i < l; i++) {
            array.push(morphAttribute[i].clone(data));
          }
          this.morphAttributes[name] = array;
        }
        this.morphTargetsRelative = source.morphTargetsRelative;
        const groups = source.groups;
        for (let i = 0, l = groups.length; i < l; i++) {
          const group = groups[i];
          this.addGroup(group.start, group.count, group.materialIndex);
        }
        const boundingBox = source.boundingBox;
        if (boundingBox !== null) {
          this.boundingBox = boundingBox.clone();
        }
        const boundingSphere = source.boundingSphere;
        if (boundingSphere !== null) {
          this.boundingSphere = boundingSphere.clone();
        }
        this.drawRange.start = source.drawRange.start;
        this.drawRange.count = source.drawRange.count;
        this.userData = source.userData;
        return this;
      }
      dispose() {
        this.dispatchEvent({ type: "dispose" });
      }
    };
    _inverseMatrix$3 = new Matrix4();
    _ray$3 = new Ray();
    _sphere$6 = new Sphere();
    _sphereHitAt = new Vector3();
    _vA$1 = new Vector3();
    _vB$1 = new Vector3();
    _vC$1 = new Vector3();
    _tempA = new Vector3();
    _morphA = new Vector3();
    _uvA$1 = new Vector2();
    _uvB$1 = new Vector2();
    _uvC$1 = new Vector2();
    _normalA = new Vector3();
    _normalB = new Vector3();
    _normalC = new Vector3();
    _intersectionPoint = new Vector3();
    _intersectionPointWorld = new Vector3();
    Mesh = class extends Object3D {
      constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
        super();
        this.isMesh = true;
        this.type = "Mesh";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        if (source.morphTargetInfluences !== void 0) {
          this.morphTargetInfluences = source.morphTargetInfluences.slice();
        }
        if (source.morphTargetDictionary !== void 0) {
          this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
        }
        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
        this.geometry = source.geometry;
        return this;
      }
      updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      }
      getVertexPosition(index, target) {
        const geometry = this.geometry;
        const position = geometry.attributes.position;
        const morphPosition = geometry.morphAttributes.position;
        const morphTargetsRelative = geometry.morphTargetsRelative;
        target.fromBufferAttribute(position, index);
        const morphInfluences = this.morphTargetInfluences;
        if (morphPosition && morphInfluences) {
          _morphA.set(0, 0, 0);
          for (let i = 0, il = morphPosition.length; i < il; i++) {
            const influence = morphInfluences[i];
            const morphAttribute = morphPosition[i];
            if (influence === 0) continue;
            _tempA.fromBufferAttribute(morphAttribute, index);
            if (morphTargetsRelative) {
              _morphA.addScaledVector(_tempA, influence);
            } else {
              _morphA.addScaledVector(_tempA.sub(target), influence);
            }
          }
          target.add(_morphA);
        }
        return target;
      }
      raycast(raycaster, intersects2) {
        const geometry = this.geometry;
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === void 0) return;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$6.copy(geometry.boundingSphere);
        _sphere$6.applyMatrix4(matrixWorld);
        _ray$3.copy(raycaster.ray).recast(raycaster.near);
        if (_sphere$6.containsPoint(_ray$3.origin) === false) {
          if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
          if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
        }
        _inverseMatrix$3.copy(matrixWorld).invert();
        _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
        if (geometry.boundingBox !== null) {
          if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
        }
        this._computeIntersections(raycaster, intersects2, _ray$3);
      }
      _computeIntersections(raycaster, intersects2, rayLocalSpace) {
        let intersection;
        const geometry = this.geometry;
        const material = this.material;
        const index = geometry.index;
        const position = geometry.attributes.position;
        const uv = geometry.attributes.uv;
        const uv1 = geometry.attributes.uv1;
        const normal = geometry.attributes.normal;
        const groups = geometry.groups;
        const drawRange = geometry.drawRange;
        if (index !== null) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group = groups[i];
              const groupMaterial = material[group.materialIndex];
              const start = Math.max(group.start, drawRange.start);
              const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = index.getX(j);
                const b = index.getX(j + 1);
                const c = index.getX(j + 2);
                intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(index.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = index.getX(i);
              const b = index.getX(i + 1);
              const c = index.getX(i + 2);
              intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        } else if (position !== void 0) {
          if (Array.isArray(material)) {
            for (let i = 0, il = groups.length; i < il; i++) {
              const group = groups[i];
              const groupMaterial = material[group.materialIndex];
              const start = Math.max(group.start, drawRange.start);
              const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
              for (let j = start, jl = end; j < jl; j += 3) {
                const a = j;
                const b = j + 1;
                const c = j + 2;
                intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3);
                  intersection.face.materialIndex = group.materialIndex;
                  intersects2.push(intersection);
                }
              }
            }
          } else {
            const start = Math.max(0, drawRange.start);
            const end = Math.min(position.count, drawRange.start + drawRange.count);
            for (let i = start, il = end; i < il; i += 3) {
              const a = i;
              const b = i + 1;
              const c = i + 2;
              intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3);
                intersects2.push(intersection);
              }
            }
          }
        }
      }
    };
    BoxGeometry = class _BoxGeometry extends BufferGeometry {
      constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
        super();
        this.type = "BoxGeometry";
        this.parameters = {
          width,
          height,
          depth,
          widthSegments,
          heightSegments,
          depthSegments
        };
        const scope = this;
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let numberOfVertices = 0;
        let groupStart = 0;
        buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
        buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
        buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
        buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
        buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
        buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function buildPlane(u, v2, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
          const segmentWidth = width2 / gridX;
          const segmentHeight = height2 / gridY;
          const widthHalf = width2 / 2;
          const heightHalf = height2 / 2;
          const depthHalf = depth2 / 2;
          const gridX1 = gridX + 1;
          const gridY1 = gridY + 1;
          let vertexCounter = 0;
          let groupCount = 0;
          const vector = new Vector3();
          for (let iy = 0; iy < gridY1; iy++) {
            const y = iy * segmentHeight - heightHalf;
            for (let ix = 0; ix < gridX1; ix++) {
              const x = ix * segmentWidth - widthHalf;
              vector[u] = x * udir;
              vector[v2] = y * vdir;
              vector[w] = depthHalf;
              vertices.push(vector.x, vector.y, vector.z);
              vector[u] = 0;
              vector[v2] = 0;
              vector[w] = depth2 > 0 ? 1 : -1;
              normals.push(vector.x, vector.y, vector.z);
              uvs.push(ix / gridX);
              uvs.push(1 - iy / gridY);
              vertexCounter += 1;
            }
          }
          for (let iy = 0; iy < gridY; iy++) {
            for (let ix = 0; ix < gridX; ix++) {
              const a = numberOfVertices + ix + gridX1 * iy;
              const b = numberOfVertices + ix + gridX1 * (iy + 1);
              const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
              const d2 = numberOfVertices + (ix + 1) + gridX1 * iy;
              indices.push(a, b, d2);
              indices.push(b, c, d2);
              groupCount += 6;
            }
          }
          scope.addGroup(groupStart, groupCount, materialIndex);
          groupStart += groupCount;
          numberOfVertices += vertexCounter;
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
      }
    };
    Camera = class extends Object3D {
      constructor() {
        super();
        this.isCamera = true;
        this.type = "Camera";
        this.matrixWorldInverse = new Matrix4();
        this.projectionMatrix = new Matrix4();
        this.projectionMatrixInverse = new Matrix4();
        this.coordinateSystem = WebGLCoordinateSystem;
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.matrixWorldInverse.copy(source.matrixWorldInverse);
        this.projectionMatrix.copy(source.projectionMatrix);
        this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
        this.coordinateSystem = source.coordinateSystem;
        return this;
      }
      getWorldDirection(target) {
        return super.getWorldDirection(target).negate();
      }
      updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
      }
      updateWorldMatrix(updateParents, updateChildren) {
        super.updateWorldMatrix(updateParents, updateChildren);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    _v3$1 = new Vector3();
    _minTarget = new Vector2();
    _maxTarget = new Vector2();
    PerspectiveCamera = class extends Camera {
      constructor(fov = 50, aspect = 1, near = 0.1, far = 2e3) {
        super();
        this.isPerspectiveCamera = true;
        this.type = "PerspectiveCamera";
        this.fov = fov;
        this.zoom = 1;
        this.near = near;
        this.far = far;
        this.focus = 10;
        this.aspect = aspect;
        this.view = null;
        this.filmGauge = 35;
        this.filmOffset = 0;
        this.updateProjectionMatrix();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.fov = source.fov;
        this.zoom = source.zoom;
        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;
        this.aspect = source.aspect;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;
        return this;
      }
      /**
       * Sets the FOV by focal length in respect to the current .filmGauge.
       *
       * The default film gauge is 35, so that the focal length can be specified for
       * a 35mm (full frame) camera.
       *
       * Values for focal length and film gauge must have the same unit.
       */
      setFocalLength(focalLength) {
        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
        this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
      }
      /**
       * Calculates the focal length from the current .fov and .filmGauge.
       */
      getFocalLength() {
        const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
      }
      getEffectiveFOV() {
        return RAD2DEG * 2 * Math.atan(
          Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
        );
      }
      getFilmWidth() {
        return this.filmGauge * Math.min(this.aspect, 1);
      }
      getFilmHeight() {
        return this.filmGauge / Math.max(this.aspect, 1);
      }
      /**
       * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
       * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
       */
      getViewBounds(distance2, minTarget, maxTarget) {
        _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
        minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance2 / _v3$1.z);
        _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
        maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance2 / _v3$1.z);
      }
      /**
       * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
       * Copies the result into the target Vector2, where x is width and y is height.
       */
      getViewSize(distance2, target) {
        this.getViewBounds(distance2, _minTarget, _maxTarget);
        return target.subVectors(_maxTarget, _minTarget);
      }
      /**
       * Sets an offset in a larger frustum. This is useful for multi-window or
       * multi-monitor/multi-machine setups.
       *
       * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
       * the monitors are in grid like this
       *
       *   +---+---+---+
       *   | A | B | C |
       *   +---+---+---+
       *   | D | E | F |
       *   +---+---+---+
       *
       * then for each monitor you would call it like this
       *
       *   const w = 1920;
       *   const h = 1080;
       *   const fullWidth = w * 3;
       *   const fullHeight = h * 2;
       *
       *   --A--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
       *   --B--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
       *   --C--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
       *   --D--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
       *   --E--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
       *   --F--
       *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
       *
       *   Note there is no reason monitors have to be the same size or in a grid.
       */
      setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        this.aspect = fullWidth / fullHeight;
        if (this.view === null) {
          this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          };
        }
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
      }
      clearViewOffset() {
        if (this.view !== null) {
          this.view.enabled = false;
        }
        this.updateProjectionMatrix();
      }
      updateProjectionMatrix() {
        const near = this.near;
        let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
        let height = 2 * top;
        let width = this.aspect * height;
        let left = -0.5 * width;
        const view = this.view;
        if (this.view !== null && this.view.enabled) {
          const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
          left += view.offsetX * width / fullWidth;
          top -= view.offsetY * height / fullHeight;
          width *= view.width / fullWidth;
          height *= view.height / fullHeight;
        }
        const skew = this.filmOffset;
        if (skew !== 0) left += near * skew / this.getFilmWidth();
        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.fov = this.fov;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.aspect = this.aspect;
        if (this.view !== null) data.object.view = Object.assign({}, this.view);
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        return data;
      }
    };
    CubeTexture = class extends Texture {
      constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {
        images = images !== void 0 ? images : [];
        mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
        super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
        this.isCubeTexture = true;
        this.flipY = false;
      }
      get images() {
        return this.image;
      }
      set images(value) {
        this.image = value;
      }
    };
    _vector1 = new Vector3();
    _vector2 = new Vector3();
    _normalMatrix = new Matrix3();
    Plane = class {
      constructor(normal = new Vector3(1, 0, 0), constant = 0) {
        this.isPlane = true;
        this.normal = normal;
        this.constant = constant;
      }
      set(normal, constant) {
        this.normal.copy(normal);
        this.constant = constant;
        return this;
      }
      setComponents(x, y, z, w) {
        this.normal.set(x, y, z);
        this.constant = w;
        return this;
      }
      setFromNormalAndCoplanarPoint(normal, point) {
        this.normal.copy(normal);
        this.constant = -point.dot(this.normal);
        return this;
      }
      setFromCoplanarPoints(a, b, c) {
        const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
        this.setFromNormalAndCoplanarPoint(normal, a);
        return this;
      }
      copy(plane) {
        this.normal.copy(plane.normal);
        this.constant = plane.constant;
        return this;
      }
      normalize() {
        const inverseNormalLength = 1 / this.normal.length();
        this.normal.multiplyScalar(inverseNormalLength);
        this.constant *= inverseNormalLength;
        return this;
      }
      negate() {
        this.constant *= -1;
        this.normal.negate();
        return this;
      }
      distanceToPoint(point) {
        return this.normal.dot(point) + this.constant;
      }
      distanceToSphere(sphere) {
        return this.distanceToPoint(sphere.center) - sphere.radius;
      }
      projectPoint(point, target) {
        return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
      }
      intersectLine(line, target) {
        const direction = line.delta(_vector1);
        const denominator = this.normal.dot(direction);
        if (denominator === 0) {
          if (this.distanceToPoint(line.start) === 0) {
            return target.copy(line.start);
          }
          return null;
        }
        const t = -(line.start.dot(this.normal) + this.constant) / denominator;
        if (t < 0 || t > 1) {
          return null;
        }
        return target.copy(line.start).addScaledVector(direction, t);
      }
      intersectsLine(line) {
        const startSign = this.distanceToPoint(line.start);
        const endSign = this.distanceToPoint(line.end);
        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
      }
      intersectsBox(box) {
        return box.intersectsPlane(this);
      }
      intersectsSphere(sphere) {
        return sphere.intersectsPlane(this);
      }
      coplanarPoint(target) {
        return target.copy(this.normal).multiplyScalar(-this.constant);
      }
      applyMatrix4(matrix, optionalNormalMatrix) {
        const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
        const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
        const normal = this.normal.applyMatrix3(normalMatrix).normalize();
        this.constant = -referencePoint.dot(normal);
        return this;
      }
      translate(offset) {
        this.constant -= offset.dot(this.normal);
        return this;
      }
      equals(plane) {
        return plane.normal.equals(this.normal) && plane.constant === this.constant;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    _sphere$5 = new Sphere();
    _vector$7 = new Vector3();
    Frustum = class {
      constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
        this.planes = [p0, p1, p2, p3, p4, p5];
      }
      set(p0, p1, p2, p3, p4, p5) {
        const planes = this.planes;
        planes[0].copy(p0);
        planes[1].copy(p1);
        planes[2].copy(p2);
        planes[3].copy(p3);
        planes[4].copy(p4);
        planes[5].copy(p5);
        return this;
      }
      copy(frustum) {
        const planes = this.planes;
        for (let i = 0; i < 6; i++) {
          planes[i].copy(frustum.planes[i]);
        }
        return this;
      }
      setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
        const planes = this.planes;
        const me = m.elements;
        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
        if (coordinateSystem === WebGLCoordinateSystem) {
          planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
        } else if (coordinateSystem === WebGPUCoordinateSystem) {
          planes[5].setComponents(me2, me6, me10, me14).normalize();
        } else {
          throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
        }
        return this;
      }
      intersectsObject(object) {
        if (object.boundingSphere !== void 0) {
          if (object.boundingSphere === null) object.computeBoundingSphere();
          _sphere$5.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
        } else {
          const geometry = object.geometry;
          if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
          _sphere$5.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
        }
        return this.intersectsSphere(_sphere$5);
      }
      intersectsSprite(sprite) {
        _sphere$5.center.set(0, 0, 0);
        _sphere$5.radius = 0.7071067811865476;
        _sphere$5.applyMatrix4(sprite.matrixWorld);
        return this.intersectsSphere(_sphere$5);
      }
      intersectsSphere(sphere) {
        const planes = this.planes;
        const center = sphere.center;
        const negRadius = -sphere.radius;
        for (let i = 0; i < 6; i++) {
          const distance2 = planes[i].distanceToPoint(center);
          if (distance2 < negRadius) {
            return false;
          }
        }
        return true;
      }
      intersectsBox(box) {
        const planes = this.planes;
        for (let i = 0; i < 6; i++) {
          const plane = planes[i];
          _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
          _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
          _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
          if (plane.distanceToPoint(_vector$7) < 0) {
            return false;
          }
        }
        return true;
      }
      containsPoint(point) {
        const planes = this.planes;
        for (let i = 0; i < 6; i++) {
          if (planes[i].distanceToPoint(point) < 0) {
            return false;
          }
        }
        return true;
      }
      clone() {
        return new this.constructor().copy(this);
      }
    };
    PlaneGeometry = class _PlaneGeometry extends BufferGeometry {
      constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
        super();
        this.type = "PlaneGeometry";
        this.parameters = {
          width,
          height,
          widthSegments,
          heightSegments
        };
        const width_half = width / 2;
        const height_half = height / 2;
        const gridX = Math.floor(widthSegments);
        const gridY = Math.floor(heightSegments);
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        const segment_width = width / gridX;
        const segment_height = height / gridY;
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segment_height - height_half;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segment_width - width_half;
            vertices.push(x, -y, 0);
            normals.push(0, 0, 1);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = ix + gridX1 * iy;
            const b = ix + gridX1 * (iy + 1);
            const c = ix + 1 + gridX1 * (iy + 1);
            const d2 = ix + 1 + gridX1 * iy;
            indices.push(a, b, d2);
            indices.push(b, c, d2);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
      }
    };
    alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
    alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
    alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
    alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
    alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
    alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
    aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
    aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
    batching_pars_vertex = "#ifdef USE_BATCHING\n	attribute float batchId;\n	uniform highp sampler2D batchingTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
    batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif";
    begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
    beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
    bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
    iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
    bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
    clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
    clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
    clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
    clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
    color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
    color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
    color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
    color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
    common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
    cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
    defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
    displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
    displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
    emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
    emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
    colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
    colorspace_pars_fragment = "\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return sRGBTransferOETF( value );\n}";
    envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
    envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
    envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
    envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
    envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
    fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
    fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
    fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
    fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
    gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
    lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
    lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
    lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
    lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
    envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
    lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
    lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
    lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
    lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
    lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
    lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
    lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
    lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
    lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
    logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
    logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
    logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
    logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
    map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
    map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
    map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
    map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
    metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
    metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
    morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[MORPHTARGETS_COUNT];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
    morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
    morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
    morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n	#endif\n	#ifdef MORPHTARGETS_TEXTURE\n		#ifndef USE_INSTANCING_MORPH\n			uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		#endif\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
    morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
    normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
    normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
    normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
    normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
    normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
    normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
    clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
    clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
    clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
    iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
    opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
    packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
    premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
    project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
    dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
    dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
    roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
    roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
    shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return shadow;\n	}\n#endif";
    shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
    shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
    shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
    skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
    skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
    skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
    skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
    specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
    specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
    tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
    tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
    transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
    transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n		\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n		\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		\n		#else\n		\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
    uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
    uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
    uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
    worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
    vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
    fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
    vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
    fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
    vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
    fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
    vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
    fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
    vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
    fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
    vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
    fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
    vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
    fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
    vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
    fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
    fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
    fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
    vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
    fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
    vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
    fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
    vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
    fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
    vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
    fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
    ShaderChunk = {
      alphahash_fragment,
      alphahash_pars_fragment,
      alphamap_fragment,
      alphamap_pars_fragment,
      alphatest_fragment,
      alphatest_pars_fragment,
      aomap_fragment,
      aomap_pars_fragment,
      batching_pars_vertex,
      batching_vertex,
      begin_vertex,
      beginnormal_vertex,
      bsdfs,
      iridescence_fragment,
      bumpmap_pars_fragment,
      clipping_planes_fragment,
      clipping_planes_pars_fragment,
      clipping_planes_pars_vertex,
      clipping_planes_vertex,
      color_fragment,
      color_pars_fragment,
      color_pars_vertex,
      color_vertex,
      common,
      cube_uv_reflection_fragment,
      defaultnormal_vertex,
      displacementmap_pars_vertex,
      displacementmap_vertex,
      emissivemap_fragment,
      emissivemap_pars_fragment,
      colorspace_fragment,
      colorspace_pars_fragment,
      envmap_fragment,
      envmap_common_pars_fragment,
      envmap_pars_fragment,
      envmap_pars_vertex,
      envmap_physical_pars_fragment,
      envmap_vertex,
      fog_vertex,
      fog_pars_vertex,
      fog_fragment,
      fog_pars_fragment,
      gradientmap_pars_fragment,
      lightmap_pars_fragment,
      lights_lambert_fragment,
      lights_lambert_pars_fragment,
      lights_pars_begin,
      lights_toon_fragment,
      lights_toon_pars_fragment,
      lights_phong_fragment,
      lights_phong_pars_fragment,
      lights_physical_fragment,
      lights_physical_pars_fragment,
      lights_fragment_begin,
      lights_fragment_maps,
      lights_fragment_end,
      logdepthbuf_fragment,
      logdepthbuf_pars_fragment,
      logdepthbuf_pars_vertex,
      logdepthbuf_vertex,
      map_fragment,
      map_pars_fragment,
      map_particle_fragment,
      map_particle_pars_fragment,
      metalnessmap_fragment,
      metalnessmap_pars_fragment,
      morphinstance_vertex,
      morphcolor_vertex,
      morphnormal_vertex,
      morphtarget_pars_vertex,
      morphtarget_vertex,
      normal_fragment_begin,
      normal_fragment_maps,
      normal_pars_fragment,
      normal_pars_vertex,
      normal_vertex,
      normalmap_pars_fragment,
      clearcoat_normal_fragment_begin,
      clearcoat_normal_fragment_maps,
      clearcoat_pars_fragment,
      iridescence_pars_fragment,
      opaque_fragment,
      packing,
      premultiplied_alpha_fragment,
      project_vertex,
      dithering_fragment,
      dithering_pars_fragment,
      roughnessmap_fragment,
      roughnessmap_pars_fragment,
      shadowmap_pars_fragment,
      shadowmap_pars_vertex,
      shadowmap_vertex,
      shadowmask_pars_fragment,
      skinbase_vertex,
      skinning_pars_vertex,
      skinning_vertex,
      skinnormal_vertex,
      specularmap_fragment,
      specularmap_pars_fragment,
      tonemapping_fragment,
      tonemapping_pars_fragment,
      transmission_fragment,
      transmission_pars_fragment,
      uv_pars_fragment,
      uv_pars_vertex,
      uv_vertex,
      worldpos_vertex,
      background_vert: vertex$h,
      background_frag: fragment$h,
      backgroundCube_vert: vertex$g,
      backgroundCube_frag: fragment$g,
      cube_vert: vertex$f,
      cube_frag: fragment$f,
      depth_vert: vertex$e,
      depth_frag: fragment$e,
      distanceRGBA_vert: vertex$d,
      distanceRGBA_frag: fragment$d,
      equirect_vert: vertex$c,
      equirect_frag: fragment$c,
      linedashed_vert: vertex$b,
      linedashed_frag: fragment$b,
      meshbasic_vert: vertex$a,
      meshbasic_frag: fragment$a,
      meshlambert_vert: vertex$9,
      meshlambert_frag: fragment$9,
      meshmatcap_vert: vertex$8,
      meshmatcap_frag: fragment$8,
      meshnormal_vert: vertex$7,
      meshnormal_frag: fragment$7,
      meshphong_vert: vertex$6,
      meshphong_frag: fragment$6,
      meshphysical_vert: vertex$5,
      meshphysical_frag: fragment$5,
      meshtoon_vert: vertex$4,
      meshtoon_frag: fragment$4,
      points_vert: vertex$3,
      points_frag: fragment$3,
      shadow_vert: vertex$2,
      shadow_frag: fragment$2,
      sprite_vert: vertex$1,
      sprite_frag: fragment$1
    };
    UniformsLib = {
      common: {
        diffuse: { value: new Color(16777215) },
        opacity: { value: 1 },
        map: { value: null },
        mapTransform: { value: new Matrix3() },
        alphaMap: { value: null },
        alphaMapTransform: { value: new Matrix3() },
        alphaTest: { value: 0 }
      },
      specularmap: {
        specularMap: { value: null },
        specularMapTransform: { value: new Matrix3() }
      },
      envmap: {
        envMap: { value: null },
        envMapRotation: { value: new Matrix3() },
        flipEnvMap: { value: -1 },
        reflectivity: { value: 1 },
        // basic, lambert, phong
        ior: { value: 1.5 },
        // physical
        refractionRatio: { value: 0.98 }
        // basic, lambert, phong
      },
      aomap: {
        aoMap: { value: null },
        aoMapIntensity: { value: 1 },
        aoMapTransform: { value: new Matrix3() }
      },
      lightmap: {
        lightMap: { value: null },
        lightMapIntensity: { value: 1 },
        lightMapTransform: { value: new Matrix3() }
      },
      bumpmap: {
        bumpMap: { value: null },
        bumpMapTransform: { value: new Matrix3() },
        bumpScale: { value: 1 }
      },
      normalmap: {
        normalMap: { value: null },
        normalMapTransform: { value: new Matrix3() },
        normalScale: { value: new Vector2(1, 1) }
      },
      displacementmap: {
        displacementMap: { value: null },
        displacementMapTransform: { value: new Matrix3() },
        displacementScale: { value: 1 },
        displacementBias: { value: 0 }
      },
      emissivemap: {
        emissiveMap: { value: null },
        emissiveMapTransform: { value: new Matrix3() }
      },
      metalnessmap: {
        metalnessMap: { value: null },
        metalnessMapTransform: { value: new Matrix3() }
      },
      roughnessmap: {
        roughnessMap: { value: null },
        roughnessMapTransform: { value: new Matrix3() }
      },
      gradientmap: {
        gradientMap: { value: null }
      },
      fog: {
        fogDensity: { value: 25e-5 },
        fogNear: { value: 1 },
        fogFar: { value: 2e3 },
        fogColor: { value: new Color(16777215) }
      },
      lights: {
        ambientLightColor: { value: [] },
        lightProbe: { value: [] },
        directionalLights: { value: [], properties: {
          direction: {},
          color: {}
        } },
        directionalLightShadows: { value: [], properties: {
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        } },
        directionalShadowMap: { value: [] },
        directionalShadowMatrix: { value: [] },
        spotLights: { value: [], properties: {
          color: {},
          position: {},
          direction: {},
          distance: {},
          coneCos: {},
          penumbraCos: {},
          decay: {}
        } },
        spotLightShadows: { value: [], properties: {
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {}
        } },
        spotLightMap: { value: [] },
        spotShadowMap: { value: [] },
        spotLightMatrix: { value: [] },
        pointLights: { value: [], properties: {
          color: {},
          position: {},
          decay: {},
          distance: {}
        } },
        pointLightShadows: { value: [], properties: {
          shadowBias: {},
          shadowNormalBias: {},
          shadowRadius: {},
          shadowMapSize: {},
          shadowCameraNear: {},
          shadowCameraFar: {}
        } },
        pointShadowMap: { value: [] },
        pointShadowMatrix: { value: [] },
        hemisphereLights: { value: [], properties: {
          direction: {},
          skyColor: {},
          groundColor: {}
        } },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: { value: [], properties: {
          color: {},
          position: {},
          width: {},
          height: {}
        } },
        ltc_1: { value: null },
        ltc_2: { value: null }
      },
      points: {
        diffuse: { value: new Color(16777215) },
        opacity: { value: 1 },
        size: { value: 1 },
        scale: { value: 1 },
        map: { value: null },
        alphaMap: { value: null },
        alphaMapTransform: { value: new Matrix3() },
        alphaTest: { value: 0 },
        uvTransform: { value: new Matrix3() }
      },
      sprite: {
        diffuse: { value: new Color(16777215) },
        opacity: { value: 1 },
        center: { value: new Vector2(0.5, 0.5) },
        rotation: { value: 0 },
        map: { value: null },
        mapTransform: { value: new Matrix3() },
        alphaMap: { value: null },
        alphaMapTransform: { value: new Matrix3() },
        alphaTest: { value: 0 }
      }
    };
    ShaderLib = {
      basic: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.specularmap,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.meshbasic_vert,
        fragmentShader: ShaderChunk.meshbasic_frag
      },
      lambert: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.specularmap,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color(0) }
          }
        ]),
        vertexShader: ShaderChunk.meshlambert_vert,
        fragmentShader: ShaderChunk.meshlambert_frag
      },
      phong: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.specularmap,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color(0) },
            specular: { value: new Color(1118481) },
            shininess: { value: 30 }
          }
        ]),
        vertexShader: ShaderChunk.meshphong_vert,
        fragmentShader: ShaderChunk.meshphong_frag
      },
      standard: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.envmap,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.roughnessmap,
          UniformsLib.metalnessmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color(0) },
            roughness: { value: 1 },
            metalness: { value: 0 },
            envMapIntensity: { value: 1 }
          }
        ]),
        vertexShader: ShaderChunk.meshphysical_vert,
        fragmentShader: ShaderChunk.meshphysical_frag
      },
      toon: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.aomap,
          UniformsLib.lightmap,
          UniformsLib.emissivemap,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.gradientmap,
          UniformsLib.fog,
          UniformsLib.lights,
          {
            emissive: { value: new Color(0) }
          }
        ]),
        vertexShader: ShaderChunk.meshtoon_vert,
        fragmentShader: ShaderChunk.meshtoon_frag
      },
      matcap: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          UniformsLib.fog,
          {
            matcap: { value: null }
          }
        ]),
        vertexShader: ShaderChunk.meshmatcap_vert,
        fragmentShader: ShaderChunk.meshmatcap_frag
      },
      points: {
        uniforms: mergeUniforms([
          UniformsLib.points,
          UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.points_vert,
        fragmentShader: ShaderChunk.points_frag
      },
      dashed: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.fog,
          {
            scale: { value: 1 },
            dashSize: { value: 1 },
            totalSize: { value: 2 }
          }
        ]),
        vertexShader: ShaderChunk.linedashed_vert,
        fragmentShader: ShaderChunk.linedashed_frag
      },
      depth: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.displacementmap
        ]),
        vertexShader: ShaderChunk.depth_vert,
        fragmentShader: ShaderChunk.depth_frag
      },
      normal: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.bumpmap,
          UniformsLib.normalmap,
          UniformsLib.displacementmap,
          {
            opacity: { value: 1 }
          }
        ]),
        vertexShader: ShaderChunk.meshnormal_vert,
        fragmentShader: ShaderChunk.meshnormal_frag
      },
      sprite: {
        uniforms: mergeUniforms([
          UniformsLib.sprite,
          UniformsLib.fog
        ]),
        vertexShader: ShaderChunk.sprite_vert,
        fragmentShader: ShaderChunk.sprite_frag
      },
      background: {
        uniforms: {
          uvTransform: { value: new Matrix3() },
          t2D: { value: null },
          backgroundIntensity: { value: 1 }
        },
        vertexShader: ShaderChunk.background_vert,
        fragmentShader: ShaderChunk.background_frag
      },
      backgroundCube: {
        uniforms: {
          envMap: { value: null },
          flipEnvMap: { value: -1 },
          backgroundBlurriness: { value: 0 },
          backgroundIntensity: { value: 1 },
          backgroundRotation: { value: new Matrix3() }
        },
        vertexShader: ShaderChunk.backgroundCube_vert,
        fragmentShader: ShaderChunk.backgroundCube_frag
      },
      cube: {
        uniforms: {
          tCube: { value: null },
          tFlip: { value: -1 },
          opacity: { value: 1 }
        },
        vertexShader: ShaderChunk.cube_vert,
        fragmentShader: ShaderChunk.cube_frag
      },
      equirect: {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: ShaderChunk.equirect_vert,
        fragmentShader: ShaderChunk.equirect_frag
      },
      distanceRGBA: {
        uniforms: mergeUniforms([
          UniformsLib.common,
          UniformsLib.displacementmap,
          {
            referencePosition: { value: new Vector3() },
            nearDistance: { value: 1 },
            farDistance: { value: 1e3 }
          }
        ]),
        vertexShader: ShaderChunk.distanceRGBA_vert,
        fragmentShader: ShaderChunk.distanceRGBA_frag
      },
      shadow: {
        uniforms: mergeUniforms([
          UniformsLib.lights,
          UniformsLib.fog,
          {
            color: { value: new Color(0) },
            opacity: { value: 1 }
          }
        ]),
        vertexShader: ShaderChunk.shadow_vert,
        fragmentShader: ShaderChunk.shadow_frag
      }
    };
    ShaderLib.physical = {
      uniforms: mergeUniforms([
        ShaderLib.standard.uniforms,
        {
          clearcoat: { value: 0 },
          clearcoatMap: { value: null },
          clearcoatMapTransform: { value: new Matrix3() },
          clearcoatNormalMap: { value: null },
          clearcoatNormalMapTransform: { value: new Matrix3() },
          clearcoatNormalScale: { value: new Vector2(1, 1) },
          clearcoatRoughness: { value: 0 },
          clearcoatRoughnessMap: { value: null },
          clearcoatRoughnessMapTransform: { value: new Matrix3() },
          dispersion: { value: 0 },
          iridescence: { value: 0 },
          iridescenceMap: { value: null },
          iridescenceMapTransform: { value: new Matrix3() },
          iridescenceIOR: { value: 1.3 },
          iridescenceThicknessMinimum: { value: 100 },
          iridescenceThicknessMaximum: { value: 400 },
          iridescenceThicknessMap: { value: null },
          iridescenceThicknessMapTransform: { value: new Matrix3() },
          sheen: { value: 0 },
          sheenColor: { value: new Color(0) },
          sheenColorMap: { value: null },
          sheenColorMapTransform: { value: new Matrix3() },
          sheenRoughness: { value: 1 },
          sheenRoughnessMap: { value: null },
          sheenRoughnessMapTransform: { value: new Matrix3() },
          transmission: { value: 0 },
          transmissionMap: { value: null },
          transmissionMapTransform: { value: new Matrix3() },
          transmissionSamplerSize: { value: new Vector2() },
          transmissionSamplerMap: { value: null },
          thickness: { value: 0 },
          thicknessMap: { value: null },
          thicknessMapTransform: { value: new Matrix3() },
          attenuationDistance: { value: 0 },
          attenuationColor: { value: new Color(0) },
          specularColor: { value: new Color(1, 1, 1) },
          specularColorMap: { value: null },
          specularColorMapTransform: { value: new Matrix3() },
          specularIntensity: { value: 1 },
          specularIntensityMap: { value: null },
          specularIntensityMapTransform: { value: new Matrix3() },
          anisotropyVector: { value: new Vector2() },
          anisotropyMap: { value: null },
          anisotropyMapTransform: { value: new Matrix3() }
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    };
    _e1$1 = new Euler();
    _m1$1 = new Matrix4();
    OrthographicCamera = class extends Camera {
      constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
        super();
        this.isOrthographicCamera = true;
        this.type = "OrthographicCamera";
        this.zoom = 1;
        this.view = null;
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.near = near;
        this.far = far;
        this.updateProjectionMatrix();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.near = source.near;
        this.far = source.far;
        this.zoom = source.zoom;
        this.view = source.view === null ? null : Object.assign({}, source.view);
        return this;
      }
      setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        if (this.view === null) {
          this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
          };
        }
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
      }
      clearViewOffset() {
        if (this.view !== null) {
          this.view.enabled = false;
        }
        this.updateProjectionMatrix();
      }
      updateProjectionMatrix() {
        const dx = (this.right - this.left) / (2 * this.zoom);
        const dy = (this.top - this.bottom) / (2 * this.zoom);
        const cx = (this.right + this.left) / 2;
        const cy = (this.top + this.bottom) / 2;
        let left = cx - dx;
        let right = cx + dx;
        let top = cy + dy;
        let bottom = cy - dy;
        if (this.view !== null && this.view.enabled) {
          const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
          const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
          left += scaleW * this.view.offsetX;
          right = left + scaleW * this.view.width;
          top -= scaleH * this.view.offsetY;
          bottom = top - scaleH * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.zoom = this.zoom;
        data.object.left = this.left;
        data.object.right = this.right;
        data.object.top = this.top;
        data.object.bottom = this.bottom;
        data.object.near = this.near;
        data.object.far = this.far;
        if (this.view !== null) data.object.view = Object.assign({}, this.view);
        return data;
      }
    };
    _flatCamera = new OrthographicCamera();
    _clearColor = new Color();
    PHI = (1 + Math.sqrt(5)) / 2;
    INV_PHI = 1 / PHI;
    _axisDirections = [
      new Vector3(-PHI, INV_PHI, 0),
      new Vector3(PHI, INV_PHI, 0),
      new Vector3(-INV_PHI, 0, PHI),
      new Vector3(INV_PHI, 0, PHI),
      new Vector3(0, PHI, -INV_PHI),
      new Vector3(0, PHI, INV_PHI),
      new Vector3(-1, 1, -1),
      new Vector3(1, 1, -1),
      new Vector3(-1, 1, 1),
      new Vector3(1, 1, 1)
    ];
    DepthTexture = class extends Texture {
      constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
        format = format !== void 0 ? format : DepthFormat;
        if (format !== DepthFormat && format !== DepthStencilFormat) {
          throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        }
        if (type === void 0 && format === DepthFormat) type = UnsignedIntType;
        if (type === void 0 && format === DepthStencilFormat) type = UnsignedInt248Type;
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.isDepthTexture = true;
        this.image = { width, height };
        this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
        this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
        this.flipY = false;
        this.generateMipmaps = false;
        this.compareFunction = null;
      }
      copy(source) {
        super.copy(source);
        this.compareFunction = source.compareFunction;
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
        return data;
      }
    };
    emptyTexture = new Texture();
    emptyShadowTexture = new DepthTexture(1, 1);
    emptyShadowTexture.compareFunction = LessEqualCompare;
    emptyArrayTexture = new DataArrayTexture();
    empty3dTexture = new Data3DTexture();
    emptyCubeTexture = new CubeTexture();
    mat4array = new Float32Array(16);
    mat3array = new Float32Array(9);
    mat2array = new Float32Array(4);
    Group = class extends Object3D {
      constructor() {
        super();
        this.isGroup = true;
        this.type = "Group";
      }
    };
    ArrayCamera = class extends PerspectiveCamera {
      constructor(array = []) {
        super();
        this.isArrayCamera = true;
        this.cameras = array;
      }
    };
    cameraLPos = new Vector3();
    cameraRPos = new Vector3();
    Object.assign(WebVRManager.prototype, {
      addEventListener: EventDispatcher.prototype.addEventListener,
      hasEventListener: EventDispatcher.prototype.hasEventListener,
      removeEventListener: EventDispatcher.prototype.removeEventListener,
      dispatchEvent: EventDispatcher.prototype.dispatchEvent
    });
    WebGLMultiviewRenderTarget = class extends WebGLRenderTarget {
      constructor(width, height, numViews, options = {}) {
        super(width, height, options);
        this.depthBuffer = false;
        this.stencilBuffer = false;
        this.numViews = numViews;
      }
      copy(source) {
        super.copy(source);
        this.numViews = source.numViews;
        return this;
      }
    };
    WebGLMultiviewRenderTarget.prototype.isWebGLMultiviewRenderTarget = true;
    _e1 = new Euler();
    _m1 = new Matrix4();
    _vector$6 = new Vector3();
    _intersectPoint = new Vector3();
    _worldScale = new Vector3();
    _mvPosition = new Vector3();
    _alignedPosition = new Vector2();
    _rotatedPosition = new Vector2();
    _viewWorldMatrix = new Matrix4();
    _vA = new Vector3();
    _vB = new Vector3();
    _vC = new Vector3();
    _uvA = new Vector2();
    _uvB = new Vector2();
    _uvC = new Vector2();
    _v1$2 = new Vector3();
    _v2$1 = new Vector3();
    _basePosition = new Vector3();
    _skinIndex = new Vector4();
    _skinWeight = new Vector4();
    _vector3 = new Vector3();
    _matrix4 = new Matrix4();
    _vertex = new Vector3();
    _sphere$4 = new Sphere();
    _inverseMatrix$2 = new Matrix4();
    _ray$2 = new Ray();
    SkinnedMesh = class extends Mesh {
      constructor(geometry, material) {
        super(geometry, material);
        this.isSkinnedMesh = true;
        this.type = "SkinnedMesh";
        this.bindMode = AttachedBindMode;
        this.bindMatrix = new Matrix4();
        this.bindMatrixInverse = new Matrix4();
        this.boundingBox = null;
        this.boundingSphere = null;
      }
      computeBoundingBox() {
        const geometry = this.geometry;
        if (this.boundingBox === null) {
          this.boundingBox = new Box3();
        }
        this.boundingBox.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for (let i = 0; i < positionAttribute.count; i++) {
          this.getVertexPosition(i, _vertex);
          this.boundingBox.expandByPoint(_vertex);
        }
      }
      computeBoundingSphere() {
        const geometry = this.geometry;
        if (this.boundingSphere === null) {
          this.boundingSphere = new Sphere();
        }
        this.boundingSphere.makeEmpty();
        const positionAttribute = geometry.getAttribute("position");
        for (let i = 0; i < positionAttribute.count; i++) {
          this.getVertexPosition(i, _vertex);
          this.boundingSphere.expandByPoint(_vertex);
        }
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.bindMode = source.bindMode;
        this.bindMatrix.copy(source.bindMatrix);
        this.bindMatrixInverse.copy(source.bindMatrixInverse);
        this.skeleton = source.skeleton;
        if (source.boundingBox !== null) this.boundingBox = source.boundingBox.clone();
        if (source.boundingSphere !== null) this.boundingSphere = source.boundingSphere.clone();
        return this;
      }
      raycast(raycaster, intersects2) {
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === void 0) return;
        if (this.boundingSphere === null) this.computeBoundingSphere();
        _sphere$4.copy(this.boundingSphere);
        _sphere$4.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere(_sphere$4) === false) return;
        _inverseMatrix$2.copy(matrixWorld).invert();
        _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
        if (this.boundingBox !== null) {
          if (_ray$2.intersectsBox(this.boundingBox) === false) return;
        }
        this._computeIntersections(raycaster, intersects2, _ray$2);
      }
      getVertexPosition(index, target) {
        super.getVertexPosition(index, target);
        this.applyBoneTransform(index, target);
        return target;
      }
      bind(skeleton, bindMatrix) {
        this.skeleton = skeleton;
        if (bindMatrix === void 0) {
          this.updateMatrixWorld(true);
          this.skeleton.calculateInverses();
          bindMatrix = this.matrixWorld;
        }
        this.bindMatrix.copy(bindMatrix);
        this.bindMatrixInverse.copy(bindMatrix).invert();
      }
      pose() {
        this.skeleton.pose();
      }
      normalizeSkinWeights() {
        const vector = new Vector4();
        const skinWeight = this.geometry.attributes.skinWeight;
        for (let i = 0, l = skinWeight.count; i < l; i++) {
          vector.fromBufferAttribute(skinWeight, i);
          const scale = 1 / vector.manhattanLength();
          if (scale !== Infinity) {
            vector.multiplyScalar(scale);
          } else {
            vector.set(1, 0, 0, 0);
          }
          skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
        }
      }
      updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.bindMode === AttachedBindMode) {
          this.bindMatrixInverse.copy(this.matrixWorld).invert();
        } else if (this.bindMode === DetachedBindMode) {
          this.bindMatrixInverse.copy(this.bindMatrix).invert();
        } else {
          console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        }
      }
      applyBoneTransform(index, vector) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        _basePosition.copy(vector).applyMatrix4(this.bindMatrix);
        vector.set(0, 0, 0);
        for (let i = 0; i < 4; i++) {
          const weight = _skinWeight.getComponent(i);
          if (weight !== 0) {
            const boneIndex = _skinIndex.getComponent(i);
            _matrix4.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
            vector.addScaledVector(_vector3.copy(_basePosition).applyMatrix4(_matrix4), weight);
          }
        }
        return vector.applyMatrix4(this.bindMatrixInverse);
      }
    };
    Bone = class extends Object3D {
      constructor() {
        super();
        this.isBone = true;
        this.type = "Bone";
      }
    };
    DataTexture = class extends Texture {
      constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace) {
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
        this.isDataTexture = true;
        this.image = { data, width, height };
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
      }
    };
    _offsetMatrix = new Matrix4();
    _identityMatrix$1 = new Matrix4();
    Skeleton = class _Skeleton {
      constructor(bones = [], boneInverses = []) {
        this.uuid = generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.init();
      }
      init() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        this.boneMatrices = new Float32Array(bones.length * 16);
        if (boneInverses.length === 0) {
          this.calculateInverses();
        } else {
          if (bones.length !== boneInverses.length) {
            console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
            this.boneInverses = [];
            for (let i = 0, il = this.bones.length; i < il; i++) {
              this.boneInverses.push(new Matrix4());
            }
          }
        }
      }
      calculateInverses() {
        this.boneInverses.length = 0;
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const inverse = new Matrix4();
          if (this.bones[i]) {
            inverse.copy(this.bones[i].matrixWorld).invert();
          }
          this.boneInverses.push(inverse);
        }
      }
      pose() {
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const bone = this.bones[i];
          if (bone) {
            bone.matrixWorld.copy(this.boneInverses[i]).invert();
          }
        }
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const bone = this.bones[i];
          if (bone) {
            if (bone.parent && bone.parent.isBone) {
              bone.matrix.copy(bone.parent.matrixWorld).invert();
              bone.matrix.multiply(bone.matrixWorld);
            } else {
              bone.matrix.copy(bone.matrixWorld);
            }
            bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
          }
        }
      }
      update() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        const boneMatrices = this.boneMatrices;
        const boneTexture = this.boneTexture;
        for (let i = 0, il = bones.length; i < il; i++) {
          const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix$1;
          _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
          _offsetMatrix.toArray(boneMatrices, i * 16);
        }
        if (boneTexture !== null) {
          boneTexture.needsUpdate = true;
        }
      }
      clone() {
        return new _Skeleton(this.bones, this.boneInverses);
      }
      computeBoneTexture() {
        let size = Math.sqrt(this.bones.length * 4);
        size = Math.ceil(size / 4) * 4;
        size = Math.max(size, 4);
        const boneMatrices = new Float32Array(size * size * 4);
        boneMatrices.set(this.boneMatrices);
        const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
        boneTexture.needsUpdate = true;
        this.boneMatrices = boneMatrices;
        this.boneTexture = boneTexture;
        return this;
      }
      getBoneByName(name) {
        for (let i = 0, il = this.bones.length; i < il; i++) {
          const bone = this.bones[i];
          if (bone.name === name) {
            return bone;
          }
        }
        return void 0;
      }
      dispose() {
        if (this.boneTexture !== null) {
          this.boneTexture.dispose();
          this.boneTexture = null;
        }
      }
      fromJSON(json, bones) {
        this.uuid = json.uuid;
        for (let i = 0, l = json.bones.length; i < l; i++) {
          const uuid = json.bones[i];
          let bone = bones[uuid];
          if (bone === void 0) {
            console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
            bone = new Bone();
          }
          this.bones.push(bone);
          this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
        }
        this.init();
        return this;
      }
      toJSON() {
        const data = {
          metadata: {
            version: 4.6,
            type: "Skeleton",
            generator: "Skeleton.toJSON"
          },
          bones: [],
          boneInverses: []
        };
        data.uuid = this.uuid;
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        for (let i = 0, l = bones.length; i < l; i++) {
          const bone = bones[i];
          data.bones.push(bone.uuid);
          const boneInverse = boneInverses[i];
          data.boneInverses.push(boneInverse.toArray());
        }
        return data;
      }
    };
    _instanceLocalMatrix = new Matrix4();
    _instanceWorldMatrix = new Matrix4();
    _box3 = new Box3();
    _identity = new Matrix4();
    _mesh$1 = new Mesh();
    _sphere$3 = new Sphere();
    MultiDrawRenderList = class {
      constructor() {
        this.index = 0;
        this.pool = [];
        this.list = [];
      }
      push(drawRange, z) {
        const pool = this.pool;
        const list = this.list;
        if (this.index >= pool.length) {
          pool.push({
            start: -1,
            count: -1,
            z: -1
          });
        }
        const item = pool[this.index];
        list.push(item);
        this.index++;
        item.start = drawRange.start;
        item.count = drawRange.count;
        item.z = z;
      }
      reset() {
        this.list.length = 0;
        this.index = 0;
      }
    };
    _matrix$1 = new Matrix4();
    _invMatrixWorld = new Matrix4();
    _identityMatrix = new Matrix4();
    _projScreenMatrix$2 = new Matrix4();
    _frustum = new Frustum();
    _box$1 = new Box3();
    _sphere$2 = new Sphere();
    _vector$5 = new Vector3();
    _renderList = new MultiDrawRenderList();
    _mesh = new Mesh();
    LineBasicMaterial = class extends Material {
      constructor(parameters) {
        super();
        this.isLineBasicMaterial = true;
        this.type = "LineBasicMaterial";
        this.color = new Color(16777215);
        this.map = null;
        this.linewidth = 1;
        this.linecap = "round";
        this.linejoin = "round";
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.linewidth = source.linewidth;
        this.linecap = source.linecap;
        this.linejoin = source.linejoin;
        this.fog = source.fog;
        return this;
      }
    };
    _vStart = new Vector3();
    _vEnd = new Vector3();
    _inverseMatrix$1 = new Matrix4();
    _ray$1 = new Ray();
    _sphere$1 = new Sphere();
    _intersectPointOnRay = new Vector3();
    _intersectPointOnSegment = new Vector3();
    Line = class extends Object3D {
      constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
        super();
        this.isLine = true;
        this.type = "Line";
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
        this.geometry = source.geometry;
        return this;
      }
      computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.index === null) {
          const positionAttribute = geometry.attributes.position;
          const lineDistances = [0];
          for (let i = 1, l = positionAttribute.count; i < l; i++) {
            _vStart.fromBufferAttribute(positionAttribute, i - 1);
            _vEnd.fromBufferAttribute(positionAttribute, i);
            lineDistances[i] = lineDistances[i - 1];
            lineDistances[i] += _vStart.distanceTo(_vEnd);
          }
          geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
        }
        return this;
      }
      raycast(raycaster, intersects2) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Line.threshold;
        const drawRange = geometry.drawRange;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        _sphere$1.copy(geometry.boundingSphere);
        _sphere$1.applyMatrix4(matrixWorld);
        _sphere$1.radius += threshold;
        if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
        _inverseMatrix$1.copy(matrixWorld).invert();
        _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const step = this.isLineSegments ? 2 : 1;
        const index = geometry.index;
        const attributes = geometry.attributes;
        const positionAttribute = attributes.position;
        if (index !== null) {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, l = end - 1; i < l; i += step) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b);
            if (intersect) {
              intersects2.push(intersect);
            }
          }
          if (this.isLineLoop) {
            const a = index.getX(end - 1);
            const b = index.getX(start);
            const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a, b);
            if (intersect) {
              intersects2.push(intersect);
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
          for (let i = start, l = end - 1; i < l; i += step) {
            const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i, i + 1);
            if (intersect) {
              intersects2.push(intersect);
            }
          }
          if (this.isLineLoop) {
            const intersect = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start);
            if (intersect) {
              intersects2.push(intersect);
            }
          }
        }
      }
      updateMorphTargets() {
        const geometry = this.geometry;
        const morphAttributes = geometry.morphAttributes;
        const keys = Object.keys(morphAttributes);
        if (keys.length > 0) {
          const morphAttribute = morphAttributes[keys[0]];
          if (morphAttribute !== void 0) {
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
              const name = morphAttribute[m].name || String(m);
              this.morphTargetInfluences.push(0);
              this.morphTargetDictionary[name] = m;
            }
          }
        }
      }
    };
    _start = new Vector3();
    _end = new Vector3();
    _inverseMatrix = new Matrix4();
    _ray = new Ray();
    _sphere = new Sphere();
    _position$2 = new Vector3();
    Curve = class {
      constructor() {
        this.type = "Curve";
        this.arcLengthDivisions = 200;
      }
      // Virtual base class method to overwrite and implement in subclasses
      //	- t [0 .. 1]
      getPoint() {
        console.warn("THREE.Curve: .getPoint() not implemented.");
        return null;
      }
      // Get point at relative position in curve according to arc length
      // - u [0 .. 1]
      getPointAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getPoint(t, optionalTarget);
      }
      // Get sequence of points using getPoint( t )
      getPoints(divisions = 5) {
        const points = [];
        for (let d2 = 0; d2 <= divisions; d2++) {
          points.push(this.getPoint(d2 / divisions));
        }
        return points;
      }
      // Get sequence of points using getPointAt( u )
      getSpacedPoints(divisions = 5) {
        const points = [];
        for (let d2 = 0; d2 <= divisions; d2++) {
          points.push(this.getPointAt(d2 / divisions));
        }
        return points;
      }
      // Get total curve arc length
      getLength() {
        const lengths = this.getLengths();
        return lengths[lengths.length - 1];
      }
      // Get list of cumulative segment lengths
      getLengths(divisions = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
          return this.cacheArcLengths;
        }
        this.needsUpdate = false;
        const cache = [];
        let current, last = this.getPoint(0);
        let sum = 0;
        cache.push(0);
        for (let p2 = 1; p2 <= divisions; p2++) {
          current = this.getPoint(p2 / divisions);
          sum += current.distanceTo(last);
          cache.push(sum);
          last = current;
        }
        this.cacheArcLengths = cache;
        return cache;
      }
      updateArcLengths() {
        this.needsUpdate = true;
        this.getLengths();
      }
      // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
      getUtoTmapping(u, distance2) {
        const arcLengths = this.getLengths();
        let i = 0;
        const il = arcLengths.length;
        let targetArcLength;
        if (distance2) {
          targetArcLength = distance2;
        } else {
          targetArcLength = u * arcLengths[il - 1];
        }
        let low = 0, high = il - 1, comparison;
        while (low <= high) {
          i = Math.floor(low + (high - low) / 2);
          comparison = arcLengths[i] - targetArcLength;
          if (comparison < 0) {
            low = i + 1;
          } else if (comparison > 0) {
            high = i - 1;
          } else {
            high = i;
            break;
          }
        }
        i = high;
        if (arcLengths[i] === targetArcLength) {
          return i / (il - 1);
        }
        const lengthBefore = arcLengths[i];
        const lengthAfter = arcLengths[i + 1];
        const segmentLength = lengthAfter - lengthBefore;
        const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
        const t = (i + segmentFraction) / (il - 1);
        return t;
      }
      // Returns a unit vector tangent at t
      // In case any sub curve does not implement its tangent derivation,
      // 2 points a small delta apart will be used to find its gradient
      // which seems to give a reasonable approximation
      getTangent(t, optionalTarget) {
        const delta = 1e-4;
        let t1 = t - delta;
        let t2 = t + delta;
        if (t1 < 0) t1 = 0;
        if (t2 > 1) t2 = 1;
        const pt1 = this.getPoint(t1);
        const pt2 = this.getPoint(t2);
        const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
        tangent.copy(pt2).sub(pt1).normalize();
        return tangent;
      }
      getTangentAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getTangent(t, optionalTarget);
      }
      computeFrenetFrames(segments, closed) {
        const normal = new Vector3();
        const tangents = [];
        const normals = [];
        const binormals = [];
        const vec = new Vector3();
        const mat = new Matrix4();
        for (let i = 0; i <= segments; i++) {
          const u = i / segments;
          tangents[i] = this.getTangentAt(u, new Vector3());
        }
        normals[0] = new Vector3();
        binormals[0] = new Vector3();
        let min = Number.MAX_VALUE;
        const tx = Math.abs(tangents[0].x);
        const ty = Math.abs(tangents[0].y);
        const tz = Math.abs(tangents[0].z);
        if (tx <= min) {
          min = tx;
          normal.set(1, 0, 0);
        }
        if (ty <= min) {
          min = ty;
          normal.set(0, 1, 0);
        }
        if (tz <= min) {
          normal.set(0, 0, 1);
        }
        vec.crossVectors(tangents[0], normal).normalize();
        normals[0].crossVectors(tangents[0], vec);
        binormals[0].crossVectors(tangents[0], normals[0]);
        for (let i = 1; i <= segments; i++) {
          normals[i] = normals[i - 1].clone();
          binormals[i] = binormals[i - 1].clone();
          vec.crossVectors(tangents[i - 1], tangents[i]);
          if (vec.length() > Number.EPSILON) {
            vec.normalize();
            const theta = Math.acos(clamp2(tangents[i - 1].dot(tangents[i]), -1, 1));
            normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
          }
          binormals[i].crossVectors(tangents[i], normals[i]);
        }
        if (closed === true) {
          let theta = Math.acos(clamp2(normals[0].dot(normals[segments]), -1, 1));
          theta /= segments;
          if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
            theta = -theta;
          }
          for (let i = 1; i <= segments; i++) {
            normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
            binormals[i].crossVectors(tangents[i], normals[i]);
          }
        }
        return {
          tangents,
          normals,
          binormals
        };
      }
      clone() {
        return new this.constructor().copy(this);
      }
      copy(source) {
        this.arcLengthDivisions = source.arcLengthDivisions;
        return this;
      }
      toJSON() {
        const data = {
          metadata: {
            version: 4.6,
            type: "Curve",
            generator: "Curve.toJSON"
          }
        };
        data.arcLengthDivisions = this.arcLengthDivisions;
        data.type = this.type;
        return data;
      }
      fromJSON(json) {
        this.arcLengthDivisions = json.arcLengthDivisions;
        return this;
      }
    };
    EllipseCurve = class extends Curve {
      constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
        super();
        this.isEllipseCurve = true;
        this.type = "EllipseCurve";
        this.aX = aX;
        this.aY = aY;
        this.xRadius = xRadius;
        this.yRadius = yRadius;
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
        this.aClockwise = aClockwise;
        this.aRotation = aRotation;
      }
      getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const twoPi = Math.PI * 2;
        let deltaAngle = this.aEndAngle - this.aStartAngle;
        const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
        while (deltaAngle < 0) deltaAngle += twoPi;
        while (deltaAngle > twoPi) deltaAngle -= twoPi;
        if (deltaAngle < Number.EPSILON) {
          if (samePoints) {
            deltaAngle = 0;
          } else {
            deltaAngle = twoPi;
          }
        }
        if (this.aClockwise === true && !samePoints) {
          if (deltaAngle === twoPi) {
            deltaAngle = -twoPi;
          } else {
            deltaAngle = deltaAngle - twoPi;
          }
        }
        const angle2 = this.aStartAngle + t * deltaAngle;
        let x = this.aX + this.xRadius * Math.cos(angle2);
        let y = this.aY + this.yRadius * Math.sin(angle2);
        if (this.aRotation !== 0) {
          const cos = Math.cos(this.aRotation);
          const sin = Math.sin(this.aRotation);
          const tx = x - this.aX;
          const ty = y - this.aY;
          x = tx * cos - ty * sin + this.aX;
          y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
      }
      copy(source) {
        super.copy(source);
        this.aX = source.aX;
        this.aY = source.aY;
        this.xRadius = source.xRadius;
        this.yRadius = source.yRadius;
        this.aStartAngle = source.aStartAngle;
        this.aEndAngle = source.aEndAngle;
        this.aClockwise = source.aClockwise;
        this.aRotation = source.aRotation;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.aX = this.aX;
        data.aY = this.aY;
        data.xRadius = this.xRadius;
        data.yRadius = this.yRadius;
        data.aStartAngle = this.aStartAngle;
        data.aEndAngle = this.aEndAngle;
        data.aClockwise = this.aClockwise;
        data.aRotation = this.aRotation;
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.aX = json.aX;
        this.aY = json.aY;
        this.xRadius = json.xRadius;
        this.yRadius = json.yRadius;
        this.aStartAngle = json.aStartAngle;
        this.aEndAngle = json.aEndAngle;
        this.aClockwise = json.aClockwise;
        this.aRotation = json.aRotation;
        return this;
      }
    };
    ArcCurve = class extends EllipseCurve {
      constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        this.isArcCurve = true;
        this.type = "ArcCurve";
      }
    };
    tmp = new Vector3();
    px = new CubicPoly();
    py = new CubicPoly();
    pz = new CubicPoly();
    CatmullRomCurve3 = class extends Curve {
      constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
        super();
        this.isCatmullRomCurve3 = true;
        this.type = "CatmullRomCurve3";
        this.points = points;
        this.closed = closed;
        this.curveType = curveType;
        this.tension = tension;
      }
      getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const points = this.points;
        const l = points.length;
        const p2 = (l - (this.closed ? 0 : 1)) * t;
        let intPoint = Math.floor(p2);
        let weight = p2 - intPoint;
        if (this.closed) {
          intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
        } else if (weight === 0 && intPoint === l - 1) {
          intPoint = l - 2;
          weight = 1;
        }
        let p0, p3;
        if (this.closed || intPoint > 0) {
          p0 = points[(intPoint - 1) % l];
        } else {
          tmp.subVectors(points[0], points[1]).add(points[0]);
          p0 = tmp;
        }
        const p1 = points[intPoint % l];
        const p22 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l) {
          p3 = points[(intPoint + 2) % l];
        } else {
          tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
          p3 = tmp;
        }
        if (this.curveType === "centripetal" || this.curveType === "chordal") {
          const pow = this.curveType === "chordal" ? 0.5 : 0.25;
          let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
          let dt1 = Math.pow(p1.distanceToSquared(p22), pow);
          let dt2 = Math.pow(p22.distanceToSquared(p3), pow);
          if (dt1 < 1e-4) dt1 = 1;
          if (dt0 < 1e-4) dt0 = dt1;
          if (dt2 < 1e-4) dt2 = dt1;
          px.initNonuniformCatmullRom(p0.x, p1.x, p22.x, p3.x, dt0, dt1, dt2);
          py.initNonuniformCatmullRom(p0.y, p1.y, p22.y, p3.y, dt0, dt1, dt2);
          pz.initNonuniformCatmullRom(p0.z, p1.z, p22.z, p3.z, dt0, dt1, dt2);
        } else if (this.curveType === "catmullrom") {
          px.initCatmullRom(p0.x, p1.x, p22.x, p3.x, this.tension);
          py.initCatmullRom(p0.y, p1.y, p22.y, p3.y, this.tension);
          pz.initCatmullRom(p0.z, p1.z, p22.z, p3.z, this.tension);
        }
        point.set(
          px.calc(weight),
          py.calc(weight),
          pz.calc(weight)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.points = [];
        for (let i = 0, l = source.points.length; i < l; i++) {
          const point = source.points[i];
          this.points.push(point.clone());
        }
        this.closed = source.closed;
        this.curveType = source.curveType;
        this.tension = source.tension;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.points = [];
        for (let i = 0, l = this.points.length; i < l; i++) {
          const point = this.points[i];
          data.points.push(point.toArray());
        }
        data.closed = this.closed;
        data.curveType = this.curveType;
        data.tension = this.tension;
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for (let i = 0, l = json.points.length; i < l; i++) {
          const point = json.points[i];
          this.points.push(new Vector3().fromArray(point));
        }
        this.closed = json.closed;
        this.curveType = json.curveType;
        this.tension = json.tension;
        return this;
      }
    };
    CubicBezierCurve = class extends Curve {
      constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
        super();
        this.isCubicBezierCurve = true;
        this.type = "CubicBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
      }
      getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(
          CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
          CubicBezier(t, v0.y, v1.y, v2.y, v3.y)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
      }
    };
    CubicBezierCurve3 = class extends Curve {
      constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
        super();
        this.isCubicBezierCurve3 = true;
        this.type = "CubicBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
      }
      getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set(
          CubicBezier(t, v0.x, v1.x, v2.x, v3.x),
          CubicBezier(t, v0.y, v1.y, v2.y, v3.y),
          CubicBezier(t, v0.z, v1.z, v2.z, v3.z)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
      }
    };
    LineCurve = class extends Curve {
      constructor(v1 = new Vector2(), v2 = new Vector2()) {
        super();
        this.isLineCurve = true;
        this.type = "LineCurve";
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        if (t === 1) {
          point.copy(this.v2);
        } else {
          point.copy(this.v2).sub(this.v1);
          point.multiplyScalar(t).add(this.v1);
        }
        return point;
      }
      // Line curve is linear, so we can overwrite default getPointAt
      getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
      }
      getTangent(t, optionalTarget = new Vector2()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
      }
      getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
      }
      copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    LineCurve3 = class extends Curve {
      constructor(v1 = new Vector3(), v2 = new Vector3()) {
        super();
        this.isLineCurve3 = true;
        this.type = "LineCurve3";
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        if (t === 1) {
          point.copy(this.v2);
        } else {
          point.copy(this.v2).sub(this.v1);
          point.multiplyScalar(t).add(this.v1);
        }
        return point;
      }
      // Line curve is linear, so we can overwrite default getPointAt
      getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
      }
      getTangent(t, optionalTarget = new Vector3()) {
        return optionalTarget.subVectors(this.v2, this.v1).normalize();
      }
      getTangentAt(u, optionalTarget) {
        return this.getTangent(u, optionalTarget);
      }
      copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    QuadraticBezierCurve = class extends Curve {
      constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
        super();
        this.isQuadraticBezierCurve = true;
        this.type = "QuadraticBezierCurve";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(
          QuadraticBezier(t, v0.x, v1.x, v2.x),
          QuadraticBezier(t, v0.y, v1.y, v2.y)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    QuadraticBezierCurve3 = class extends Curve {
      constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
        super();
        this.isQuadraticBezierCurve3 = true;
        this.type = "QuadraticBezierCurve3";
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
      }
      getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set(
          QuadraticBezier(t, v0.x, v1.x, v2.x),
          QuadraticBezier(t, v0.y, v1.y, v2.y),
          QuadraticBezier(t, v0.z, v1.z, v2.z)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
      }
    };
    SplineCurve = class extends Curve {
      constructor(points = []) {
        super();
        this.isSplineCurve = true;
        this.type = "SplineCurve";
        this.points = points;
      }
      getPoint(t, optionalTarget = new Vector2()) {
        const point = optionalTarget;
        const points = this.points;
        const p2 = (points.length - 1) * t;
        const intPoint = Math.floor(p2);
        const weight = p2 - intPoint;
        const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
        const p1 = points[intPoint];
        const p22 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
        const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        point.set(
          CatmullRom(weight, p0.x, p1.x, p22.x, p3.x),
          CatmullRom(weight, p0.y, p1.y, p22.y, p3.y)
        );
        return point;
      }
      copy(source) {
        super.copy(source);
        this.points = [];
        for (let i = 0, l = source.points.length; i < l; i++) {
          const point = source.points[i];
          this.points.push(point.clone());
        }
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.points = [];
        for (let i = 0, l = this.points.length; i < l; i++) {
          const point = this.points[i];
          data.points.push(point.toArray());
        }
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for (let i = 0, l = json.points.length; i < l; i++) {
          const point = json.points[i];
          this.points.push(new Vector2().fromArray(point));
        }
        return this;
      }
    };
    Curves = Object.freeze({
      __proto__: null,
      ArcCurve,
      CatmullRomCurve3,
      CubicBezierCurve,
      CubicBezierCurve3,
      EllipseCurve,
      LineCurve,
      LineCurve3,
      QuadraticBezierCurve,
      QuadraticBezierCurve3,
      SplineCurve
    });
    CurvePath = class extends Curve {
      constructor() {
        super();
        this.type = "CurvePath";
        this.curves = [];
        this.autoClose = false;
      }
      add(curve) {
        this.curves.push(curve);
      }
      closePath() {
        const startPoint = this.curves[0].getPoint(0);
        const endPoint = this.curves[this.curves.length - 1].getPoint(1);
        if (!startPoint.equals(endPoint)) {
          const lineType = startPoint.isVector2 === true ? "LineCurve" : "LineCurve3";
          this.curves.push(new Curves[lineType](endPoint, startPoint));
        }
        return this;
      }
      // To get accurate point with reference to
      // entire path distance at time t,
      // following has to be done:
      // 1. Length of each sub path have to be known
      // 2. Locate and identify type of curve
      // 3. Get t for the curve
      // 4. Return curve.getPointAt(t')
      getPoint(t, optionalTarget) {
        const d2 = t * this.getLength();
        const curveLengths = this.getCurveLengths();
        let i = 0;
        while (i < curveLengths.length) {
          if (curveLengths[i] >= d2) {
            const diff = curveLengths[i] - d2;
            const curve = this.curves[i];
            const segmentLength = curve.getLength();
            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
            return curve.getPointAt(u, optionalTarget);
          }
          i++;
        }
        return null;
      }
      // We cannot use the default THREE.Curve getPoint() with getLength() because in
      // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
      // getPoint() depends on getLength
      getLength() {
        const lens = this.getCurveLengths();
        return lens[lens.length - 1];
      }
      // cacheLengths must be recalculated.
      updateArcLengths() {
        this.needsUpdate = true;
        this.cacheLengths = null;
        this.getCurveLengths();
      }
      // Compute lengths and cache them
      // We cannot overwrite getLengths() because UtoT mapping uses it.
      getCurveLengths() {
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
          return this.cacheLengths;
        }
        const lengths = [];
        let sums = 0;
        for (let i = 0, l = this.curves.length; i < l; i++) {
          sums += this.curves[i].getLength();
          lengths.push(sums);
        }
        this.cacheLengths = lengths;
        return lengths;
      }
      getSpacedPoints(divisions = 40) {
        const points = [];
        for (let i = 0; i <= divisions; i++) {
          points.push(this.getPoint(i / divisions));
        }
        if (this.autoClose) {
          points.push(points[0]);
        }
        return points;
      }
      getPoints(divisions = 12) {
        const points = [];
        let last;
        for (let i = 0, curves = this.curves; i < curves.length; i++) {
          const curve = curves[i];
          const resolution = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
          const pts = curve.getPoints(resolution);
          for (let j = 0; j < pts.length; j++) {
            const point = pts[j];
            if (last && last.equals(point)) continue;
            points.push(point);
            last = point;
          }
        }
        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
          points.push(points[0]);
        }
        return points;
      }
      copy(source) {
        super.copy(source);
        this.curves = [];
        for (let i = 0, l = source.curves.length; i < l; i++) {
          const curve = source.curves[i];
          this.curves.push(curve.clone());
        }
        this.autoClose = source.autoClose;
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.autoClose = this.autoClose;
        data.curves = [];
        for (let i = 0, l = this.curves.length; i < l; i++) {
          const curve = this.curves[i];
          data.curves.push(curve.toJSON());
        }
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.autoClose = json.autoClose;
        this.curves = [];
        for (let i = 0, l = json.curves.length; i < l; i++) {
          const curve = json.curves[i];
          this.curves.push(new Curves[curve.type]().fromJSON(curve));
        }
        return this;
      }
    };
    Path = class extends CurvePath {
      constructor(points) {
        super();
        this.type = "Path";
        this.currentPoint = new Vector2();
        if (points) {
          this.setFromPoints(points);
        }
      }
      setFromPoints(points) {
        this.moveTo(points[0].x, points[0].y);
        for (let i = 1, l = points.length; i < l; i++) {
          this.lineTo(points[i].x, points[i].y);
        }
        return this;
      }
      moveTo(x, y) {
        this.currentPoint.set(x, y);
        return this;
      }
      lineTo(x, y) {
        const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
        this.curves.push(curve);
        this.currentPoint.set(x, y);
        return this;
      }
      quadraticCurveTo(aCPx, aCPy, aX, aY) {
        const curve = new QuadraticBezierCurve(
          this.currentPoint.clone(),
          new Vector2(aCPx, aCPy),
          new Vector2(aX, aY)
        );
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
      }
      bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        const curve = new CubicBezierCurve(
          this.currentPoint.clone(),
          new Vector2(aCP1x, aCP1y),
          new Vector2(aCP2x, aCP2y),
          new Vector2(aX, aY)
        );
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
      }
      splineThru(pts) {
        const npts = [this.currentPoint.clone()].concat(pts);
        const curve = new SplineCurve(npts);
        this.curves.push(curve);
        this.currentPoint.copy(pts[pts.length - 1]);
        return this;
      }
      arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absarc(
          aX + x0,
          aY + y0,
          aRadius,
          aStartAngle,
          aEndAngle,
          aClockwise
        );
        return this;
      }
      absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
      }
      ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        return this;
      }
      absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        if (this.curves.length > 0) {
          const firstPoint = curve.getPoint(0);
          if (!firstPoint.equals(this.currentPoint)) {
            this.lineTo(firstPoint.x, firstPoint.y);
          }
        }
        this.curves.push(curve);
        const lastPoint = curve.getPoint(1);
        this.currentPoint.copy(lastPoint);
        return this;
      }
      copy(source) {
        super.copy(source);
        this.currentPoint.copy(source.currentPoint);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.currentPoint = this.currentPoint.toArray();
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.currentPoint.fromArray(json.currentPoint);
        return this;
      }
    };
    LatheGeometry = class _LatheGeometry extends BufferGeometry {
      constructor(points = [new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
        super();
        this.type = "LatheGeometry";
        this.parameters = {
          points,
          segments,
          phiStart,
          phiLength
        };
        segments = Math.floor(segments);
        phiLength = clamp2(phiLength, 0, Math.PI * 2);
        const indices = [];
        const vertices = [];
        const uvs = [];
        const initNormals = [];
        const normals = [];
        const inverseSegments = 1 / segments;
        const vertex = new Vector3();
        const uv = new Vector2();
        const normal = new Vector3();
        const curNormal = new Vector3();
        const prevNormal = new Vector3();
        let dx = 0;
        let dy = 0;
        for (let j = 0; j <= points.length - 1; j++) {
          switch (j) {
            case 0:
              dx = points[j + 1].x - points[j].x;
              dy = points[j + 1].y - points[j].y;
              normal.x = dy * 1;
              normal.y = -dx;
              normal.z = dy * 0;
              prevNormal.copy(normal);
              normal.normalize();
              initNormals.push(normal.x, normal.y, normal.z);
              break;
            case points.length - 1:
              initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
              break;
            default:
              dx = points[j + 1].x - points[j].x;
              dy = points[j + 1].y - points[j].y;
              normal.x = dy * 1;
              normal.y = -dx;
              normal.z = dy * 0;
              curNormal.copy(normal);
              normal.x += prevNormal.x;
              normal.y += prevNormal.y;
              normal.z += prevNormal.z;
              normal.normalize();
              initNormals.push(normal.x, normal.y, normal.z);
              prevNormal.copy(curNormal);
          }
        }
        for (let i = 0; i <= segments; i++) {
          const phi = phiStart + i * inverseSegments * phiLength;
          const sin = Math.sin(phi);
          const cos = Math.cos(phi);
          for (let j = 0; j <= points.length - 1; j++) {
            vertex.x = points[j].x * sin;
            vertex.y = points[j].y;
            vertex.z = points[j].x * cos;
            vertices.push(vertex.x, vertex.y, vertex.z);
            uv.x = i / segments;
            uv.y = j / (points.length - 1);
            uvs.push(uv.x, uv.y);
            const x = initNormals[3 * j + 0] * sin;
            const y = initNormals[3 * j + 1];
            const z = initNormals[3 * j + 0] * cos;
            normals.push(x, y, z);
          }
        }
        for (let i = 0; i < segments; i++) {
          for (let j = 0; j < points.length - 1; j++) {
            const base = j + i * points.length;
            const a = base;
            const b = base + points.length;
            const c = base + points.length + 1;
            const d2 = base + 1;
            indices.push(a, b, d2);
            indices.push(c, d2, b);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
      }
    };
    CapsuleGeometry = class _CapsuleGeometry extends LatheGeometry {
      constructor(radius = 1, length = 1, capSegments = 4, radialSegments = 8) {
        const path = new Path();
        path.absarc(0, -length / 2, radius, Math.PI * 1.5, 0);
        path.absarc(0, length / 2, radius, 0, Math.PI * 0.5);
        super(path.getPoints(capSegments), radialSegments);
        this.type = "CapsuleGeometry";
        this.parameters = {
          radius,
          length,
          capSegments,
          radialSegments
        };
      }
      static fromJSON(data) {
        return new _CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
      }
    };
    CircleGeometry = class _CircleGeometry extends BufferGeometry {
      constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2) {
        super();
        this.type = "CircleGeometry";
        this.parameters = {
          radius,
          segments,
          thetaStart,
          thetaLength
        };
        segments = Math.max(3, segments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const vertex = new Vector3();
        const uv = new Vector2();
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for (let s = 0, i = 3; s <= segments; s++, i += 3) {
          const segment = thetaStart + s / segments * thetaLength;
          vertex.x = radius * Math.cos(segment);
          vertex.y = radius * Math.sin(segment);
          vertices.push(vertex.x, vertex.y, vertex.z);
          normals.push(0, 0, 1);
          uv.x = (vertices[i] / radius + 1) / 2;
          uv.y = (vertices[i + 1] / radius + 1) / 2;
          uvs.push(uv.x, uv.y);
        }
        for (let i = 1; i <= segments; i++) {
          indices.push(i, i + 1, 0);
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
      }
    };
    CylinderGeometry = class _CylinderGeometry extends BufferGeometry {
      constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
        super();
        this.type = "CylinderGeometry";
        this.parameters = {
          radiusTop,
          radiusBottom,
          height,
          radialSegments,
          heightSegments,
          openEnded,
          thetaStart,
          thetaLength
        };
        const scope = this;
        radialSegments = Math.floor(radialSegments);
        heightSegments = Math.floor(heightSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let index = 0;
        const indexArray = [];
        const halfHeight = height / 2;
        let groupStart = 0;
        generateTorso();
        if (openEnded === false) {
          if (radiusTop > 0) generateCap(true);
          if (radiusBottom > 0) generateCap(false);
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function generateTorso() {
          const normal = new Vector3();
          const vertex = new Vector3();
          let groupCount = 0;
          const slope = (radiusBottom - radiusTop) / height;
          for (let y = 0; y <= heightSegments; y++) {
            const indexRow = [];
            const v2 = y / heightSegments;
            const radius = v2 * (radiusBottom - radiusTop) + radiusTop;
            for (let x = 0; x <= radialSegments; x++) {
              const u = x / radialSegments;
              const theta = u * thetaLength + thetaStart;
              const sinTheta = Math.sin(theta);
              const cosTheta = Math.cos(theta);
              vertex.x = radius * sinTheta;
              vertex.y = -v2 * height + halfHeight;
              vertex.z = radius * cosTheta;
              vertices.push(vertex.x, vertex.y, vertex.z);
              normal.set(sinTheta, slope, cosTheta).normalize();
              normals.push(normal.x, normal.y, normal.z);
              uvs.push(u, 1 - v2);
              indexRow.push(index++);
            }
            indexArray.push(indexRow);
          }
          for (let x = 0; x < radialSegments; x++) {
            for (let y = 0; y < heightSegments; y++) {
              const a = indexArray[y][x];
              const b = indexArray[y + 1][x];
              const c = indexArray[y + 1][x + 1];
              const d2 = indexArray[y][x + 1];
              indices.push(a, b, d2);
              indices.push(b, c, d2);
              groupCount += 6;
            }
          }
          scope.addGroup(groupStart, groupCount, 0);
          groupStart += groupCount;
        }
        function generateCap(top) {
          const centerIndexStart = index;
          const uv = new Vector2();
          const vertex = new Vector3();
          let groupCount = 0;
          const radius = top === true ? radiusTop : radiusBottom;
          const sign2 = top === true ? 1 : -1;
          for (let x = 1; x <= radialSegments; x++) {
            vertices.push(0, halfHeight * sign2, 0);
            normals.push(0, sign2, 0);
            uvs.push(0.5, 0.5);
            index++;
          }
          const centerIndexEnd = index;
          for (let x = 0; x <= radialSegments; x++) {
            const u = x / radialSegments;
            const theta = u * thetaLength + thetaStart;
            const cosTheta = Math.cos(theta);
            const sinTheta = Math.sin(theta);
            vertex.x = radius * sinTheta;
            vertex.y = halfHeight * sign2;
            vertex.z = radius * cosTheta;
            vertices.push(vertex.x, vertex.y, vertex.z);
            normals.push(0, sign2, 0);
            uv.x = cosTheta * 0.5 + 0.5;
            uv.y = sinTheta * 0.5 * sign2 + 0.5;
            uvs.push(uv.x, uv.y);
            index++;
          }
          for (let x = 0; x < radialSegments; x++) {
            const c = centerIndexStart + x;
            const i = centerIndexEnd + x;
            if (top === true) {
              indices.push(i, i + 1, c);
            } else {
              indices.push(i + 1, i, c);
            }
            groupCount += 3;
          }
          scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
          groupStart += groupCount;
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
      }
    };
    ConeGeometry = class _ConeGeometry extends CylinderGeometry {
      constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
        super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
        this.type = "ConeGeometry";
        this.parameters = {
          radius,
          height,
          radialSegments,
          heightSegments,
          openEnded,
          thetaStart,
          thetaLength
        };
      }
      static fromJSON(data) {
        return new _ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
      }
    };
    PolyhedronGeometry = class _PolyhedronGeometry extends BufferGeometry {
      constructor(vertices = [], indices = [], radius = 1, detail = 0) {
        super();
        this.type = "PolyhedronGeometry";
        this.parameters = {
          vertices,
          indices,
          radius,
          detail
        };
        const vertexBuffer = [];
        const uvBuffer = [];
        subdivide(detail);
        applyRadius(radius);
        generateUVs();
        this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
        this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
        if (detail === 0) {
          this.computeVertexNormals();
        } else {
          this.normalizeNormals();
        }
        function subdivide(detail2) {
          const a = new Vector3();
          const b = new Vector3();
          const c = new Vector3();
          for (let i = 0; i < indices.length; i += 3) {
            getVertexByIndex(indices[i + 0], a);
            getVertexByIndex(indices[i + 1], b);
            getVertexByIndex(indices[i + 2], c);
            subdivideFace(a, b, c, detail2);
          }
        }
        function subdivideFace(a, b, c, detail2) {
          const cols = detail2 + 1;
          const v2 = [];
          for (let i = 0; i <= cols; i++) {
            v2[i] = [];
            const aj = a.clone().lerp(c, i / cols);
            const bj = b.clone().lerp(c, i / cols);
            const rows = cols - i;
            for (let j = 0; j <= rows; j++) {
              if (j === 0 && i === cols) {
                v2[i][j] = aj;
              } else {
                v2[i][j] = aj.clone().lerp(bj, j / rows);
              }
            }
          }
          for (let i = 0; i < cols; i++) {
            for (let j = 0; j < 2 * (cols - i) - 1; j++) {
              const k = Math.floor(j / 2);
              if (j % 2 === 0) {
                pushVertex(v2[i][k + 1]);
                pushVertex(v2[i + 1][k]);
                pushVertex(v2[i][k]);
              } else {
                pushVertex(v2[i][k + 1]);
                pushVertex(v2[i + 1][k + 1]);
                pushVertex(v2[i + 1][k]);
              }
            }
          }
        }
        function applyRadius(radius2) {
          const vertex = new Vector3();
          for (let i = 0; i < vertexBuffer.length; i += 3) {
            vertex.x = vertexBuffer[i + 0];
            vertex.y = vertexBuffer[i + 1];
            vertex.z = vertexBuffer[i + 2];
            vertex.normalize().multiplyScalar(radius2);
            vertexBuffer[i + 0] = vertex.x;
            vertexBuffer[i + 1] = vertex.y;
            vertexBuffer[i + 2] = vertex.z;
          }
        }
        function generateUVs() {
          const vertex = new Vector3();
          for (let i = 0; i < vertexBuffer.length; i += 3) {
            vertex.x = vertexBuffer[i + 0];
            vertex.y = vertexBuffer[i + 1];
            vertex.z = vertexBuffer[i + 2];
            const u = azimuth(vertex) / 2 / Math.PI + 0.5;
            const v2 = inclination(vertex) / Math.PI + 0.5;
            uvBuffer.push(u, 1 - v2);
          }
          correctUVs();
          correctSeam();
        }
        function correctSeam() {
          for (let i = 0; i < uvBuffer.length; i += 6) {
            const x0 = uvBuffer[i + 0];
            const x1 = uvBuffer[i + 2];
            const x2 = uvBuffer[i + 4];
            const max2 = Math.max(x0, x1, x2);
            const min = Math.min(x0, x1, x2);
            if (max2 > 0.9 && min < 0.1) {
              if (x0 < 0.2) uvBuffer[i + 0] += 1;
              if (x1 < 0.2) uvBuffer[i + 2] += 1;
              if (x2 < 0.2) uvBuffer[i + 4] += 1;
            }
          }
        }
        function pushVertex(vertex) {
          vertexBuffer.push(vertex.x, vertex.y, vertex.z);
        }
        function getVertexByIndex(index, vertex) {
          const stride = index * 3;
          vertex.x = vertices[stride + 0];
          vertex.y = vertices[stride + 1];
          vertex.z = vertices[stride + 2];
        }
        function correctUVs() {
          const a = new Vector3();
          const b = new Vector3();
          const c = new Vector3();
          const centroid = new Vector3();
          const uvA = new Vector2();
          const uvB = new Vector2();
          const uvC = new Vector2();
          for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
            a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
            b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
            c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
            uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
            uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
            uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
            centroid.copy(a).add(b).add(c).divideScalar(3);
            const azi = azimuth(centroid);
            correctUV(uvA, j + 0, a, azi);
            correctUV(uvB, j + 2, b, azi);
            correctUV(uvC, j + 4, c, azi);
          }
        }
        function correctUV(uv, stride, vector, azimuth2) {
          if (azimuth2 < 0 && uv.x === 1) {
            uvBuffer[stride] = uv.x - 1;
          }
          if (vector.x === 0 && vector.z === 0) {
            uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
          }
        }
        function azimuth(vector) {
          return Math.atan2(vector.z, -vector.x);
        }
        function inclination(vector) {
          return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
      }
    };
    DodecahedronGeometry = class _DodecahedronGeometry extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const t = (1 + Math.sqrt(5)) / 2;
        const r = 1 / t;
        const vertices = [
          // (±1, ±1, ±1)
          -1,
          -1,
          -1,
          -1,
          -1,
          1,
          -1,
          1,
          -1,
          -1,
          1,
          1,
          1,
          -1,
          -1,
          1,
          -1,
          1,
          1,
          1,
          -1,
          1,
          1,
          1,
          // (0, ±1/φ, ±φ)
          0,
          -r,
          -t,
          0,
          -r,
          t,
          0,
          r,
          -t,
          0,
          r,
          t,
          // (±1/φ, ±φ, 0)
          -r,
          -t,
          0,
          -r,
          t,
          0,
          r,
          -t,
          0,
          r,
          t,
          0,
          // (±φ, 0, ±1/φ)
          -t,
          0,
          -r,
          t,
          0,
          -r,
          -t,
          0,
          r,
          t,
          0,
          r
        ];
        const indices = [
          3,
          11,
          7,
          3,
          7,
          15,
          3,
          15,
          13,
          7,
          19,
          17,
          7,
          17,
          6,
          7,
          6,
          15,
          17,
          4,
          8,
          17,
          8,
          10,
          17,
          10,
          6,
          8,
          0,
          16,
          8,
          16,
          2,
          8,
          2,
          10,
          0,
          12,
          1,
          0,
          1,
          18,
          0,
          18,
          16,
          6,
          10,
          2,
          6,
          2,
          13,
          6,
          13,
          15,
          2,
          16,
          18,
          2,
          18,
          3,
          2,
          3,
          13,
          18,
          1,
          9,
          18,
          9,
          11,
          18,
          11,
          3,
          4,
          14,
          12,
          4,
          12,
          0,
          4,
          0,
          8,
          11,
          9,
          5,
          11,
          5,
          19,
          11,
          19,
          7,
          19,
          5,
          14,
          19,
          14,
          4,
          19,
          4,
          17,
          1,
          12,
          14,
          1,
          14,
          5,
          1,
          5,
          9
        ];
        super(vertices, indices, radius, detail);
        this.type = "DodecahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new _DodecahedronGeometry(data.radius, data.detail);
      }
    };
    _v0 = new Vector3();
    _v1$1 = new Vector3();
    _normal = new Vector3();
    _triangle = new Triangle();
    EdgesGeometry = class extends BufferGeometry {
      constructor(geometry = null, thresholdAngle = 1) {
        super();
        this.type = "EdgesGeometry";
        this.parameters = {
          geometry,
          thresholdAngle
        };
        if (geometry !== null) {
          const precisionPoints = 4;
          const precision = Math.pow(10, precisionPoints);
          const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
          const indexAttr = geometry.getIndex();
          const positionAttr = geometry.getAttribute("position");
          const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
          const indexArr = [0, 0, 0];
          const vertKeys = ["a", "b", "c"];
          const hashes = new Array(3);
          const edgeData = {};
          const vertices = [];
          for (let i = 0; i < indexCount; i += 3) {
            if (indexAttr) {
              indexArr[0] = indexAttr.getX(i);
              indexArr[1] = indexAttr.getX(i + 1);
              indexArr[2] = indexAttr.getX(i + 2);
            } else {
              indexArr[0] = i;
              indexArr[1] = i + 1;
              indexArr[2] = i + 2;
            }
            const { a, b, c } = _triangle;
            a.fromBufferAttribute(positionAttr, indexArr[0]);
            b.fromBufferAttribute(positionAttr, indexArr[1]);
            c.fromBufferAttribute(positionAttr, indexArr[2]);
            _triangle.getNormal(_normal);
            hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
            hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
            hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
            if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
              continue;
            }
            for (let j = 0; j < 3; j++) {
              const jNext = (j + 1) % 3;
              const vecHash0 = hashes[j];
              const vecHash1 = hashes[jNext];
              const v0 = _triangle[vertKeys[j]];
              const v1 = _triangle[vertKeys[jNext]];
              const hash = `${vecHash0}_${vecHash1}`;
              const reverseHash = `${vecHash1}_${vecHash0}`;
              if (reverseHash in edgeData && edgeData[reverseHash]) {
                if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                  vertices.push(v0.x, v0.y, v0.z);
                  vertices.push(v1.x, v1.y, v1.z);
                }
                edgeData[reverseHash] = null;
              } else if (!(hash in edgeData)) {
                edgeData[hash] = {
                  index0: indexArr[j],
                  index1: indexArr[jNext],
                  normal: _normal.clone()
                };
              }
            }
          }
          for (const key in edgeData) {
            if (edgeData[key]) {
              const { index0, index1 } = edgeData[key];
              _v0.fromBufferAttribute(positionAttr, index0);
              _v1$1.fromBufferAttribute(positionAttr, index1);
              vertices.push(_v0.x, _v0.y, _v0.z);
              vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
            }
          }
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
    };
    Shape = class extends Path {
      constructor(points) {
        super(points);
        this.uuid = generateUUID();
        this.type = "Shape";
        this.holes = [];
      }
      getPointsHoles(divisions) {
        const holesPts = [];
        for (let i = 0, l = this.holes.length; i < l; i++) {
          holesPts[i] = this.holes[i].getPoints(divisions);
        }
        return holesPts;
      }
      // get points of shape and holes (keypoints based on segments parameter)
      extractPoints(divisions) {
        return {
          shape: this.getPoints(divisions),
          holes: this.getPointsHoles(divisions)
        };
      }
      copy(source) {
        super.copy(source);
        this.holes = [];
        for (let i = 0, l = source.holes.length; i < l; i++) {
          const hole = source.holes[i];
          this.holes.push(hole.clone());
        }
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.uuid = this.uuid;
        data.holes = [];
        for (let i = 0, l = this.holes.length; i < l; i++) {
          const hole = this.holes[i];
          data.holes.push(hole.toJSON());
        }
        return data;
      }
      fromJSON(json) {
        super.fromJSON(json);
        this.uuid = json.uuid;
        this.holes = [];
        for (let i = 0, l = json.holes.length; i < l; i++) {
          const hole = json.holes[i];
          this.holes.push(new Path().fromJSON(hole));
        }
        return this;
      }
    };
    Earcut = {
      triangulate: function(data, holeIndices, dim = 2) {
        const hasHoles = holeIndices && holeIndices.length;
        const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        let outerNode = linkedList(data, 0, outerLen, dim, true);
        const triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        let minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];
          for (let i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
          }
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
      }
    };
    ShapeUtils = class _ShapeUtils {
      // calculate area of the contour polygon
      static area(contour) {
        const n = contour.length;
        let a = 0;
        for (let p2 = n - 1, q = 0; q < n; p2 = q++) {
          a += contour[p2].x * contour[q].y - contour[q].x * contour[p2].y;
        }
        return a * 0.5;
      }
      static isClockWise(pts) {
        return _ShapeUtils.area(pts) < 0;
      }
      static triangulateShape(contour, holes) {
        const vertices = [];
        const holeIndices = [];
        const faces = [];
        removeDupEndPts(contour);
        addContour(vertices, contour);
        let holeIndex = contour.length;
        holes.forEach(removeDupEndPts);
        for (let i = 0; i < holes.length; i++) {
          holeIndices.push(holeIndex);
          holeIndex += holes[i].length;
          addContour(vertices, holes[i]);
        }
        const triangles = Earcut.triangulate(vertices, holeIndices);
        for (let i = 0; i < triangles.length; i += 3) {
          faces.push(triangles.slice(i, i + 3));
        }
        return faces;
      }
    };
    ExtrudeGeometry = class _ExtrudeGeometry extends BufferGeometry {
      constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
        super();
        this.type = "ExtrudeGeometry";
        this.parameters = {
          shapes,
          options
        };
        shapes = Array.isArray(shapes) ? shapes : [shapes];
        const scope = this;
        const verticesArray = [];
        const uvArray = [];
        for (let i = 0, l = shapes.length; i < l; i++) {
          const shape = shapes[i];
          addShape(shape);
        }
        this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
        this.computeVertexNormals();
        function addShape(shape) {
          const placeholder = [];
          const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
          const steps = options.steps !== void 0 ? options.steps : 1;
          const depth = options.depth !== void 0 ? options.depth : 1;
          let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
          let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
          let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
          let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
          let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
          const extrudePath = options.extrudePath;
          const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
          let extrudePts, extrudeByPath = false;
          let splineTube, binormal, normal, position2;
          if (extrudePath) {
            extrudePts = extrudePath.getSpacedPoints(steps);
            extrudeByPath = true;
            bevelEnabled = false;
            splineTube = extrudePath.computeFrenetFrames(steps, false);
            binormal = new Vector3();
            normal = new Vector3();
            position2 = new Vector3();
          }
          if (!bevelEnabled) {
            bevelSegments = 0;
            bevelThickness = 0;
            bevelSize = 0;
            bevelOffset = 0;
          }
          const shapePoints = shape.extractPoints(curveSegments);
          let vertices = shapePoints.shape;
          const holes = shapePoints.holes;
          const reverse = !ShapeUtils.isClockWise(vertices);
          if (reverse) {
            vertices = vertices.reverse();
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              if (ShapeUtils.isClockWise(ahole)) {
                holes[h] = ahole.reverse();
              }
            }
          }
          const faces = ShapeUtils.triangulateShape(vertices, holes);
          const contour = vertices;
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            vertices = vertices.concat(ahole);
          }
          function scalePt2(pt, vec, size) {
            if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");
            return pt.clone().addScaledVector(vec, size);
          }
          const vlen = vertices.length, flen = faces.length;
          function getBevelVec(inPt, inPrev, inNext) {
            let v_trans_x, v_trans_y, shrink_by;
            const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
            const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
            const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
            const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
            if (Math.abs(collinear0) > Number.EPSILON) {
              const v_prev_len = Math.sqrt(v_prev_lensq);
              const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
              const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
              const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
              const ptNextShift_x = inNext.x - v_next_y / v_next_len;
              const ptNextShift_y = inNext.y + v_next_x / v_next_len;
              const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
              v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
              v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
              const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
              if (v_trans_lensq <= 2) {
                return new Vector2(v_trans_x, v_trans_y);
              } else {
                shrink_by = Math.sqrt(v_trans_lensq / 2);
              }
            } else {
              let direction_eq = false;
              if (v_prev_x > Number.EPSILON) {
                if (v_next_x > Number.EPSILON) {
                  direction_eq = true;
                }
              } else {
                if (v_prev_x < -Number.EPSILON) {
                  if (v_next_x < -Number.EPSILON) {
                    direction_eq = true;
                  }
                } else {
                  if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                    direction_eq = true;
                  }
                }
              }
              if (direction_eq) {
                v_trans_x = -v_prev_y;
                v_trans_y = v_prev_x;
                shrink_by = Math.sqrt(v_prev_lensq);
              } else {
                v_trans_x = v_prev_x;
                v_trans_y = v_prev_y;
                shrink_by = Math.sqrt(v_prev_lensq / 2);
              }
            }
            return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
          }
          const contourMovements = [];
          for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
            if (j === il) j = 0;
            if (k === il) k = 0;
            contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
          }
          const holesMovements = [];
          let oneHoleMovements, verticesMovements = contourMovements.concat();
          for (let h = 0, hl = holes.length; h < hl; h++) {
            const ahole = holes[h];
            oneHoleMovements = [];
            for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
              if (j === il) j = 0;
              if (k === il) k = 0;
              oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
            }
            holesMovements.push(oneHoleMovements);
            verticesMovements = verticesMovements.concat(oneHoleMovements);
          }
          for (let b = 0; b < bevelSegments; b++) {
            const t = b / bevelSegments;
            const z = bevelThickness * Math.cos(t * Math.PI / 2);
            const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
            for (let i = 0, il = contour.length; i < il; i++) {
              const vert = scalePt2(contour[i], contourMovements[i], bs2);
              v2(vert.x, vert.y, -z);
            }
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              oneHoleMovements = holesMovements[h];
              for (let i = 0, il = ahole.length; i < il; i++) {
                const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
                v2(vert.x, vert.y, -z);
              }
            }
          }
          const bs = bevelSize + bevelOffset;
          for (let i = 0; i < vlen; i++) {
            const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
            if (!extrudeByPath) {
              v2(vert.x, vert.y, 0);
            } else {
              normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
              binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
              position2.copy(extrudePts[0]).add(normal).add(binormal);
              v2(position2.x, position2.y, position2.z);
            }
          }
          for (let s = 1; s <= steps; s++) {
            for (let i = 0; i < vlen; i++) {
              const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
              if (!extrudeByPath) {
                v2(vert.x, vert.y, depth / steps * s);
              } else {
                normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
                binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
                position2.copy(extrudePts[s]).add(normal).add(binormal);
                v2(position2.x, position2.y, position2.z);
              }
            }
          }
          for (let b = bevelSegments - 1; b >= 0; b--) {
            const t = b / bevelSegments;
            const z = bevelThickness * Math.cos(t * Math.PI / 2);
            const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
            for (let i = 0, il = contour.length; i < il; i++) {
              const vert = scalePt2(contour[i], contourMovements[i], bs2);
              v2(vert.x, vert.y, depth + z);
            }
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              oneHoleMovements = holesMovements[h];
              for (let i = 0, il = ahole.length; i < il; i++) {
                const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
                if (!extrudeByPath) {
                  v2(vert.x, vert.y, depth + z);
                } else {
                  v2(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                }
              }
            }
          }
          buildLidFaces();
          buildSideFaces();
          function buildLidFaces() {
            const start = verticesArray.length / 3;
            if (bevelEnabled) {
              let layer = 0;
              let offset = vlen * layer;
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[2] + offset, face[1] + offset, face[0] + offset);
              }
              layer = steps + bevelSegments * 2;
              offset = vlen * layer;
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[0] + offset, face[1] + offset, face[2] + offset);
              }
            } else {
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[2], face[1], face[0]);
              }
              for (let i = 0; i < flen; i++) {
                const face = faces[i];
                f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
              }
            }
            scope.addGroup(start, verticesArray.length / 3 - start, 0);
          }
          function buildSideFaces() {
            const start = verticesArray.length / 3;
            let layeroffset = 0;
            sidewalls(contour, layeroffset);
            layeroffset += contour.length;
            for (let h = 0, hl = holes.length; h < hl; h++) {
              const ahole = holes[h];
              sidewalls(ahole, layeroffset);
              layeroffset += ahole.length;
            }
            scope.addGroup(start, verticesArray.length / 3 - start, 1);
          }
          function sidewalls(contour2, layeroffset) {
            let i = contour2.length;
            while (--i >= 0) {
              const j = i;
              let k = i - 1;
              if (k < 0) k = contour2.length - 1;
              for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
                const slen1 = vlen * s;
                const slen2 = vlen * (s + 1);
                const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d2 = layeroffset + j + slen2;
                f4(a, b, c, d2);
              }
            }
          }
          function v2(x, y, z) {
            placeholder.push(x);
            placeholder.push(y);
            placeholder.push(z);
          }
          function f3(a, b, c) {
            addVertex(a);
            addVertex(b);
            addVertex(c);
            const nextIndex = verticesArray.length / 3;
            const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
            addUV(uvs[0]);
            addUV(uvs[1]);
            addUV(uvs[2]);
          }
          function f4(a, b, c, d2) {
            addVertex(a);
            addVertex(b);
            addVertex(d2);
            addVertex(b);
            addVertex(c);
            addVertex(d2);
            const nextIndex = verticesArray.length / 3;
            const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
            addUV(uvs[0]);
            addUV(uvs[1]);
            addUV(uvs[3]);
            addUV(uvs[1]);
            addUV(uvs[2]);
            addUV(uvs[3]);
          }
          function addVertex(index) {
            verticesArray.push(placeholder[index * 3 + 0]);
            verticesArray.push(placeholder[index * 3 + 1]);
            verticesArray.push(placeholder[index * 3 + 2]);
          }
          function addUV(vector2) {
            uvArray.push(vector2.x);
            uvArray.push(vector2.y);
          }
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        const options = this.parameters.options;
        return toJSON$1(shapes, options, data);
      }
      static fromJSON(data, shapes) {
        const geometryShapes = [];
        for (let j = 0, jl = data.shapes.length; j < jl; j++) {
          const shape = shapes[data.shapes[j]];
          geometryShapes.push(shape);
        }
        const extrudePath = data.options.extrudePath;
        if (extrudePath !== void 0) {
          data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
        }
        return new _ExtrudeGeometry(geometryShapes, data.options);
      }
    };
    WorldUVGenerator = {
      generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        return [
          new Vector2(a_x, a_y),
          new Vector2(b_x, b_y),
          new Vector2(c_x, c_y)
        ];
      },
      generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const a_z = vertices[indexA * 3 + 2];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const b_z = vertices[indexB * 3 + 2];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        const c_z = vertices[indexC * 3 + 2];
        const d_x = vertices[indexD * 3];
        const d_y = vertices[indexD * 3 + 1];
        const d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
          return [
            new Vector2(a_x, 1 - a_z),
            new Vector2(b_x, 1 - b_z),
            new Vector2(c_x, 1 - c_z),
            new Vector2(d_x, 1 - d_z)
          ];
        } else {
          return [
            new Vector2(a_y, 1 - a_z),
            new Vector2(b_y, 1 - b_z),
            new Vector2(c_y, 1 - c_z),
            new Vector2(d_y, 1 - d_z)
          ];
        }
      }
    };
    IcosahedronGeometry = class _IcosahedronGeometry extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const t = (1 + Math.sqrt(5)) / 2;
        const vertices = [
          -1,
          t,
          0,
          1,
          t,
          0,
          -1,
          -t,
          0,
          1,
          -t,
          0,
          0,
          -1,
          t,
          0,
          1,
          t,
          0,
          -1,
          -t,
          0,
          1,
          -t,
          t,
          0,
          -1,
          t,
          0,
          1,
          -t,
          0,
          -1,
          -t,
          0,
          1
        ];
        const indices = [
          0,
          11,
          5,
          0,
          5,
          1,
          0,
          1,
          7,
          0,
          7,
          10,
          0,
          10,
          11,
          1,
          5,
          9,
          5,
          11,
          4,
          11,
          10,
          2,
          10,
          7,
          6,
          7,
          1,
          8,
          3,
          9,
          4,
          3,
          4,
          2,
          3,
          2,
          6,
          3,
          6,
          8,
          3,
          8,
          9,
          4,
          9,
          5,
          2,
          4,
          11,
          6,
          2,
          10,
          8,
          6,
          7,
          9,
          8,
          1
        ];
        super(vertices, indices, radius, detail);
        this.type = "IcosahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new _IcosahedronGeometry(data.radius, data.detail);
      }
    };
    OctahedronGeometry = class _OctahedronGeometry extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const vertices = [
          1,
          0,
          0,
          -1,
          0,
          0,
          0,
          1,
          0,
          0,
          -1,
          0,
          0,
          0,
          1,
          0,
          0,
          -1
        ];
        const indices = [
          0,
          2,
          4,
          0,
          4,
          3,
          0,
          3,
          5,
          0,
          5,
          2,
          1,
          2,
          5,
          1,
          5,
          3,
          1,
          3,
          4,
          1,
          4,
          2
        ];
        super(vertices, indices, radius, detail);
        this.type = "OctahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new _OctahedronGeometry(data.radius, data.detail);
      }
    };
    RingGeometry = class _RingGeometry extends BufferGeometry {
      constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
        super();
        this.type = "RingGeometry";
        this.parameters = {
          innerRadius,
          outerRadius,
          thetaSegments,
          phiSegments,
          thetaStart,
          thetaLength
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let radius = innerRadius;
        const radiusStep = (outerRadius - innerRadius) / phiSegments;
        const vertex = new Vector3();
        const uv = new Vector2();
        for (let j = 0; j <= phiSegments; j++) {
          for (let i = 0; i <= thetaSegments; i++) {
            const segment = thetaStart + i / thetaSegments * thetaLength;
            vertex.x = radius * Math.cos(segment);
            vertex.y = radius * Math.sin(segment);
            vertices.push(vertex.x, vertex.y, vertex.z);
            normals.push(0, 0, 1);
            uv.x = (vertex.x / outerRadius + 1) / 2;
            uv.y = (vertex.y / outerRadius + 1) / 2;
            uvs.push(uv.x, uv.y);
          }
          radius += radiusStep;
        }
        for (let j = 0; j < phiSegments; j++) {
          const thetaSegmentLevel = j * (thetaSegments + 1);
          for (let i = 0; i < thetaSegments; i++) {
            const segment = i + thetaSegmentLevel;
            const a = segment;
            const b = segment + thetaSegments + 1;
            const c = segment + thetaSegments + 2;
            const d2 = segment + 1;
            indices.push(a, b, d2);
            indices.push(b, c, d2);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
      }
    };
    ShapeGeometry = class _ShapeGeometry extends BufferGeometry {
      constructor(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {
        super();
        this.type = "ShapeGeometry";
        this.parameters = {
          shapes,
          curveSegments
        };
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        let groupStart = 0;
        let groupCount = 0;
        if (Array.isArray(shapes) === false) {
          addShape(shapes);
        } else {
          for (let i = 0; i < shapes.length; i++) {
            addShape(shapes[i]);
            this.addGroup(groupStart, groupCount, i);
            groupStart += groupCount;
            groupCount = 0;
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function addShape(shape) {
          const indexOffset = vertices.length / 3;
          const points = shape.extractPoints(curveSegments);
          let shapeVertices = points.shape;
          const shapeHoles = points.holes;
          if (ShapeUtils.isClockWise(shapeVertices) === false) {
            shapeVertices = shapeVertices.reverse();
          }
          for (let i = 0, l = shapeHoles.length; i < l; i++) {
            const shapeHole = shapeHoles[i];
            if (ShapeUtils.isClockWise(shapeHole) === true) {
              shapeHoles[i] = shapeHole.reverse();
            }
          }
          const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
          for (let i = 0, l = shapeHoles.length; i < l; i++) {
            const shapeHole = shapeHoles[i];
            shapeVertices = shapeVertices.concat(shapeHole);
          }
          for (let i = 0, l = shapeVertices.length; i < l; i++) {
            const vertex = shapeVertices[i];
            vertices.push(vertex.x, vertex.y, 0);
            normals.push(0, 0, 1);
            uvs.push(vertex.x, vertex.y);
          }
          for (let i = 0, l = faces.length; i < l; i++) {
            const face = faces[i];
            const a = face[0] + indexOffset;
            const b = face[1] + indexOffset;
            const c = face[2] + indexOffset;
            indices.push(a, b, c);
            groupCount += 3;
          }
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        return toJSON(shapes, data);
      }
      static fromJSON(data, shapes) {
        const geometryShapes = [];
        for (let j = 0, jl = data.shapes.length; j < jl; j++) {
          const shape = shapes[data.shapes[j]];
          geometryShapes.push(shape);
        }
        return new _ShapeGeometry(geometryShapes, data.curveSegments);
      }
    };
    SphereGeometry = class _SphereGeometry extends BufferGeometry {
      constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
        super();
        this.type = "SphereGeometry";
        this.parameters = {
          radius,
          widthSegments,
          heightSegments,
          phiStart,
          phiLength,
          thetaStart,
          thetaLength
        };
        widthSegments = Math.max(3, Math.floor(widthSegments));
        heightSegments = Math.max(2, Math.floor(heightSegments));
        const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
        let index = 0;
        const grid = [];
        const vertex = new Vector3();
        const normal = new Vector3();
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for (let iy = 0; iy <= heightSegments; iy++) {
          const verticesRow = [];
          const v2 = iy / heightSegments;
          let uOffset = 0;
          if (iy === 0 && thetaStart === 0) {
            uOffset = 0.5 / widthSegments;
          } else if (iy === heightSegments && thetaEnd === Math.PI) {
            uOffset = -0.5 / widthSegments;
          }
          for (let ix = 0; ix <= widthSegments; ix++) {
            const u = ix / widthSegments;
            vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v2 * thetaLength);
            vertex.y = radius * Math.cos(thetaStart + v2 * thetaLength);
            vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v2 * thetaLength);
            vertices.push(vertex.x, vertex.y, vertex.z);
            normal.copy(vertex).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(u + uOffset, 1 - v2);
            verticesRow.push(index++);
          }
          grid.push(verticesRow);
        }
        for (let iy = 0; iy < heightSegments; iy++) {
          for (let ix = 0; ix < widthSegments; ix++) {
            const a = grid[iy][ix + 1];
            const b = grid[iy][ix];
            const c = grid[iy + 1][ix];
            const d2 = grid[iy + 1][ix + 1];
            if (iy !== 0 || thetaStart > 0) indices.push(a, b, d2);
            if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d2);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
      }
    };
    TetrahedronGeometry = class _TetrahedronGeometry extends PolyhedronGeometry {
      constructor(radius = 1, detail = 0) {
        const vertices = [
          1,
          1,
          1,
          -1,
          -1,
          1,
          -1,
          1,
          -1,
          1,
          -1,
          -1
        ];
        const indices = [
          2,
          1,
          0,
          0,
          3,
          2,
          1,
          3,
          0,
          2,
          3,
          1
        ];
        super(vertices, indices, radius, detail);
        this.type = "TetrahedronGeometry";
        this.parameters = {
          radius,
          detail
        };
      }
      static fromJSON(data) {
        return new _TetrahedronGeometry(data.radius, data.detail);
      }
    };
    TorusGeometry = class _TorusGeometry extends BufferGeometry {
      constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2) {
        super();
        this.type = "TorusGeometry";
        this.parameters = {
          radius,
          tube,
          radialSegments,
          tubularSegments,
          arc
        };
        radialSegments = Math.floor(radialSegments);
        tubularSegments = Math.floor(tubularSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const center = new Vector3();
        const vertex = new Vector3();
        const normal = new Vector3();
        for (let j = 0; j <= radialSegments; j++) {
          for (let i = 0; i <= tubularSegments; i++) {
            const u = i / tubularSegments * arc;
            const v2 = j / radialSegments * Math.PI * 2;
            vertex.x = (radius + tube * Math.cos(v2)) * Math.cos(u);
            vertex.y = (radius + tube * Math.cos(v2)) * Math.sin(u);
            vertex.z = tube * Math.sin(v2);
            vertices.push(vertex.x, vertex.y, vertex.z);
            center.x = radius * Math.cos(u);
            center.y = radius * Math.sin(u);
            normal.subVectors(vertex, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
          }
        }
        for (let j = 1; j <= radialSegments; j++) {
          for (let i = 1; i <= tubularSegments; i++) {
            const a = (tubularSegments + 1) * j + i - 1;
            const b = (tubularSegments + 1) * (j - 1) + i - 1;
            const c = (tubularSegments + 1) * (j - 1) + i;
            const d2 = (tubularSegments + 1) * j + i;
            indices.push(a, b, d2);
            indices.push(b, c, d2);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
      }
    };
    TorusKnotGeometry = class _TorusKnotGeometry extends BufferGeometry {
      constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p2 = 2, q = 3) {
        super();
        this.type = "TorusKnotGeometry";
        this.parameters = {
          radius,
          tube,
          tubularSegments,
          radialSegments,
          p: p2,
          q
        };
        tubularSegments = Math.floor(tubularSegments);
        radialSegments = Math.floor(radialSegments);
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        const vertex = new Vector3();
        const normal = new Vector3();
        const P1 = new Vector3();
        const P2 = new Vector3();
        const B = new Vector3();
        const T = new Vector3();
        const N = new Vector3();
        for (let i = 0; i <= tubularSegments; ++i) {
          const u = i / tubularSegments * p2 * Math.PI * 2;
          calculatePositionOnCurve(u, p2, q, radius, P1);
          calculatePositionOnCurve(u + 0.01, p2, q, radius, P2);
          T.subVectors(P2, P1);
          N.addVectors(P2, P1);
          B.crossVectors(T, N);
          N.crossVectors(B, T);
          B.normalize();
          N.normalize();
          for (let j = 0; j <= radialSegments; ++j) {
            const v2 = j / radialSegments * Math.PI * 2;
            const cx = -tube * Math.cos(v2);
            const cy = tube * Math.sin(v2);
            vertex.x = P1.x + (cx * N.x + cy * B.x);
            vertex.y = P1.y + (cx * N.y + cy * B.y);
            vertex.z = P1.z + (cx * N.z + cy * B.z);
            vertices.push(vertex.x, vertex.y, vertex.z);
            normal.subVectors(vertex, P1).normalize();
            normals.push(normal.x, normal.y, normal.z);
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
          }
        }
        for (let j = 1; j <= tubularSegments; j++) {
          for (let i = 1; i <= radialSegments; i++) {
            const a = (radialSegments + 1) * (j - 1) + (i - 1);
            const b = (radialSegments + 1) * j + (i - 1);
            const c = (radialSegments + 1) * j + i;
            const d2 = (radialSegments + 1) * (j - 1) + i;
            indices.push(a, b, d2);
            indices.push(b, c, d2);
          }
        }
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function calculatePositionOnCurve(u, p3, q2, radius2, position) {
          const cu = Math.cos(u);
          const su = Math.sin(u);
          const quOverP = q2 / p3 * u;
          const cs = Math.cos(quOverP);
          position.x = radius2 * (2 + cs) * 0.5 * cu;
          position.y = radius2 * (2 + cs) * su * 0.5;
          position.z = radius2 * Math.sin(quOverP) * 0.5;
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      static fromJSON(data) {
        return new _TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
      }
    };
    TubeGeometry = class _TubeGeometry extends BufferGeometry {
      constructor(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
        super();
        this.type = "TubeGeometry";
        this.parameters = {
          path,
          tubularSegments,
          radius,
          radialSegments,
          closed
        };
        const frames = path.computeFrenetFrames(tubularSegments, closed);
        this.tangents = frames.tangents;
        this.normals = frames.normals;
        this.binormals = frames.binormals;
        const vertex = new Vector3();
        const normal = new Vector3();
        const uv = new Vector2();
        let P = new Vector3();
        const vertices = [];
        const normals = [];
        const uvs = [];
        const indices = [];
        generateBufferData();
        this.setIndex(indices);
        this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
        this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
        function generateBufferData() {
          for (let i = 0; i < tubularSegments; i++) {
            generateSegment(i);
          }
          generateSegment(closed === false ? tubularSegments : 0);
          generateUVs();
          generateIndices();
        }
        function generateSegment(i) {
          P = path.getPointAt(i / tubularSegments, P);
          const N = frames.normals[i];
          const B = frames.binormals[i];
          for (let j = 0; j <= radialSegments; j++) {
            const v2 = j / radialSegments * Math.PI * 2;
            const sin = Math.sin(v2);
            const cos = -Math.cos(v2);
            normal.x = cos * N.x + sin * B.x;
            normal.y = cos * N.y + sin * B.y;
            normal.z = cos * N.z + sin * B.z;
            normal.normalize();
            normals.push(normal.x, normal.y, normal.z);
            vertex.x = P.x + radius * normal.x;
            vertex.y = P.y + radius * normal.y;
            vertex.z = P.z + radius * normal.z;
            vertices.push(vertex.x, vertex.y, vertex.z);
          }
        }
        function generateIndices() {
          for (let j = 1; j <= tubularSegments; j++) {
            for (let i = 1; i <= radialSegments; i++) {
              const a = (radialSegments + 1) * (j - 1) + (i - 1);
              const b = (radialSegments + 1) * j + (i - 1);
              const c = (radialSegments + 1) * j + i;
              const d2 = (radialSegments + 1) * (j - 1) + i;
              indices.push(a, b, d2);
              indices.push(b, c, d2);
            }
          }
        }
        function generateUVs() {
          for (let i = 0; i <= tubularSegments; i++) {
            for (let j = 0; j <= radialSegments; j++) {
              uv.x = i / tubularSegments;
              uv.y = j / radialSegments;
              uvs.push(uv.x, uv.y);
            }
          }
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
      toJSON() {
        const data = super.toJSON();
        data.path = this.parameters.path.toJSON();
        return data;
      }
      static fromJSON(data) {
        return new _TubeGeometry(
          new Curves[data.path.type]().fromJSON(data.path),
          data.tubularSegments,
          data.radius,
          data.radialSegments,
          data.closed
        );
      }
    };
    WireframeGeometry = class extends BufferGeometry {
      constructor(geometry = null) {
        super();
        this.type = "WireframeGeometry";
        this.parameters = {
          geometry
        };
        if (geometry !== null) {
          const vertices = [];
          const edges = /* @__PURE__ */ new Set();
          const start = new Vector3();
          const end = new Vector3();
          if (geometry.index !== null) {
            const position = geometry.attributes.position;
            const indices = geometry.index;
            let groups = geometry.groups;
            if (groups.length === 0) {
              groups = [{ start: 0, count: indices.count, materialIndex: 0 }];
            }
            for (let o = 0, ol = groups.length; o < ol; ++o) {
              const group = groups[o];
              const groupStart = group.start;
              const groupCount = group.count;
              for (let i = groupStart, l = groupStart + groupCount; i < l; i += 3) {
                for (let j = 0; j < 3; j++) {
                  const index1 = indices.getX(i + j);
                  const index2 = indices.getX(i + (j + 1) % 3);
                  start.fromBufferAttribute(position, index1);
                  end.fromBufferAttribute(position, index2);
                  if (isUniqueEdge(start, end, edges) === true) {
                    vertices.push(start.x, start.y, start.z);
                    vertices.push(end.x, end.y, end.z);
                  }
                }
              }
            }
          } else {
            const position = geometry.attributes.position;
            for (let i = 0, l = position.count / 3; i < l; i++) {
              for (let j = 0; j < 3; j++) {
                const index1 = 3 * i + j;
                const index2 = 3 * i + (j + 1) % 3;
                start.fromBufferAttribute(position, index1);
                end.fromBufferAttribute(position, index2);
                if (isUniqueEdge(start, end, edges) === true) {
                  vertices.push(start.x, start.y, start.z);
                  vertices.push(end.x, end.y, end.z);
                }
              }
            }
          }
          this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
        }
      }
      copy(source) {
        super.copy(source);
        this.parameters = Object.assign({}, source.parameters);
        return this;
      }
    };
    Geometries = Object.freeze({
      __proto__: null,
      BoxGeometry,
      CapsuleGeometry,
      CircleGeometry,
      ConeGeometry,
      CylinderGeometry,
      DodecahedronGeometry,
      EdgesGeometry,
      ExtrudeGeometry,
      IcosahedronGeometry,
      LatheGeometry,
      OctahedronGeometry,
      PlaneGeometry,
      PolyhedronGeometry,
      RingGeometry,
      ShapeGeometry,
      SphereGeometry,
      TetrahedronGeometry,
      TorusGeometry,
      TorusKnotGeometry,
      TubeGeometry,
      WireframeGeometry
    });
    MeshPhongMaterial = class extends Material {
      constructor(parameters) {
        super();
        this.isMeshPhongMaterial = true;
        this.type = "MeshPhongMaterial";
        this.color = new Color(16777215);
        this.specular = new Color(1118481);
        this.shininess = 30;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapRotation = new Euler();
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.specular.copy(source.specular);
        this.shininess = source.shininess;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapRotation.copy(source.envMapRotation);
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
      }
    };
    MeshLambertMaterial = class extends Material {
      constructor(parameters) {
        super();
        this.isMeshLambertMaterial = true;
        this.type = "MeshLambertMaterial";
        this.color = new Color(16777215);
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new Color(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = TangentSpaceNormalMap;
        this.normalScale = new Vector2(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapRotation = new Euler();
        this.combine = MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = "round";
        this.wireframeLinejoin = "round";
        this.flatShading = false;
        this.fog = true;
        this.setValues(parameters);
      }
      copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapRotation.copy(source.envMapRotation);
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        this.fog = source.fog;
        return this;
      }
    };
    Interpolant = class {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {};
      }
      evaluate(t) {
        const pp = this.parameterPositions;
        let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
        validate_interval: {
          seek: {
            let right;
            linear_scan: {
              forward_scan: if (!(t < t1)) {
                for (let giveUpAt = i1 + 2; ; ) {
                  if (t1 === void 0) {
                    if (t < t0) break forward_scan;
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.copySampleValue_(i1 - 1);
                  }
                  if (i1 === giveUpAt) break;
                  t0 = t1;
                  t1 = pp[++i1];
                  if (t < t1) {
                    break seek;
                  }
                }
                right = pp.length;
                break linear_scan;
              }
              if (!(t >= t0)) {
                const t1global = pp[1];
                if (t < t1global) {
                  i1 = 2;
                  t0 = t1global;
                }
                for (let giveUpAt = i1 - 2; ; ) {
                  if (t0 === void 0) {
                    this._cachedIndex = 0;
                    return this.copySampleValue_(0);
                  }
                  if (i1 === giveUpAt) break;
                  t1 = t0;
                  t0 = pp[--i1 - 1];
                  if (t >= t0) {
                    break seek;
                  }
                }
                right = i1;
                i1 = 0;
                break linear_scan;
              }
              break validate_interval;
            }
            while (i1 < right) {
              const mid = i1 + right >>> 1;
              if (t < pp[mid]) {
                right = mid;
              } else {
                i1 = mid + 1;
              }
            }
            t1 = pp[i1];
            t0 = pp[i1 - 1];
            if (t0 === void 0) {
              this._cachedIndex = 0;
              return this.copySampleValue_(0);
            }
            if (t1 === void 0) {
              i1 = pp.length;
              this._cachedIndex = i1;
              return this.copySampleValue_(i1 - 1);
            }
          }
          this._cachedIndex = i1;
          this.intervalChanged_(i1, t0, t1);
        }
        return this.interpolate_(i1, t0, t, t1);
      }
      getSettings_() {
        return this.settings || this.DefaultSettings_;
      }
      copySampleValue_(index) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
        for (let i = 0; i !== stride; ++i) {
          result[i] = values[offset + i];
        }
        return result;
      }
      // Template methods for derived classes:
      interpolate_() {
        throw new Error("call to abstract method");
      }
      intervalChanged_() {
      }
    };
    CubicInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        this._weightPrev = -0;
        this._offsetPrev = -0;
        this._weightNext = -0;
        this._offsetNext = -0;
        this.DefaultSettings_ = {
          endingStart: ZeroCurvatureEnding,
          endingEnd: ZeroCurvatureEnding
        };
      }
      intervalChanged_(i1, t0, t1) {
        const pp = this.parameterPositions;
        let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
        if (tPrev === void 0) {
          switch (this.getSettings_().endingStart) {
            case ZeroSlopeEnding:
              iPrev = i1;
              tPrev = 2 * t0 - t1;
              break;
            case WrapAroundEnding:
              iPrev = pp.length - 2;
              tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
              break;
            default:
              iPrev = i1;
              tPrev = t1;
          }
        }
        if (tNext === void 0) {
          switch (this.getSettings_().endingEnd) {
            case ZeroSlopeEnding:
              iNext = i1;
              tNext = 2 * t1 - t0;
              break;
            case WrapAroundEnding:
              iNext = 1;
              tNext = t1 + pp[1] - pp[0];
              break;
            default:
              iNext = i1 - 1;
              tNext = t0;
          }
        }
        const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
        this._weightPrev = halfDt / (t0 - tPrev);
        this._weightNext = halfDt / (tNext - t1);
        this._offsetPrev = iPrev * stride;
        this._offsetNext = iNext * stride;
      }
      interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p2 = (t - t0) / (t1 - t0), pp = p2 * p2, ppp = pp * p2;
        const sP = -wP * ppp + 2 * wP * pp - wP * p2;
        const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p2 + 1;
        const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p2;
        const sN = wN * ppp - wN * pp;
        for (let i = 0; i !== stride; ++i) {
          result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
        }
        return result;
      }
    };
    LinearInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      }
      interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
        for (let i = 0; i !== stride; ++i) {
          result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
        }
        return result;
      }
    };
    DiscreteInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      }
      interpolate_(i1) {
        return this.copySampleValue_(i1 - 1);
      }
    };
    KeyframeTrack = class {
      constructor(name, times, values, interpolation) {
        if (name === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (times === void 0 || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
        this.name = name;
        this.times = convertArray(times, this.TimeBufferType);
        this.values = convertArray(values, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
      }
      // Serialization (in static context, because of constructor invocation
      // and automatic invocation of .toJSON):
      static toJSON(track) {
        const trackType = track.constructor;
        let json;
        if (trackType.toJSON !== this.toJSON) {
          json = trackType.toJSON(track);
        } else {
          json = {
            "name": track.name,
            "times": convertArray(track.times, Array),
            "values": convertArray(track.values, Array)
          };
          const interpolation = track.getInterpolation();
          if (interpolation !== track.DefaultInterpolation) {
            json.interpolation = interpolation;
          }
        }
        json.type = track.ValueTypeName;
        return json;
      }
      InterpolantFactoryMethodDiscrete(result) {
        return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
      }
      InterpolantFactoryMethodLinear(result) {
        return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
      }
      InterpolantFactoryMethodSmooth(result) {
        return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
      }
      setInterpolation(interpolation) {
        let factoryMethod;
        switch (interpolation) {
          case InterpolateDiscrete:
            factoryMethod = this.InterpolantFactoryMethodDiscrete;
            break;
          case InterpolateLinear:
            factoryMethod = this.InterpolantFactoryMethodLinear;
            break;
          case InterpolateSmooth:
            factoryMethod = this.InterpolantFactoryMethodSmooth;
            break;
        }
        if (factoryMethod === void 0) {
          const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
          if (this.createInterpolant === void 0) {
            if (interpolation !== this.DefaultInterpolation) {
              this.setInterpolation(this.DefaultInterpolation);
            } else {
              throw new Error(message);
            }
          }
          console.warn("THREE.KeyframeTrack:", message);
          return this;
        }
        this.createInterpolant = factoryMethod;
        return this;
      }
      getInterpolation() {
        switch (this.createInterpolant) {
          case this.InterpolantFactoryMethodDiscrete:
            return InterpolateDiscrete;
          case this.InterpolantFactoryMethodLinear:
            return InterpolateLinear;
          case this.InterpolantFactoryMethodSmooth:
            return InterpolateSmooth;
        }
      }
      getValueSize() {
        return this.values.length / this.times.length;
      }
      // move all keyframes either forwards or backwards in time
      shift(timeOffset) {
        if (timeOffset !== 0) {
          const times = this.times;
          for (let i = 0, n = times.length; i !== n; ++i) {
            times[i] += timeOffset;
          }
        }
        return this;
      }
      // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
      scale(timeScale) {
        if (timeScale !== 1) {
          const times = this.times;
          for (let i = 0, n = times.length; i !== n; ++i) {
            times[i] *= timeScale;
          }
        }
        return this;
      }
      // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
      // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
      trim(startTime, endTime) {
        const times = this.times, nKeys = times.length;
        let from = 0, to = nKeys - 1;
        while (from !== nKeys && times[from] < startTime) {
          ++from;
        }
        while (to !== -1 && times[to] > endTime) {
          --to;
        }
        ++to;
        if (from !== 0 || to !== nKeys) {
          if (from >= to) {
            to = Math.max(to, 1);
            from = to - 1;
          }
          const stride = this.getValueSize();
          this.times = times.slice(from, to);
          this.values = this.values.slice(from * stride, to * stride);
        }
        return this;
      }
      // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
      validate() {
        let valid = true;
        const valueSize = this.getValueSize();
        if (valueSize - Math.floor(valueSize) !== 0) {
          console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
          valid = false;
        }
        const times = this.times, values = this.values, nKeys = times.length;
        if (nKeys === 0) {
          console.error("THREE.KeyframeTrack: Track is empty.", this);
          valid = false;
        }
        let prevTime = null;
        for (let i = 0; i !== nKeys; i++) {
          const currTime = times[i];
          if (typeof currTime === "number" && isNaN(currTime)) {
            console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
            valid = false;
            break;
          }
          if (prevTime !== null && prevTime > currTime) {
            console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
            valid = false;
            break;
          }
          prevTime = currTime;
        }
        if (values !== void 0) {
          if (isTypedArray(values)) {
            for (let i = 0, n = values.length; i !== n; ++i) {
              const value = values[i];
              if (isNaN(value)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
                valid = false;
                break;
              }
            }
          }
        }
        return valid;
      }
      // removes equivalent sequential keys as common in morph target sequences
      // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
      optimize() {
        const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
        let writeIndex = 1;
        for (let i = 1; i < lastIndex; ++i) {
          let keep = false;
          const time = times[i];
          const timeNext = times[i + 1];
          if (time !== timeNext && (i !== 1 || time !== times[0])) {
            if (!smoothInterpolation) {
              const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
              for (let j = 0; j !== stride; ++j) {
                const value = values[offset + j];
                if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                  keep = true;
                  break;
                }
              }
            } else {
              keep = true;
            }
          }
          if (keep) {
            if (i !== writeIndex) {
              times[writeIndex] = times[i];
              const readOffset = i * stride, writeOffset = writeIndex * stride;
              for (let j = 0; j !== stride; ++j) {
                values[writeOffset + j] = values[readOffset + j];
              }
            }
            ++writeIndex;
          }
        }
        if (lastIndex > 0) {
          times[writeIndex] = times[lastIndex];
          for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
            values[writeOffset + j] = values[readOffset + j];
          }
          ++writeIndex;
        }
        if (writeIndex !== times.length) {
          this.times = times.slice(0, writeIndex);
          this.values = values.slice(0, writeIndex * stride);
        } else {
          this.times = times;
          this.values = values;
        }
        return this;
      }
      clone() {
        const times = this.times.slice();
        const values = this.values.slice();
        const TypedKeyframeTrack = this.constructor;
        const track = new TypedKeyframeTrack(this.name, times, values);
        track.createInterpolant = this.createInterpolant;
        return track;
      }
    };
    KeyframeTrack.prototype.TimeBufferType = Float32Array;
    KeyframeTrack.prototype.ValueBufferType = Float32Array;
    KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
    BooleanKeyframeTrack = class extends KeyframeTrack {
    };
    BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
    BooleanKeyframeTrack.prototype.ValueBufferType = Array;
    BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
    BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
    BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
    ColorKeyframeTrack = class extends KeyframeTrack {
    };
    ColorKeyframeTrack.prototype.ValueTypeName = "color";
    NumberKeyframeTrack = class extends KeyframeTrack {
    };
    NumberKeyframeTrack.prototype.ValueTypeName = "number";
    QuaternionLinearInterpolant = class extends Interpolant {
      constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      }
      interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
        let offset = i1 * stride;
        for (let end = offset + stride; offset !== end; offset += 4) {
          Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
        }
        return result;
      }
    };
    QuaternionKeyframeTrack = class extends KeyframeTrack {
      InterpolantFactoryMethodLinear(result) {
        return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
      }
    };
    QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
    QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
    QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
    StringKeyframeTrack = class extends KeyframeTrack {
    };
    StringKeyframeTrack.prototype.ValueTypeName = "string";
    StringKeyframeTrack.prototype.ValueBufferType = Array;
    StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
    StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
    StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
    VectorKeyframeTrack = class extends KeyframeTrack {
    };
    VectorKeyframeTrack.prototype.ValueTypeName = "vector";
    AnimationClip = class {
      constructor(name = "", duration = -1, tracks = [], blendMode = NormalAnimationBlendMode) {
        this.name = name;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = generateUUID();
        if (this.duration < 0) {
          this.resetDuration();
        }
      }
      static parse(json) {
        const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
        for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
          tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
        }
        const clip = new this(json.name, json.duration, tracks, json.blendMode);
        clip.uuid = json.uuid;
        return clip;
      }
      static toJSON(clip) {
        const tracks = [], clipTracks = clip.tracks;
        const json = {
          "name": clip.name,
          "duration": clip.duration,
          "tracks": tracks,
          "uuid": clip.uuid,
          "blendMode": clip.blendMode
        };
        for (let i = 0, n = clipTracks.length; i !== n; ++i) {
          tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
        }
        return json;
      }
      static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
        const numMorphTargets = morphTargetSequence.length;
        const tracks = [];
        for (let i = 0; i < numMorphTargets; i++) {
          let times = [];
          let values = [];
          times.push(
            (i + numMorphTargets - 1) % numMorphTargets,
            i,
            (i + 1) % numMorphTargets
          );
          values.push(0, 1, 0);
          const order = getKeyframeOrder(times);
          times = sortedArray(times, 1, order);
          values = sortedArray(values, 1, order);
          if (!noLoop && times[0] === 0) {
            times.push(numMorphTargets);
            values.push(values[0]);
          }
          tracks.push(
            new NumberKeyframeTrack(
              ".morphTargetInfluences[" + morphTargetSequence[i].name + "]",
              times,
              values
            ).scale(1 / fps)
          );
        }
        return new this(name, -1, tracks);
      }
      static findByName(objectOrClipArray, name) {
        let clipArray = objectOrClipArray;
        if (!Array.isArray(objectOrClipArray)) {
          const o = objectOrClipArray;
          clipArray = o.geometry && o.geometry.animations || o.animations;
        }
        for (let i = 0; i < clipArray.length; i++) {
          if (clipArray[i].name === name) {
            return clipArray[i];
          }
        }
        return null;
      }
      static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
        const animationToMorphTargets = {};
        const pattern = /^([\w-]*?)([\d]+)$/;
        for (let i = 0, il = morphTargets.length; i < il; i++) {
          const morphTarget = morphTargets[i];
          const parts = morphTarget.name.match(pattern);
          if (parts && parts.length > 1) {
            const name = parts[1];
            let animationMorphTargets = animationToMorphTargets[name];
            if (!animationMorphTargets) {
              animationToMorphTargets[name] = animationMorphTargets = [];
            }
            animationMorphTargets.push(morphTarget);
          }
        }
        const clips = [];
        for (const name in animationToMorphTargets) {
          clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
        }
        return clips;
      }
      // parse the animation.hierarchy format
      static parseAnimation(animation, bones) {
        if (!animation) {
          console.error("THREE.AnimationClip: No animation in JSONLoader data.");
          return null;
        }
        const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
          if (animationKeys.length !== 0) {
            const times = [];
            const values = [];
            flattenJSON(animationKeys, times, values, propertyName);
            if (times.length !== 0) {
              destTracks.push(new trackType(trackName, times, values));
            }
          }
        };
        const tracks = [];
        const clipName = animation.name || "default";
        const fps = animation.fps || 30;
        const blendMode = animation.blendMode;
        let duration = animation.length || -1;
        const hierarchyTracks = animation.hierarchy || [];
        for (let h = 0; h < hierarchyTracks.length; h++) {
          const animationKeys = hierarchyTracks[h].keys;
          if (!animationKeys || animationKeys.length === 0) continue;
          if (animationKeys[0].morphTargets) {
            const morphTargetNames = {};
            let k;
            for (k = 0; k < animationKeys.length; k++) {
              if (animationKeys[k].morphTargets) {
                for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
                  morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                }
              }
            }
            for (const morphTargetName in morphTargetNames) {
              const times = [];
              const values = [];
              for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
                const animationKey = animationKeys[k];
                times.push(animationKey.time);
                values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
              }
              tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
            }
            duration = morphTargetNames.length * fps;
          } else {
            const boneName = ".bones[" + bones[h].name + "]";
            addNonemptyTrack(
              VectorKeyframeTrack,
              boneName + ".position",
              animationKeys,
              "pos",
              tracks
            );
            addNonemptyTrack(
              QuaternionKeyframeTrack,
              boneName + ".quaternion",
              animationKeys,
              "rot",
              tracks
            );
            addNonemptyTrack(
              VectorKeyframeTrack,
              boneName + ".scale",
              animationKeys,
              "scl",
              tracks
            );
          }
        }
        if (tracks.length === 0) {
          return null;
        }
        const clip = new this(clipName, duration, tracks, blendMode);
        return clip;
      }
      resetDuration() {
        const tracks = this.tracks;
        let duration = 0;
        for (let i = 0, n = tracks.length; i !== n; ++i) {
          const track = this.tracks[i];
          duration = Math.max(duration, track.times[track.times.length - 1]);
        }
        this.duration = duration;
        return this;
      }
      trim() {
        for (let i = 0; i < this.tracks.length; i++) {
          this.tracks[i].trim(0, this.duration);
        }
        return this;
      }
      validate() {
        let valid = true;
        for (let i = 0; i < this.tracks.length; i++) {
          valid = valid && this.tracks[i].validate();
        }
        return valid;
      }
      optimize() {
        for (let i = 0; i < this.tracks.length; i++) {
          this.tracks[i].optimize();
        }
        return this;
      }
      clone() {
        const tracks = [];
        for (let i = 0; i < this.tracks.length; i++) {
          tracks.push(this.tracks[i].clone());
        }
        return new this.constructor(this.name, this.duration, tracks, this.blendMode);
      }
      toJSON() {
        return this.constructor.toJSON(this);
      }
    };
    Cache = {
      enabled: false,
      files: {},
      add: function(key, file) {
        if (this.enabled === false) return;
        this.files[key] = file;
      },
      get: function(key) {
        if (this.enabled === false) return;
        return this.files[key];
      },
      remove: function(key) {
        delete this.files[key];
      },
      clear: function() {
        this.files = {};
      }
    };
    LoadingManager = class {
      constructor(onLoad, onProgress, onError) {
        const scope = this;
        let isLoading = false;
        let itemsLoaded = 0;
        let itemsTotal = 0;
        let urlModifier = void 0;
        const handlers = [];
        this.onStart = void 0;
        this.onLoad = onLoad;
        this.onProgress = onProgress;
        this.onError = onError;
        this.itemStart = function(url) {
          itemsTotal++;
          if (isLoading === false) {
            if (scope.onStart !== void 0) {
              scope.onStart(url, itemsLoaded, itemsTotal);
            }
          }
          isLoading = true;
        };
        this.itemEnd = function(url) {
          itemsLoaded++;
          if (scope.onProgress !== void 0) {
            scope.onProgress(url, itemsLoaded, itemsTotal);
          }
          if (itemsLoaded === itemsTotal) {
            isLoading = false;
            if (scope.onLoad !== void 0) {
              scope.onLoad();
            }
          }
        };
        this.itemError = function(url) {
          if (scope.onError !== void 0) {
            scope.onError(url);
          }
        };
        this.resolveURL = function(url) {
          if (urlModifier) {
            return urlModifier(url);
          }
          return url;
        };
        this.setURLModifier = function(transform) {
          urlModifier = transform;
          return this;
        };
        this.addHandler = function(regex, loader) {
          handlers.push(regex, loader);
          return this;
        };
        this.removeHandler = function(regex) {
          const index = handlers.indexOf(regex);
          if (index !== -1) {
            handlers.splice(index, 2);
          }
          return this;
        };
        this.getHandler = function(file) {
          for (let i = 0, l = handlers.length; i < l; i += 2) {
            const regex = handlers[i];
            const loader = handlers[i + 1];
            if (regex.global) regex.lastIndex = 0;
            if (regex.test(file)) {
              return loader;
            }
          }
          return null;
        };
      }
    };
    DefaultLoadingManager = new LoadingManager();
    Loader = class {
      constructor(manager) {
        this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
        this.crossOrigin = "anonymous";
        this.withCredentials = false;
        this.path = "";
        this.resourcePath = "";
        this.requestHeader = {};
      }
      load() {
      }
      loadAsync(url, onProgress) {
        const scope = this;
        return new Promise(function(resolve, reject) {
          scope.load(url, resolve, onProgress, reject);
        });
      }
      parse() {
      }
      setCrossOrigin(crossOrigin) {
        this.crossOrigin = crossOrigin;
        return this;
      }
      setWithCredentials(value) {
        this.withCredentials = value;
        return this;
      }
      setPath(path) {
        this.path = path;
        return this;
      }
      setResourcePath(resourcePath) {
        this.resourcePath = resourcePath;
        return this;
      }
      setRequestHeader(requestHeader) {
        this.requestHeader = requestHeader;
        return this;
      }
    };
    Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
    loading = {};
    HttpError = class extends Error {
      constructor(message, response) {
        super(message);
        this.response = response;
      }
    };
    FileLoader = class extends Loader {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        if (url === void 0) url = "";
        if (this.path !== void 0) url = this.path + url;
        url = this.manager.resolveURL(url);
        const cached = Cache.get(url);
        if (cached !== void 0) {
          this.manager.itemStart(url);
          setTimeout(() => {
            if (onLoad) onLoad(cached);
            this.manager.itemEnd(url);
          }, 0);
          return cached;
        }
        if (loading[url] !== void 0) {
          loading[url].push({
            onLoad,
            onProgress,
            onError
          });
          return;
        }
        loading[url] = [];
        loading[url].push({
          onLoad,
          onProgress,
          onError
        });
        const req = new Request(url, {
          headers: new Headers(this.requestHeader),
          credentials: this.withCredentials ? "include" : "same-origin"
          // An abort controller could be added within a future PR
        });
        const mimeType = this.mimeType;
        const responseType = this.responseType;
        fetch(req).then((response) => {
          if (response.status === 200 || response.status === 0) {
            if (response.status === 0) {
              console.warn("THREE.FileLoader: HTTP Status 0 received.");
            }
            if (typeof ReadableStream === "undefined" || response.body === void 0 || response.body.getReader === void 0) {
              return response;
            }
            const callbacks = loading[url];
            const reader = response.body.getReader();
            const contentLength = response.headers.get("X-File-Size") || response.headers.get("Content-Length");
            const total = contentLength ? parseInt(contentLength) : 0;
            const lengthComputable = total !== 0;
            let loaded = 0;
            const stream = new ReadableStream({
              start(controller) {
                readData();
                function readData() {
                  reader.read().then(({ done, value }) => {
                    if (done) {
                      controller.close();
                    } else {
                      loaded += value.byteLength;
                      const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                      for (let i = 0, il = callbacks.length; i < il; i++) {
                        const callback = callbacks[i];
                        if (callback.onProgress) callback.onProgress(event);
                      }
                      controller.enqueue(value);
                      readData();
                    }
                  });
                }
              }
            });
            return new Response(stream);
          } else {
            throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
          }
        }).then((response) => {
          switch (responseType) {
            case "arraybuffer":
              return response.arrayBuffer();
            case "blob":
              return response.blob();
            case "document":
              return response.text().then((text) => {
                const parser = new DOMParser();
                return parser.parseFromString(text, mimeType);
              });
            case "json":
              return response.json();
            default:
              if (mimeType === void 0) {
                return response.text();
              } else {
                const re = /charset="?([^;"\s]*)"?/i;
                const exec = re.exec(mimeType);
                const label = exec && exec[1] ? exec[1].toLowerCase() : void 0;
                const decoder = new TextDecoder(label);
                return response.arrayBuffer().then((ab) => decoder.decode(ab));
              }
          }
        }).then((data) => {
          Cache.add(url, data);
          const callbacks = loading[url];
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onLoad) callback.onLoad(data);
          }
        }).catch((err2) => {
          const callbacks = loading[url];
          if (callbacks === void 0) {
            this.manager.itemError(url);
            throw err2;
          }
          delete loading[url];
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError) callback.onError(err2);
          }
          this.manager.itemError(url);
        }).finally(() => {
          this.manager.itemEnd(url);
        });
        this.manager.itemStart(url);
      }
      setResponseType(value) {
        this.responseType = value;
        return this;
      }
      setMimeType(value) {
        this.mimeType = value;
        return this;
      }
    };
    ImageLoader = class extends Loader {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        if (this.path !== void 0) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = Cache.get(url);
        if (cached !== void 0) {
          scope.manager.itemStart(url);
          setTimeout(function() {
            if (onLoad) onLoad(cached);
            scope.manager.itemEnd(url);
          }, 0);
          return cached;
        }
        const image = createElementNS("img");
        function onImageLoad() {
          removeEventListeners();
          Cache.add(url, this);
          if (onLoad) onLoad(this);
          scope.manager.itemEnd(url);
        }
        function onImageError(event) {
          removeEventListeners();
          if (onError) onError(event);
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }
        function removeEventListeners() {
          image.removeEventListener("load", onImageLoad, false);
          image.removeEventListener("error", onImageError, false);
        }
        image.addEventListener("load", onImageLoad, false);
        image.addEventListener("error", onImageError, false);
        if (url.slice(0, 5) !== "data:") {
          if (this.crossOrigin !== void 0) image.crossOrigin = this.crossOrigin;
        }
        scope.manager.itemStart(url);
        image.src = url;
        return image;
      }
    };
    TextureLoader = class extends Loader {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const texture = new Texture();
        const loader = new ImageLoader(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        loader.load(url, function(image) {
          texture.image = image;
          texture.needsUpdate = true;
          if (onLoad !== void 0) {
            onLoad(texture);
          }
        }, onProgress, onError);
        return texture;
      }
    };
    Light = class extends Object3D {
      constructor(color, intensity = 1) {
        super();
        this.isLight = true;
        this.type = "Light";
        this.color = new Color(color);
        this.intensity = intensity;
      }
      dispose() {
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.color.copy(source.color);
        this.intensity = source.intensity;
        return this;
      }
      toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.color = this.color.getHex();
        data.object.intensity = this.intensity;
        if (this.groundColor !== void 0) data.object.groundColor = this.groundColor.getHex();
        if (this.distance !== void 0) data.object.distance = this.distance;
        if (this.angle !== void 0) data.object.angle = this.angle;
        if (this.decay !== void 0) data.object.decay = this.decay;
        if (this.penumbra !== void 0) data.object.penumbra = this.penumbra;
        if (this.shadow !== void 0) data.object.shadow = this.shadow.toJSON();
        return data;
      }
    };
    _projScreenMatrix$1 = new Matrix4();
    _lightPositionWorld$1 = new Vector3();
    _lookTarget$1 = new Vector3();
    LightShadow = class {
      constructor(camera) {
        this.camera = camera;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new Vector2(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new Matrix4();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new Frustum();
        this._frameExtents = new Vector2(1, 1);
        this._viewportCount = 1;
        this._viewports = [
          new Vector4(0, 0, 1, 1)
        ];
      }
      getViewportCount() {
        return this._viewportCount;
      }
      getFrustum() {
        return this._frustum;
      }
      updateMatrices(light) {
        const shadowCamera = this.camera;
        const shadowMatrix = this.matrix;
        _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
        shadowCamera.position.copy(_lightPositionWorld$1);
        _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
        shadowCamera.lookAt(_lookTarget$1);
        shadowCamera.updateMatrixWorld();
        _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
        shadowMatrix.set(
          0.5,
          0,
          0,
          0.5,
          0,
          0.5,
          0,
          0.5,
          0,
          0,
          0.5,
          0.5,
          0,
          0,
          0,
          1
        );
        shadowMatrix.multiply(_projScreenMatrix$1);
      }
      getViewport(viewportIndex) {
        return this._viewports[viewportIndex];
      }
      getFrameExtents() {
        return this._frameExtents;
      }
      dispose() {
        if (this.map) {
          this.map.dispose();
        }
        if (this.mapPass) {
          this.mapPass.dispose();
        }
      }
      copy(source) {
        this.camera = source.camera.clone();
        this.bias = source.bias;
        this.radius = source.radius;
        this.mapSize.copy(source.mapSize);
        return this;
      }
      clone() {
        return new this.constructor().copy(this);
      }
      toJSON() {
        const object = {};
        if (this.bias !== 0) object.bias = this.bias;
        if (this.normalBias !== 0) object.normalBias = this.normalBias;
        if (this.radius !== 1) object.radius = this.radius;
        if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
        object.camera = this.camera.toJSON(false).object;
        delete object.camera.matrix;
        return object;
      }
    };
    SpotLightShadow = class extends LightShadow {
      constructor() {
        super(new PerspectiveCamera(50, 1, 0.5, 500));
        this.isSpotLightShadow = true;
        this.focus = 1;
      }
      updateMatrices(light) {
        const camera = this.camera;
        const fov = RAD2DEG * 2 * light.angle * this.focus;
        const aspect = this.mapSize.width / this.mapSize.height;
        const far = light.distance || camera.far;
        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
          camera.fov = fov;
          camera.aspect = aspect;
          camera.far = far;
          camera.updateProjectionMatrix();
        }
        super.updateMatrices(light);
      }
      copy(source) {
        super.copy(source);
        this.focus = source.focus;
        return this;
      }
    };
    SpotLight = class extends Light {
      constructor(color, intensity, distance2 = 0, angle2 = Math.PI / 3, penumbra = 0, decay = 2) {
        super(color, intensity);
        this.isSpotLight = true;
        this.type = "SpotLight";
        this.position.copy(Object3D.DEFAULT_UP);
        this.updateMatrix();
        this.target = new Object3D();
        this.distance = distance2;
        this.angle = angle2;
        this.penumbra = penumbra;
        this.decay = decay;
        this.map = null;
        this.shadow = new SpotLightShadow();
      }
      get power() {
        return this.intensity * Math.PI;
      }
      set power(power) {
        this.intensity = power / Math.PI;
      }
      dispose() {
        this.shadow.dispose();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.angle = source.angle;
        this.penumbra = source.penumbra;
        this.decay = source.decay;
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
      }
    };
    _projScreenMatrix = new Matrix4();
    _lightPositionWorld = new Vector3();
    _lookTarget = new Vector3();
    PointLightShadow = class extends LightShadow {
      constructor() {
        super(new PerspectiveCamera(90, 1, 0.5, 500));
        this.isPointLightShadow = true;
        this._frameExtents = new Vector2(4, 2);
        this._viewportCount = 6;
        this._viewports = [
          // These viewports map a cube-map onto a 2D texture with the
          // following orientation:
          //
          //  xzXZ
          //   y Y
          //
          // X - Positive x direction
          // x - Negative x direction
          // Y - Positive y direction
          // y - Negative y direction
          // Z - Positive z direction
          // z - Negative z direction
          // positive X
          new Vector4(2, 1, 1, 1),
          // negative X
          new Vector4(0, 1, 1, 1),
          // positive Z
          new Vector4(3, 1, 1, 1),
          // negative Z
          new Vector4(1, 1, 1, 1),
          // positive Y
          new Vector4(3, 0, 1, 1),
          // negative Y
          new Vector4(1, 0, 1, 1)
        ];
        this._cubeDirections = [
          new Vector3(1, 0, 0),
          new Vector3(-1, 0, 0),
          new Vector3(0, 0, 1),
          new Vector3(0, 0, -1),
          new Vector3(0, 1, 0),
          new Vector3(0, -1, 0)
        ];
        this._cubeUps = [
          new Vector3(0, 1, 0),
          new Vector3(0, 1, 0),
          new Vector3(0, 1, 0),
          new Vector3(0, 1, 0),
          new Vector3(0, 0, 1),
          new Vector3(0, 0, -1)
        ];
      }
      updateMatrices(light, viewportIndex = 0) {
        const camera = this.camera;
        const shadowMatrix = this.matrix;
        const far = light.distance || camera.far;
        if (far !== camera.far) {
          camera.far = far;
          camera.updateProjectionMatrix();
        }
        _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
        camera.position.copy(_lightPositionWorld);
        _lookTarget.copy(camera.position);
        _lookTarget.add(this._cubeDirections[viewportIndex]);
        camera.up.copy(this._cubeUps[viewportIndex]);
        camera.lookAt(_lookTarget);
        camera.updateMatrixWorld();
        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix(_projScreenMatrix);
      }
    };
    PointLight = class extends Light {
      constructor(color, intensity, distance2 = 0, decay = 2) {
        super(color, intensity);
        this.isPointLight = true;
        this.type = "PointLight";
        this.distance = distance2;
        this.decay = decay;
        this.shadow = new PointLightShadow();
      }
      get power() {
        return this.intensity * 4 * Math.PI;
      }
      set power(power) {
        this.intensity = power / (4 * Math.PI);
      }
      dispose() {
        this.shadow.dispose();
      }
      copy(source, recursive) {
        super.copy(source, recursive);
        this.distance = source.distance;
        this.decay = source.decay;
        this.shadow = source.shadow.clone();
        return this;
      }
    };
    DirectionalLightShadow = class extends LightShadow {
      constructor() {
        super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
        this.isDirectionalLightShadow = true;
      }
    };
    DirectionalLight = class extends Light {
      constructor(color, intensity) {
        super(color, intensity);
        this.isDirectionalLight = true;
        this.type = "DirectionalLight";
        this.position.copy(Object3D.DEFAULT_UP);
        this.updateMatrix();
        this.target = new Object3D();
        this.shadow = new DirectionalLightShadow();
      }
      dispose() {
        this.shadow.dispose();
      }
      copy(source) {
        super.copy(source);
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
      }
    };
    AmbientLight = class extends Light {
      constructor(color, intensity) {
        super(color, intensity);
        this.isAmbientLight = true;
        this.type = "AmbientLight";
      }
    };
    LoaderUtils = class {
      static decodeText(array) {
        if (typeof TextDecoder !== "undefined") {
          return new TextDecoder().decode(array);
        }
        let s = "";
        for (let i = 0, il = array.length; i < il; i++) {
          s += String.fromCharCode(array[i]);
        }
        try {
          return decodeURIComponent(escape(s));
        } catch (e) {
          return s;
        }
      }
      static extractUrlBase(url) {
        const index = url.lastIndexOf("/");
        if (index === -1) return "./";
        return url.slice(0, index + 1);
      }
      static resolveURL(url, path) {
        if (typeof url !== "string" || url === "") return "";
        if (/^https?:\/\//i.test(path) && /^\//.test(url)) {
          path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
        }
        if (/^(https?:)?\/\//i.test(url)) return url;
        if (/^data:.*,.*$/i.test(url)) return url;
        if (/^blob:.*$/i.test(url)) return url;
        return path + url;
      }
    };
    _eyeRight = new Matrix4();
    _eyeLeft = new Matrix4();
    _projectionMatrix = new Matrix4();
    _position$1 = new Vector3();
    _quaternion$1 = new Quaternion();
    _scale$1 = new Vector3();
    _orientation$1 = new Vector3();
    _position = new Vector3();
    _quaternion = new Quaternion();
    _scale = new Vector3();
    _orientation = new Vector3();
    _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
    _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
    _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
    _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
    _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
    _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
    _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
    _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
    _trackRe = new RegExp(
      "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
    );
    _supportedObjectNames = ["material", "materials", "bones", "map"];
    Composite = class {
      constructor(targetGroup, path, optionalParsedPath) {
        const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
      }
      getValue(array, offset) {
        this.bind();
        const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
        if (binding !== void 0) binding.getValue(array, offset);
      }
      setValue(array, offset) {
        const bindings = this._bindings;
        for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
          bindings[i].setValue(array, offset);
        }
      }
      bind() {
        const bindings = this._bindings;
        for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
          bindings[i].bind();
        }
      }
      unbind() {
        const bindings = this._bindings;
        for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
          bindings[i].unbind();
        }
      }
    };
    PropertyBinding = class _PropertyBinding {
      constructor(rootNode, path, parsedPath) {
        this.path = path;
        this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
        this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
        this.rootNode = rootNode;
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
      }
      static create(root, path, parsedPath) {
        if (!(root && root.isAnimationObjectGroup)) {
          return new _PropertyBinding(root, path, parsedPath);
        } else {
          return new _PropertyBinding.Composite(root, path, parsedPath);
        }
      }
      /**
       * Replaces spaces with underscores and removes unsupported characters from
       * node names, to ensure compatibility with parseTrackName().
       *
       * @param {string} name Node name to be sanitized.
       * @return {string}
       */
      static sanitizeNodeName(name) {
        return name.replace(/\s/g, "_").replace(_reservedRe, "");
      }
      static parseTrackName(trackName) {
        const matches = _trackRe.exec(trackName);
        if (matches === null) {
          throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
        }
        const results = {
          // directoryName: matches[ 1 ], // (tschw) currently unused
          nodeName: matches[2],
          objectName: matches[3],
          objectIndex: matches[4],
          propertyName: matches[5],
          // required
          propertyIndex: matches[6]
        };
        const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
        if (lastDot !== void 0 && lastDot !== -1) {
          const objectName = results.nodeName.substring(lastDot + 1);
          if (_supportedObjectNames.indexOf(objectName) !== -1) {
            results.nodeName = results.nodeName.substring(0, lastDot);
            results.objectName = objectName;
          }
        }
        if (results.propertyName === null || results.propertyName.length === 0) {
          throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
        }
        return results;
      }
      static findNode(root, nodeName) {
        if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
          return root;
        }
        if (root.skeleton) {
          const bone = root.skeleton.getBoneByName(nodeName);
          if (bone !== void 0) {
            return bone;
          }
        }
        if (root.children) {
          const searchNodeSubtree = function(children) {
            for (let i = 0; i < children.length; i++) {
              const childNode = children[i];
              if (childNode.name === nodeName || childNode.uuid === nodeName) {
                return childNode;
              }
              const result = searchNodeSubtree(childNode.children);
              if (result) return result;
            }
            return null;
          };
          const subTreeNode = searchNodeSubtree(root.children);
          if (subTreeNode) {
            return subTreeNode;
          }
        }
        return null;
      }
      // these are used to "bind" a nonexistent property
      _getValue_unavailable() {
      }
      _setValue_unavailable() {
      }
      // Getters
      _getValue_direct(buffer, offset) {
        buffer[offset] = this.targetObject[this.propertyName];
      }
      _getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for (let i = 0, n = source.length; i !== n; ++i) {
          buffer[offset++] = source[i];
        }
      }
      _getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
      }
      _getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
      }
      // Direct
      _setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
      }
      _setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
      }
      _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      // EntireArray
      _setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
      }
      _setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
        this.targetObject.needsUpdate = true;
      }
      _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      // ArrayElement
      _setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
      }
      _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
      }
      _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      // HasToFromArray
      _setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
      }
      _setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
      }
      _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
      _getValue_unbound(targetArray, offset) {
        this.bind();
        this.getValue(targetArray, offset);
      }
      _setValue_unbound(sourceArray, offset) {
        this.bind();
        this.setValue(sourceArray, offset);
      }
      // create getter / setter pair for a property in the scene graph
      bind() {
        let targetObject = this.node;
        const parsedPath = this.parsedPath;
        const objectName = parsedPath.objectName;
        const propertyName = parsedPath.propertyName;
        let propertyIndex = parsedPath.propertyIndex;
        if (!targetObject) {
          targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
          this.node = targetObject;
        }
        this.getValue = this._getValue_unavailable;
        this.setValue = this._setValue_unavailable;
        if (!targetObject) {
          console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
          return;
        }
        if (objectName) {
          let objectIndex = parsedPath.objectIndex;
          switch (objectName) {
            case "materials":
              if (!targetObject.material) {
                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                return;
              }
              if (!targetObject.material.materials) {
                console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                return;
              }
              targetObject = targetObject.material.materials;
              break;
            case "bones":
              if (!targetObject.skeleton) {
                console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                return;
              }
              targetObject = targetObject.skeleton.bones;
              for (let i = 0; i < targetObject.length; i++) {
                if (targetObject[i].name === objectIndex) {
                  objectIndex = i;
                  break;
                }
              }
              break;
            case "map":
              if ("map" in targetObject) {
                targetObject = targetObject.map;
                break;
              }
              if (!targetObject.material) {
                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                return;
              }
              if (!targetObject.material.map) {
                console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
                return;
              }
              targetObject = targetObject.material.map;
              break;
            default:
              if (targetObject[objectName] === void 0) {
                console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                return;
              }
              targetObject = targetObject[objectName];
          }
          if (objectIndex !== void 0) {
            if (targetObject[objectIndex] === void 0) {
              console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
              return;
            }
            targetObject = targetObject[objectIndex];
          }
        }
        const nodeProperty = targetObject[propertyName];
        if (nodeProperty === void 0) {
          const nodeName = parsedPath.nodeName;
          console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
          return;
        }
        let versioning = this.Versioning.None;
        this.targetObject = targetObject;
        if (targetObject.needsUpdate !== void 0) {
          versioning = this.Versioning.NeedsUpdate;
        } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
          versioning = this.Versioning.MatrixWorldNeedsUpdate;
        }
        let bindingType = this.BindingType.Direct;
        if (propertyIndex !== void 0) {
          if (propertyName === "morphTargetInfluences") {
            if (!targetObject.geometry) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
              return;
            }
            if (!targetObject.geometry.morphAttributes) {
              console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
              return;
            }
            if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
            }
          }
          bindingType = this.BindingType.ArrayElement;
          this.resolvedProperty = nodeProperty;
          this.propertyIndex = propertyIndex;
        } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
          bindingType = this.BindingType.HasFromToArray;
          this.resolvedProperty = nodeProperty;
        } else if (Array.isArray(nodeProperty)) {
          bindingType = this.BindingType.EntireArray;
          this.resolvedProperty = nodeProperty;
        } else {
          this.propertyName = propertyName;
        }
        this.getValue = this.GetterByBindingType[bindingType];
        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
      }
      unbind() {
        this.node = null;
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
      }
    };
    PropertyBinding.Composite = Composite;
    PropertyBinding.prototype.BindingType = {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3
    };
    PropertyBinding.prototype.Versioning = {
      None: 0,
      NeedsUpdate: 1,
      MatrixWorldNeedsUpdate: 2
    };
    PropertyBinding.prototype.GetterByBindingType = [
      PropertyBinding.prototype._getValue_direct,
      PropertyBinding.prototype._getValue_array,
      PropertyBinding.prototype._getValue_arrayElement,
      PropertyBinding.prototype._getValue_toArray
    ];
    PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
      [
        // Direct
        PropertyBinding.prototype._setValue_direct,
        PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
        PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
      ],
      [
        // EntireArray
        PropertyBinding.prototype._setValue_array,
        PropertyBinding.prototype._setValue_array_setNeedsUpdate,
        PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
      ],
      [
        // ArrayElement
        PropertyBinding.prototype._setValue_arrayElement,
        PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
        PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
      ],
      [
        // HasToFromArray
        PropertyBinding.prototype._setValue_fromArray,
        PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
        PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
      ]
    ];
    _controlInterpolantsResultBuffer = new Float32Array(1);
    _matrix = new Matrix4();
    _vector$4 = new Vector2();
    _startP = new Vector3();
    _startEnd = new Vector3();
    _vector$3 = new Vector3();
    _vector$2 = new Vector3();
    _boneMatrix = new Matrix4();
    _matrixWorldInv = new Matrix4();
    _vector$1 = new Vector3();
    _color1 = new Color();
    _color2 = new Color();
    _v1 = new Vector3();
    _v2 = new Vector3();
    _v3 = new Vector3();
    _vector = new Vector3();
    _camera = new Camera();
    _box = new Box3();
    _axis = new Vector3();
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
        revision: REVISION
      } }));
    }
    if (typeof window !== "undefined") {
      if (window.__THREE__) {
        console.warn("WARNING: Multiple instances of Three.js being imported.");
      } else {
        window.__THREE__ = REVISION;
      }
    }
  }
});

// node_modules/three/examples/jsm/libs/fflate.module.js
function StrmOpt(opts, cb) {
  if (typeof opts == "function")
    cb = opts, opts = {};
  this.ondata = cb;
  return opts;
}
function deflateSync(data, opts) {
  return dopt(data, opts || {}, 0, 0);
}
function inflateSync(data, opts) {
  return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
function unzlibSync(data, opts) {
  return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);
}
function strToU8(str, latin1) {
  if (latin1) {
    var ar_1 = new u8(str.length);
    for (var i = 0; i < str.length; ++i)
      ar_1[i] = str.charCodeAt(i);
    return ar_1;
  }
  if (te)
    return te.encode(str);
  var l = str.length;
  var ar = new u8(str.length + (str.length >> 1));
  var ai = 0;
  var w = function(v2) {
    ar[ai++] = v2;
  };
  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }
    var c = str.charCodeAt(i);
    if (c < 128 || latin1)
      w(c);
    else if (c < 2048)
      w(192 | c >> 6), w(128 | c & 63);
    else if (c > 55295 && c < 57344)
      c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);
    else
      w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);
  }
  return slc(ar, 0, ai);
}
function strFromU8(dat, latin1) {
  if (latin1) {
    var r = "";
    for (var i = 0; i < dat.length; i += 16384)
      r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));
    return r;
  } else if (td) {
    return td.decode(dat);
  } else {
    var _a2 = dutf8(dat), s = _a2.s, r = _a2.r;
    if (r.length)
      err(8);
    return s;
  }
}
var ch2, wk, u8, u16, i32, fleb, fdeb, clim, freb, _a, fl, revfl, _b, fd, revfd, rev, x, i, hMap, flt, i, i, i, i, fdt, i, flm, flrm, fdm, fdrm, max, bits, bits16, shft, slc, ec, err, inflt, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, deo, et, dflt, crct, crc, adler, dopt, mrg, wcln, ch, cbfs, wrkr, bInflt, bDflt, guze, zule, pbf, gopt, astrm, astrmify, b2, b4, b8, wbytes, gzh, gzs, gzl, gzhl, zlh, zls, Deflate, AsyncDeflate, Inflate, AsyncInflate, Gzip, Gunzip, AsyncGunzip, Zlib, Unzlib, AsyncUnzlib, Decompress, AsyncDecompress, te, td, tds, dutf8, DecodeUTF8, EncodeUTF8, dbf, z64e, exfl, wzh, wzf, ZipPassThrough, ZipDeflate, AsyncZipDeflate, Zip, UnzipPassThrough, UnzipInflate, AsyncUnzipInflate, Unzip;
var init_fflate_module = __esm({
  "node_modules/three/examples/jsm/libs/fflate.module.js"() {
    ch2 = {};
    wk = function(c, id, msg, transfer, cb) {
      var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
        c + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
      ], { type: "text/javascript" }))));
      w.onmessage = function(e) {
        var d2 = e.data, ed = d2.$e$;
        if (ed) {
          var err2 = new Error(ed[0]);
          err2["code"] = ed[1];
          err2.stack = ed[2];
          cb(err2, null);
        } else
          cb(null, d2);
      };
      w.postMessage(msg, transfer);
      return w;
    };
    u8 = Uint8Array;
    u16 = Uint16Array;
    i32 = Int32Array;
    fleb = new u8([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0,
      /* unused */
      0,
      0,
      /* impossible */
      0
    ]);
    fdeb = new u8([
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13,
      /* unused */
      0,
      0
    ]);
    clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    freb = function(eb, start) {
      var b = new u16(31);
      for (var i = 0; i < 31; ++i) {
        b[i] = start += 1 << eb[i - 1];
      }
      var r = new i32(b[30]);
      for (var i = 1; i < 30; ++i) {
        for (var j = b[i]; j < b[i + 1]; ++j) {
          r[j] = j - b[i] << 5 | i;
        }
      }
      return { b, r };
    };
    _a = freb(fleb, 2);
    fl = _a.b;
    revfl = _a.r;
    fl[28] = 258, revfl[258] = 28;
    _b = freb(fdeb, 0);
    fd = _b.b;
    revfd = _b.r;
    rev = new u16(32768);
    for (i = 0; i < 32768; ++i) {
      x = (i & 43690) >> 1 | (i & 21845) << 1;
      x = (x & 52428) >> 2 | (x & 13107) << 2;
      x = (x & 61680) >> 4 | (x & 3855) << 4;
      rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
    }
    hMap = function(cd, mb, r) {
      var s = cd.length;
      var i = 0;
      var l = new u16(mb);
      for (; i < s; ++i) {
        if (cd[i])
          ++l[cd[i] - 1];
      }
      var le = new u16(mb);
      for (i = 1; i < mb; ++i) {
        le[i] = le[i - 1] + l[i - 1] << 1;
      }
      var co;
      if (r) {
        co = new u16(1 << mb);
        var rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
          if (cd[i]) {
            var sv = i << 4 | cd[i];
            var r_1 = mb - cd[i];
            var v2 = le[cd[i] - 1]++ << r_1;
            for (var m = v2 | (1 << r_1) - 1; v2 <= m; ++v2) {
              co[rev[v2] >> rvb] = sv;
            }
          }
        }
      } else {
        co = new u16(s);
        for (i = 0; i < s; ++i) {
          if (cd[i]) {
            co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
          }
        }
      }
      return co;
    };
    flt = new u8(288);
    for (i = 0; i < 144; ++i)
      flt[i] = 8;
    for (i = 144; i < 256; ++i)
      flt[i] = 9;
    for (i = 256; i < 280; ++i)
      flt[i] = 7;
    for (i = 280; i < 288; ++i)
      flt[i] = 8;
    fdt = new u8(32);
    for (i = 0; i < 32; ++i)
      fdt[i] = 5;
    flm = hMap(flt, 9, 0);
    flrm = hMap(flt, 9, 1);
    fdm = hMap(fdt, 5, 0);
    fdrm = hMap(fdt, 5, 1);
    max = function(a) {
      var m = a[0];
      for (var i = 1; i < a.length; ++i) {
        if (a[i] > m)
          m = a[i];
      }
      return m;
    };
    bits = function(d2, p2, m) {
      var o = p2 / 8 | 0;
      return (d2[o] | d2[o + 1] << 8) >> (p2 & 7) & m;
    };
    bits16 = function(d2, p2) {
      var o = p2 / 8 | 0;
      return (d2[o] | d2[o + 1] << 8 | d2[o + 2] << 16) >> (p2 & 7);
    };
    shft = function(p2) {
      return (p2 + 7) / 8 | 0;
    };
    slc = function(v2, s, e) {
      if (s == null || s < 0)
        s = 0;
      if (e == null || e > v2.length)
        e = v2.length;
      return new u8(v2.subarray(s, e));
    };
    ec = [
      "unexpected EOF",
      "invalid block type",
      "invalid length/literal",
      "invalid distance",
      "stream finished",
      "no stream handler",
      ,
      "no callback",
      "invalid UTF-8 data",
      "extra field too long",
      "date not in range 1980-2099",
      "filename too long",
      "stream finishing",
      "invalid zip data"
      // determined by unknown compression method
    ];
    err = function(ind, msg, nt) {
      var e = new Error(msg || ec[ind]);
      e.code = ind;
      if (Error.captureStackTrace)
        Error.captureStackTrace(e, err);
      if (!nt)
        throw e;
      return e;
    };
    inflt = function(dat, st, buf, dict) {
      var sl = dat.length, dl = dict ? dict.length : 0;
      if (!sl || st.f && !st.l)
        return buf || new u8(0);
      var noBuf = !buf;
      var resize = noBuf || st.i != 2;
      var noSt = st.i;
      if (noBuf)
        buf = new u8(sl * 3);
      var cbuf = function(l2) {
        var bl = buf.length;
        if (l2 > bl) {
          var nbuf = new u8(Math.max(bl * 2, l2));
          nbuf.set(buf);
          buf = nbuf;
        }
      };
      var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
      var tbts = sl * 8;
      do {
        if (!lm) {
          final = bits(dat, pos, 1);
          var type = bits(dat, pos + 1, 3);
          pos += 3;
          if (!type) {
            var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;
            if (t > sl) {
              if (noSt)
                err(0);
              break;
            }
            if (resize)
              cbuf(bt + l);
            buf.set(dat.subarray(s, t), bt);
            st.b = bt += l, st.p = pos = t * 8, st.f = final;
            continue;
          } else if (type == 1)
            lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
          else if (type == 2) {
            var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
            var tl = hLit + bits(dat, pos + 5, 31) + 1;
            pos += 14;
            var ldt = new u8(tl);
            var clt = new u8(19);
            for (var i = 0; i < hcLen; ++i) {
              clt[clim[i]] = bits(dat, pos + i * 3, 7);
            }
            pos += hcLen * 3;
            var clb = max(clt), clbmsk = (1 << clb) - 1;
            var clm = hMap(clt, clb, 1);
            for (var i = 0; i < tl; ) {
              var r = clm[bits(dat, pos, clbmsk)];
              pos += r & 15;
              var s = r >> 4;
              if (s < 16) {
                ldt[i++] = s;
              } else {
                var c = 0, n = 0;
                if (s == 16)
                  n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                else if (s == 17)
                  n = 3 + bits(dat, pos, 7), pos += 3;
                else if (s == 18)
                  n = 11 + bits(dat, pos, 127), pos += 7;
                while (n--)
                  ldt[i++] = c;
              }
            }
            var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
            lbt = max(lt);
            dbt = max(dt);
            lm = hMap(lt, lbt, 1);
            dm = hMap(dt, dbt, 1);
          } else
            err(1);
          if (pos > tbts) {
            if (noSt)
              err(0);
            break;
          }
        }
        if (resize)
          cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var lpos = pos;
        for (; ; lpos = pos) {
          var c = lm[bits16(dat, pos) & lms], sym = c >> 4;
          pos += c & 15;
          if (pos > tbts) {
            if (noSt)
              err(0);
            break;
          }
          if (!c)
            err(2);
          if (sym < 256)
            buf[bt++] = sym;
          else if (sym == 256) {
            lpos = pos, lm = null;
            break;
          } else {
            var add = sym - 254;
            if (sym > 264) {
              var i = sym - 257, b = fleb[i];
              add = bits(dat, pos, (1 << b) - 1) + fl[i];
              pos += b;
            }
            var d2 = dm[bits16(dat, pos) & dms], dsym = d2 >> 4;
            if (!d2)
              err(3);
            pos += d2 & 15;
            var dt = fd[dsym];
            if (dsym > 3) {
              var b = fdeb[dsym];
              dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
            }
            if (pos > tbts) {
              if (noSt)
                err(0);
              break;
            }
            if (resize)
              cbuf(bt + 131072);
            var end = bt + add;
            if (bt < dt) {
              var shift = dl - dt, dend = Math.min(dt, end);
              if (shift + bt < 0)
                err(3);
              for (; bt < dend; ++bt)
                buf[bt] = dict[shift + bt];
            }
            for (; bt < end; ++bt)
              buf[bt] = buf[bt - dt];
          }
        }
        st.l = lm, st.p = lpos, st.b = bt, st.f = final;
        if (lm)
          final = 1, st.m = lbt, st.d = dm, st.n = dbt;
      } while (!final);
      return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
    };
    wbits = function(d2, p2, v2) {
      v2 <<= p2 & 7;
      var o = p2 / 8 | 0;
      d2[o] |= v2;
      d2[o + 1] |= v2 >> 8;
    };
    wbits16 = function(d2, p2, v2) {
      v2 <<= p2 & 7;
      var o = p2 / 8 | 0;
      d2[o] |= v2;
      d2[o + 1] |= v2 >> 8;
      d2[o + 2] |= v2 >> 16;
    };
    hTree = function(d2, mb) {
      var t = [];
      for (var i = 0; i < d2.length; ++i) {
        if (d2[i])
          t.push({ s: i, f: d2[i] });
      }
      var s = t.length;
      var t2 = t.slice();
      if (!s)
        return { t: et, l: 0 };
      if (s == 1) {
        var v2 = new u8(t[0].s + 1);
        v2[t[0].s] = 1;
        return { t: v2, l: 1 };
      }
      t.sort(function(a, b) {
        return a.f - b.f;
      });
      t.push({ s: -1, f: 25001 });
      var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
      t[0] = { s: -1, f: l.f + r.f, l, r };
      while (i1 != s - 1) {
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = { s: -1, f: l.f + r.f, l, r };
      }
      var maxSym = t2[0].s;
      for (var i = 1; i < s; ++i) {
        if (t2[i].s > maxSym)
          maxSym = t2[i].s;
      }
      var tr = new u16(maxSym + 1);
      var mbt = ln(t[i1 - 1], tr, 0);
      if (mbt > mb) {
        var i = 0, dt = 0;
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function(a, b) {
          return tr[b.s] - tr[a.s] || a.f - b.f;
        });
        for (; i < s; ++i) {
          var i2_1 = t2[i].s;
          if (tr[i2_1] > mb) {
            dt += cst - (1 << mbt - tr[i2_1]);
            tr[i2_1] = mb;
          } else
            break;
        }
        dt >>= lft;
        while (dt > 0) {
          var i2_2 = t2[i].s;
          if (tr[i2_2] < mb)
            dt -= 1 << mb - tr[i2_2]++ - 1;
          else
            ++i;
        }
        for (; i >= 0 && dt; --i) {
          var i2_3 = t2[i].s;
          if (tr[i2_3] == mb) {
            --tr[i2_3];
            ++dt;
          }
        }
        mbt = mb;
      }
      return { t: new u8(tr), l: mbt };
    };
    ln = function(n, l, d2) {
      return n.s == -1 ? Math.max(ln(n.l, l, d2 + 1), ln(n.r, l, d2 + 1)) : l[n.s] = d2;
    };
    lc = function(c) {
      var s = c.length;
      while (s && !c[--s])
        ;
      var cl = new u16(++s);
      var cli = 0, cln = c[0], cls = 1;
      var w = function(v2) {
        cl[cli++] = v2;
      };
      for (var i = 1; i <= s; ++i) {
        if (c[i] == cln && i != s)
          ++cls;
        else {
          if (!cln && cls > 2) {
            for (; cls > 138; cls -= 138)
              w(32754);
            if (cls > 2) {
              w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
              cls = 0;
            }
          } else if (cls > 3) {
            w(cln), --cls;
            for (; cls > 6; cls -= 6)
              w(8304);
            if (cls > 2)
              w(cls - 3 << 5 | 8208), cls = 0;
          }
          while (cls--)
            w(cln);
          cls = 1;
          cln = c[i];
        }
      }
      return { c: cl.subarray(0, cli), n: s };
    };
    clen = function(cf, cl) {
      var l = 0;
      for (var i = 0; i < cl.length; ++i)
        l += cf[i] * cl[i];
      return l;
    };
    wfblk = function(out, pos, dat) {
      var s = dat.length;
      var o = shft(pos + 2);
      out[o] = s & 255;
      out[o + 1] = s >> 8;
      out[o + 2] = out[o] ^ 255;
      out[o + 3] = out[o + 1] ^ 255;
      for (var i = 0; i < s; ++i)
        out[o + i + 4] = dat[i];
      return (o + 4 + s) * 8;
    };
    wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p2) {
      wbits(out, p2++, final);
      ++lf[256];
      var _a2 = hTree(lf, 15), dlt = _a2.t, mlb = _a2.l;
      var _b2 = hTree(df, 15), ddt = _b2.t, mdb = _b2.l;
      var _c = lc(dlt), lclt = _c.c, nlc = _c.n;
      var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;
      var lcfreq = new u16(19);
      for (var i = 0; i < lclt.length; ++i)
        ++lcfreq[lclt[i] & 31];
      for (var i = 0; i < lcdt.length; ++i)
        ++lcfreq[lcdt[i] & 31];
      var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;
      var nlcc = 19;
      for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
        ;
      var flen = bl + 5 << 3;
      var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
      var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];
      if (bs >= 0 && flen <= ftlen && flen <= dtlen)
        return wfblk(out, p2, dat.subarray(bs, bs + bl));
      var lm, ll, dm, dl;
      wbits(out, p2, 1 + (dtlen < ftlen)), p2 += 2;
      if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p2, nlc - 257);
        wbits(out, p2 + 5, ndc - 1);
        wbits(out, p2 + 10, nlcc - 4);
        p2 += 14;
        for (var i = 0; i < nlcc; ++i)
          wbits(out, p2 + 3 * i, lct[clim[i]]);
        p2 += 3 * nlcc;
        var lcts = [lclt, lcdt];
        for (var it = 0; it < 2; ++it) {
          var clct = lcts[it];
          for (var i = 0; i < clct.length; ++i) {
            var len = clct[i] & 31;
            wbits(out, p2, llm[len]), p2 += lct[len];
            if (len > 15)
              wbits(out, p2, clct[i] >> 5 & 127), p2 += clct[i] >> 12;
          }
        }
      } else {
        lm = flm, ll = flt, dm = fdm, dl = fdt;
      }
      for (var i = 0; i < li; ++i) {
        var sym = syms[i];
        if (sym > 255) {
          var len = sym >> 18 & 31;
          wbits16(out, p2, lm[len + 257]), p2 += ll[len + 257];
          if (len > 7)
            wbits(out, p2, sym >> 23 & 31), p2 += fleb[len];
          var dst = sym & 31;
          wbits16(out, p2, dm[dst]), p2 += dl[dst];
          if (dst > 3)
            wbits16(out, p2, sym >> 5 & 8191), p2 += fdeb[dst];
        } else {
          wbits16(out, p2, lm[sym]), p2 += ll[sym];
        }
      }
      wbits16(out, p2, lm[256]);
      return p2 + ll[256];
    };
    deo = new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
    et = new u8(0);
    dflt = function(dat, lvl, plvl, pre, post, st) {
      var s = st.z || dat.length;
      var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7e3)) + post);
      var w = o.subarray(pre, o.length - post);
      var lst = st.l;
      var pos = (st.r || 0) & 7;
      if (lvl) {
        if (pos)
          w[0] = st.r >> 3;
        var opt = deo[lvl - 1];
        var n = opt >> 13, c = opt & 8191;
        var msk_1 = (1 << plvl) - 1;
        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function(i2) {
          return (dat[i2] ^ dat[i2 + 1] << bs1_1 ^ dat[i2 + 2] << bs2_1) & msk_1;
        };
        var syms = new i32(25e3);
        var lf = new u16(288), df = new u16(32);
        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;
        for (; i + 2 < s; ++i) {
          var hv = hsh(i);
          var imod = i & 32767, pimod = head[hv];
          prev[imod] = pimod;
          head[hv] = imod;
          if (wi <= i) {
            var rem = s - i;
            if ((lc_1 > 7e3 || li > 24576) && (rem > 423 || !lst)) {
              pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
              li = lc_1 = eb = 0, bs = i;
              for (var j = 0; j < 286; ++j)
                lf[j] = 0;
              for (var j = 0; j < 30; ++j)
                df[j] = 0;
            }
            var l = 2, d2 = 0, ch_1 = c, dif = imod - pimod & 32767;
            if (rem > 2 && hv == hsh(i - dif)) {
              var maxn = Math.min(n, rem) - 1;
              var maxd = Math.min(32767, i);
              var ml = Math.min(258, rem);
              while (dif <= maxd && --ch_1 && imod != pimod) {
                if (dat[i + l] == dat[i + l - dif]) {
                  var nl = 0;
                  for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                    ;
                  if (nl > l) {
                    l = nl, d2 = dif;
                    if (nl > maxn)
                      break;
                    var mmd = Math.min(dif, nl - 2);
                    var md = 0;
                    for (var j = 0; j < mmd; ++j) {
                      var ti = i - dif + j & 32767;
                      var pti = prev[ti];
                      var cd = ti - pti & 32767;
                      if (cd > md)
                        md = cd, pimod = ti;
                    }
                  }
                }
                imod = pimod, pimod = prev[imod];
                dif += imod - pimod & 32767;
              }
            }
            if (d2) {
              syms[li++] = 268435456 | revfl[l] << 18 | revfd[d2];
              var lin = revfl[l] & 31, din = revfd[d2] & 31;
              eb += fleb[lin] + fdeb[din];
              ++lf[257 + lin];
              ++df[din];
              wi = i + l;
              ++lc_1;
            } else {
              syms[li++] = dat[i];
              ++lf[dat[i]];
            }
          }
        }
        for (i = Math.max(i, wi); i < s; ++i) {
          syms[li++] = dat[i];
          ++lf[dat[i]];
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
        if (!lst) {
          st.r = pos & 7 | w[pos / 8 | 0] << 3;
          pos -= 7;
          st.h = head, st.p = prev, st.i = i, st.w = wi;
        }
      } else {
        for (var i = st.w || 0; i < s + lst; i += 65535) {
          var e = i + 65535;
          if (e >= s) {
            w[pos / 8 | 0] = lst;
            e = s;
          }
          pos = wfblk(w, pos + 1, dat.subarray(i, e));
        }
        st.i = s;
      }
      return slc(o, 0, pre + shft(pos) + post);
    };
    crct = function() {
      var t = new Int32Array(256);
      for (var i = 0; i < 256; ++i) {
        var c = i, k = 9;
        while (--k)
          c = (c & 1 && -306674912) ^ c >>> 1;
        t[i] = c;
      }
      return t;
    }();
    crc = function() {
      var c = -1;
      return {
        p: function(d2) {
          var cr = c;
          for (var i = 0; i < d2.length; ++i)
            cr = crct[cr & 255 ^ d2[i]] ^ cr >>> 8;
          c = cr;
        },
        d: function() {
          return ~c;
        }
      };
    };
    adler = function() {
      var a = 1, b = 0;
      return {
        p: function(d2) {
          var n = a, m = b;
          var l = d2.length | 0;
          for (var i = 0; i != l; ) {
            var e = Math.min(i + 2655, l);
            for (; i < e; ++i)
              m += n += d2[i];
            n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);
          }
          a = n, b = m;
        },
        d: function() {
          a %= 65521, b %= 65521;
          return (a & 255) << 24 | (a & 65280) << 8 | (b & 255) << 8 | b >> 8;
        }
      };
    };
    dopt = function(dat, opt, pre, post, st) {
      if (!st) {
        st = { l: 1 };
        if (opt.dictionary) {
          var dict = opt.dictionary.subarray(-32768);
          var newDat = new u8(dict.length + dat.length);
          newDat.set(dict);
          newDat.set(dat, dict.length);
          dat = newDat;
          st.w = dict.length;
        }
      }
      return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20 : 12 + opt.mem, pre, post, st);
    };
    mrg = function(a, b) {
      var o = {};
      for (var k in a)
        o[k] = a[k];
      for (var k in b)
        o[k] = b[k];
      return o;
    };
    wcln = function(fn, fnStr, td2) {
      var dt = fn();
      var st = fn.toString();
      var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/\s+/g, "").split(",");
      for (var i = 0; i < dt.length; ++i) {
        var v2 = dt[i], k = ks[i];
        if (typeof v2 == "function") {
          fnStr += ";" + k + "=";
          var st_1 = v2.toString();
          if (v2.prototype) {
            if (st_1.indexOf("[native code]") != -1) {
              var spInd = st_1.indexOf(" ", 8) + 1;
              fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
            } else {
              fnStr += st_1;
              for (var t in v2.prototype)
                fnStr += ";" + k + ".prototype." + t + "=" + v2.prototype[t].toString();
            }
          } else
            fnStr += st_1;
        } else
          td2[k] = v2;
      }
      return fnStr;
    };
    ch = [];
    cbfs = function(v2) {
      var tl = [];
      for (var k in v2) {
        if (v2[k].buffer) {
          tl.push((v2[k] = new v2[k].constructor(v2[k])).buffer);
        }
      }
      return tl;
    };
    wrkr = function(fns, init, id, cb) {
      if (!ch[id]) {
        var fnStr = "", td_1 = {}, m = fns.length - 1;
        for (var i = 0; i < m; ++i)
          fnStr = wcln(fns[i], fnStr, td_1);
        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };
      }
      var td2 = mrg({}, ch[id].e);
      return wk(ch[id].c + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td2, cbfs(td2), cb);
    };
    bInflt = function() {
      return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt];
    };
    bDflt = function() {
      return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
    };
    guze = function() {
      return [gzs, gzl];
    };
    zule = function() {
      return [zls];
    };
    pbf = function(msg) {
      return postMessage(msg, [msg.buffer]);
    };
    gopt = function(o) {
      return o && {
        out: o.size && new u8(o.size),
        dictionary: o.dictionary
      };
    };
    astrm = function(strm) {
      strm.ondata = function(dat, final) {
        return postMessage([dat, final], [dat.buffer]);
      };
      return function(ev) {
        if (ev.data.length) {
          strm.push(ev.data[0], ev.data[1]);
          postMessage([ev.data[0].length]);
        } else
          strm.flush();
      };
    };
    astrmify = function(fns, strm, opts, init, id, flush, ext) {
      var t;
      var w = wrkr(fns, init, id, function(err2, dat) {
        if (err2)
          w.terminate(), strm.ondata.call(strm, err2);
        else if (!Array.isArray(dat))
          ext(dat);
        else if (dat.length == 1) {
          strm.queuedSize -= dat[0];
          if (strm.ondrain)
            strm.ondrain(dat[0]);
        } else {
          if (dat[1])
            w.terminate();
          strm.ondata.call(strm, err2, dat[0], dat[1]);
        }
      });
      w.postMessage(opts);
      strm.queuedSize = 0;
      strm.push = function(d2, f2) {
        if (!strm.ondata)
          err(5);
        if (t)
          strm.ondata(err(4, 0, 1), null, !!f2);
        strm.queuedSize += d2.length;
        w.postMessage([d2, t = f2], [d2.buffer]);
      };
      strm.terminate = function() {
        w.terminate();
      };
      if (flush) {
        strm.flush = function() {
          w.postMessage([]);
        };
      }
    };
    b2 = function(d2, b) {
      return d2[b] | d2[b + 1] << 8;
    };
    b4 = function(d2, b) {
      return (d2[b] | d2[b + 1] << 8 | d2[b + 2] << 16 | d2[b + 3] << 24) >>> 0;
    };
    b8 = function(d2, b) {
      return b4(d2, b) + b4(d2, b + 4) * 4294967296;
    };
    wbytes = function(d2, b, v2) {
      for (; v2; ++b)
        d2[b] = v2, v2 >>>= 8;
    };
    gzh = function(c, o) {
      var fn = o.filename;
      c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3;
      if (o.mtime != 0)
        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1e3));
      if (fn) {
        c[3] = 8;
        for (var i = 0; i <= fn.length; ++i)
          c[i + 10] = fn.charCodeAt(i);
      }
    };
    gzs = function(d2) {
      if (d2[0] != 31 || d2[1] != 139 || d2[2] != 8)
        err(6, "invalid gzip data");
      var flg = d2[3];
      var st = 10;
      if (flg & 4)
        st += (d2[10] | d2[11] << 8) + 2;
      for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d2[st++])
        ;
      return st + (flg & 2);
    };
    gzl = function(d2) {
      var l = d2.length;
      return (d2[l - 4] | d2[l - 3] << 8 | d2[l - 2] << 16 | d2[l - 1] << 24) >>> 0;
    };
    gzhl = function(o) {
      return 10 + (o.filename ? o.filename.length + 1 : 0);
    };
    zlh = function(c, o) {
      var lv = o.level, fl2 = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
      c[0] = 120, c[1] = fl2 << 6 | (o.dictionary && 32);
      c[1] |= 31 - (c[0] << 8 | c[1]) % 31;
      if (o.dictionary) {
        var h = adler();
        h.p(o.dictionary);
        wbytes(c, 2, h.d());
      }
    };
    zls = function(d2, dict) {
      if ((d2[0] & 15) != 8 || d2[0] >> 4 > 7 || (d2[0] << 8 | d2[1]) % 31)
        err(6, "invalid zlib data");
      if ((d2[1] >> 5 & 1) == +!dict)
        err(6, "invalid zlib data: " + (d2[1] & 32 ? "need" : "unexpected") + " dictionary");
      return (d2[1] >> 3 & 4) + 2;
    };
    Deflate = function() {
      function Deflate2(opts, cb) {
        if (typeof opts == "function")
          cb = opts, opts = {};
        this.ondata = cb;
        this.o = opts || {};
        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };
        this.b = new u8(98304);
        if (this.o.dictionary) {
          var dict = this.o.dictionary.subarray(-32768);
          this.b.set(dict, 32768 - dict.length);
          this.s.i = 32768 - dict.length;
        }
      }
      Deflate2.prototype.p = function(c, f2) {
        this.ondata(dopt(c, this.o, 0, 0, this.s), f2);
      };
      Deflate2.prototype.push = function(chunk, final) {
        if (!this.ondata)
          err(5);
        if (this.s.l)
          err(4);
        var endLen = chunk.length + this.s.z;
        if (endLen > this.b.length) {
          if (endLen > 2 * this.b.length - 32768) {
            var newBuf = new u8(endLen & -32768);
            newBuf.set(this.b.subarray(0, this.s.z));
            this.b = newBuf;
          }
          var split = this.b.length - this.s.z;
          this.b.set(chunk.subarray(0, split), this.s.z);
          this.s.z = this.b.length;
          this.p(this.b, false);
          this.b.set(this.b.subarray(-32768));
          this.b.set(chunk.subarray(split), 32768);
          this.s.z = chunk.length - split + 32768;
          this.s.i = 32766, this.s.w = 32768;
        } else {
          this.b.set(chunk, this.s.z);
          this.s.z += chunk.length;
        }
        this.s.l = final & 1;
        if (this.s.z > this.s.w + 8191 || final) {
          this.p(this.b, final || false);
          this.s.w = this.s.i, this.s.i -= 2;
        }
      };
      Deflate2.prototype.flush = function() {
        if (!this.ondata)
          err(5);
        if (this.s.l)
          err(4);
        this.p(this.b, false);
        this.s.w = this.s.i, this.s.i -= 2;
      };
      return Deflate2;
    }();
    AsyncDeflate = /* @__PURE__ */ function() {
      function AsyncDeflate2(opts, cb) {
        astrmify([
          bDflt,
          function() {
            return [astrm, Deflate];
          }
        ], this, StrmOpt.call(this, opts, cb), function(ev) {
          var strm = new Deflate(ev.data);
          onmessage = astrm(strm);
        }, 6, 1);
      }
      return AsyncDeflate2;
    }();
    Inflate = function() {
      function Inflate2(opts, cb) {
        if (typeof opts == "function")
          cb = opts, opts = {};
        this.ondata = cb;
        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);
        this.s = { i: 0, b: dict ? dict.length : 0 };
        this.o = new u8(32768);
        this.p = new u8(0);
        if (dict)
          this.o.set(dict);
      }
      Inflate2.prototype.e = function(c) {
        if (!this.ondata)
          err(5);
        if (this.d)
          err(4);
        if (!this.p.length)
          this.p = c;
        else if (c.length) {
          var n = new u8(this.p.length + c.length);
          n.set(this.p), n.set(c, this.p.length), this.p = n;
        }
      };
      Inflate2.prototype.c = function(final) {
        this.s.i = +(this.d = final || false);
        var bts = this.s.b;
        var dt = inflt(this.p, this.s, this.o);
        this.ondata(slc(dt, bts, this.s.b), this.d);
        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
        this.p = slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;
      };
      Inflate2.prototype.push = function(chunk, final) {
        this.e(chunk), this.c(final);
      };
      return Inflate2;
    }();
    AsyncInflate = /* @__PURE__ */ function() {
      function AsyncInflate2(opts, cb) {
        astrmify([
          bInflt,
          function() {
            return [astrm, Inflate];
          }
        ], this, StrmOpt.call(this, opts, cb), function(ev) {
          var strm = new Inflate(ev.data);
          onmessage = astrm(strm);
        }, 7, 0);
      }
      return AsyncInflate2;
    }();
    Gzip = function() {
      function Gzip2(opts, cb) {
        this.c = crc();
        this.l = 0;
        this.v = 1;
        Deflate.call(this, opts, cb);
      }
      Gzip2.prototype.push = function(chunk, final) {
        this.c.p(chunk);
        this.l += chunk.length;
        Deflate.prototype.push.call(this, chunk, final);
      };
      Gzip2.prototype.p = function(c, f2) {
        var raw = dopt(c, this.o, this.v && gzhl(this.o), f2 && 8, this.s);
        if (this.v)
          gzh(raw, this.o), this.v = 0;
        if (f2)
          wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
        this.ondata(raw, f2);
      };
      Gzip2.prototype.flush = function() {
        Deflate.prototype.flush.call(this);
      };
      return Gzip2;
    }();
    Gunzip = function() {
      function Gunzip2(opts, cb) {
        this.v = 1;
        this.r = 0;
        Inflate.call(this, opts, cb);
      }
      Gunzip2.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        this.r += chunk.length;
        if (this.v) {
          var p2 = this.p.subarray(this.v - 1);
          var s = p2.length > 3 ? gzs(p2) : 4;
          if (s > p2.length) {
            if (!final)
              return;
          } else if (this.v > 1 && this.onmember) {
            this.onmember(this.r - p2.length);
          }
          this.p = p2.subarray(s), this.v = 0;
        }
        Inflate.prototype.c.call(this, final);
        if (this.s.f && !this.s.l && !final) {
          this.v = shft(this.s.p) + 9;
          this.s = { i: 0 };
          this.o = new u8(0);
          this.push(new u8(0), final);
        }
      };
      return Gunzip2;
    }();
    AsyncGunzip = /* @__PURE__ */ function() {
      function AsyncGunzip2(opts, cb) {
        var _this = this;
        astrmify([
          bInflt,
          guze,
          function() {
            return [astrm, Inflate, Gunzip];
          }
        ], this, StrmOpt.call(this, opts, cb), function(ev) {
          var strm = new Gunzip(ev.data);
          strm.onmember = function(offset) {
            return postMessage(offset);
          };
          onmessage = astrm(strm);
        }, 9, 0, function(offset) {
          return _this.onmember && _this.onmember(offset);
        });
      }
      return AsyncGunzip2;
    }();
    Zlib = function() {
      function Zlib2(opts, cb) {
        this.c = adler();
        this.v = 1;
        Deflate.call(this, opts, cb);
      }
      Zlib2.prototype.push = function(chunk, final) {
        this.c.p(chunk);
        Deflate.prototype.push.call(this, chunk, final);
      };
      Zlib2.prototype.p = function(c, f2) {
        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f2 && 4, this.s);
        if (this.v)
          zlh(raw, this.o), this.v = 0;
        if (f2)
          wbytes(raw, raw.length - 4, this.c.d());
        this.ondata(raw, f2);
      };
      Zlib2.prototype.flush = function() {
        Deflate.prototype.flush.call(this);
      };
      return Zlib2;
    }();
    Unzlib = function() {
      function Unzlib2(opts, cb) {
        Inflate.call(this, opts, cb);
        this.v = opts && opts.dictionary ? 2 : 1;
      }
      Unzlib2.prototype.push = function(chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
          if (this.p.length < 6 && !final)
            return;
          this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;
        }
        if (final) {
          if (this.p.length < 4)
            err(6, "invalid zlib data");
          this.p = this.p.subarray(0, -4);
        }
        Inflate.prototype.c.call(this, final);
      };
      return Unzlib2;
    }();
    AsyncUnzlib = /* @__PURE__ */ function() {
      function AsyncUnzlib2(opts, cb) {
        astrmify([
          bInflt,
          zule,
          function() {
            return [astrm, Inflate, Unzlib];
          }
        ], this, StrmOpt.call(this, opts, cb), function(ev) {
          var strm = new Unzlib(ev.data);
          onmessage = astrm(strm);
        }, 11, 0);
      }
      return AsyncUnzlib2;
    }();
    Decompress = function() {
      function Decompress2(opts, cb) {
        this.o = StrmOpt.call(this, opts, cb) || {};
        this.G = Gunzip;
        this.I = Inflate;
        this.Z = Unzlib;
      }
      Decompress2.prototype.i = function() {
        var _this = this;
        this.s.ondata = function(dat, final) {
          _this.ondata(dat, final);
        };
      };
      Decompress2.prototype.push = function(chunk, final) {
        if (!this.ondata)
          err(5);
        if (!this.s) {
          if (this.p && this.p.length) {
            var n = new u8(this.p.length + chunk.length);
            n.set(this.p), n.set(chunk, this.p.length);
          } else
            this.p = chunk;
          if (this.p.length > 2) {
            this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(this.o) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(this.o) : new this.Z(this.o);
            this.i();
            this.s.push(this.p, final);
            this.p = null;
          }
        } else
          this.s.push(chunk, final);
      };
      return Decompress2;
    }();
    AsyncDecompress = function() {
      function AsyncDecompress2(opts, cb) {
        Decompress.call(this, opts, cb);
        this.queuedSize = 0;
        this.G = AsyncGunzip;
        this.I = AsyncInflate;
        this.Z = AsyncUnzlib;
      }
      AsyncDecompress2.prototype.i = function() {
        var _this = this;
        this.s.ondata = function(err2, dat, final) {
          _this.ondata(err2, dat, final);
        };
        this.s.ondrain = function(size) {
          _this.queuedSize -= size;
          if (_this.ondrain)
            _this.ondrain(size);
        };
      };
      AsyncDecompress2.prototype.push = function(chunk, final) {
        this.queuedSize += chunk.length;
        Decompress.prototype.push.call(this, chunk, final);
      };
      return AsyncDecompress2;
    }();
    te = typeof TextEncoder != "undefined" && new TextEncoder();
    td = typeof TextDecoder != "undefined" && new TextDecoder();
    tds = 0;
    try {
      td.decode(et, { stream: true });
      tds = 1;
    } catch (e) {
    }
    dutf8 = function(d2) {
      for (var r = "", i = 0; ; ) {
        var c = d2[i++];
        var eb = (c > 127) + (c > 223) + (c > 239);
        if (i + eb > d2.length)
          return { s: r, r: slc(d2, i - 1) };
        if (!eb)
          r += String.fromCharCode(c);
        else if (eb == 3) {
          c = ((c & 15) << 18 | (d2[i++] & 63) << 12 | (d2[i++] & 63) << 6 | d2[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
        } else if (eb & 1)
          r += String.fromCharCode((c & 31) << 6 | d2[i++] & 63);
        else
          r += String.fromCharCode((c & 15) << 12 | (d2[i++] & 63) << 6 | d2[i++] & 63);
      }
    };
    DecodeUTF8 = function() {
      function DecodeUTF82(cb) {
        this.ondata = cb;
        if (tds)
          this.t = new TextDecoder();
        else
          this.p = et;
      }
      DecodeUTF82.prototype.push = function(chunk, final) {
        if (!this.ondata)
          err(5);
        final = !!final;
        if (this.t) {
          this.ondata(this.t.decode(chunk, { stream: true }), final);
          if (final) {
            if (this.t.decode().length)
              err(8);
            this.t = null;
          }
          return;
        }
        if (!this.p)
          err(4);
        var dat = new u8(this.p.length + chunk.length);
        dat.set(this.p);
        dat.set(chunk, this.p.length);
        var _a2 = dutf8(dat), s = _a2.s, r = _a2.r;
        if (final) {
          if (r.length)
            err(8);
          this.p = null;
        } else
          this.p = r;
        this.ondata(s, final);
      };
      return DecodeUTF82;
    }();
    EncodeUTF8 = function() {
      function EncodeUTF82(cb) {
        this.ondata = cb;
      }
      EncodeUTF82.prototype.push = function(chunk, final) {
        if (!this.ondata)
          err(5);
        if (this.d)
          err(4);
        this.ondata(strToU8(chunk), this.d = final || false);
      };
      return EncodeUTF82;
    }();
    dbf = function(l) {
      return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;
    };
    z64e = function(d2, b) {
      for (; b2(d2, b) != 1; b += 4 + b2(d2, b + 2))
        ;
      return [b8(d2, b + 12), b8(d2, b + 4), b8(d2, b + 20)];
    };
    exfl = function(ex) {
      var le = 0;
      if (ex) {
        for (var k in ex) {
          var l = ex[k].length;
          if (l > 65535)
            err(9);
          le += l + 4;
        }
      }
      return le;
    };
    wzh = function(d2, b, f2, fn, u, c, ce, co) {
      var fl2 = fn.length, ex = f2.extra, col = co && co.length;
      var exl = exfl(ex);
      wbytes(d2, b, ce != null ? 33639248 : 67324752), b += 4;
      if (ce != null)
        d2[b++] = 20, d2[b++] = f2.os;
      d2[b] = 20, b += 2;
      d2[b++] = f2.flag << 1 | (c < 0 && 8), d2[b++] = u && 8;
      d2[b++] = f2.compression & 255, d2[b++] = f2.compression >> 8;
      var dt = new Date(f2.mtime == null ? Date.now() : f2.mtime), y = dt.getFullYear() - 1980;
      if (y < 0 || y > 119)
        err(10);
      wbytes(d2, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >> 1), b += 4;
      if (c != -1) {
        wbytes(d2, b, f2.crc);
        wbytes(d2, b + 4, c < 0 ? -c - 2 : c);
        wbytes(d2, b + 8, f2.size);
      }
      wbytes(d2, b + 12, fl2);
      wbytes(d2, b + 14, exl), b += 16;
      if (ce != null) {
        wbytes(d2, b, col);
        wbytes(d2, b + 6, f2.attrs);
        wbytes(d2, b + 10, ce), b += 14;
      }
      d2.set(fn, b);
      b += fl2;
      if (exl) {
        for (var k in ex) {
          var exf = ex[k], l = exf.length;
          wbytes(d2, b, +k);
          wbytes(d2, b + 2, l);
          d2.set(exf, b + 4), b += 4 + l;
        }
      }
      if (col)
        d2.set(co, b), b += col;
      return b;
    };
    wzf = function(o, b, c, d2, e) {
      wbytes(o, b, 101010256);
      wbytes(o, b + 8, c);
      wbytes(o, b + 10, c);
      wbytes(o, b + 12, d2);
      wbytes(o, b + 16, e);
    };
    ZipPassThrough = function() {
      function ZipPassThrough2(filename) {
        this.filename = filename;
        this.c = crc();
        this.size = 0;
        this.compression = 0;
      }
      ZipPassThrough2.prototype.process = function(chunk, final) {
        this.ondata(null, chunk, final);
      };
      ZipPassThrough2.prototype.push = function(chunk, final) {
        if (!this.ondata)
          err(5);
        this.c.p(chunk);
        this.size += chunk.length;
        if (final)
          this.crc = this.c.d();
        this.process(chunk, final || false);
      };
      return ZipPassThrough2;
    }();
    ZipDeflate = function() {
      function ZipDeflate2(filename, opts) {
        var _this = this;
        if (!opts)
          opts = {};
        ZipPassThrough.call(this, filename);
        this.d = new Deflate(opts, function(dat, final) {
          _this.ondata(null, dat, final);
        });
        this.compression = 8;
        this.flag = dbf(opts.level);
      }
      ZipDeflate2.prototype.process = function(chunk, final) {
        try {
          this.d.push(chunk, final);
        } catch (e) {
          this.ondata(e, null, final);
        }
      };
      ZipDeflate2.prototype.push = function(chunk, final) {
        ZipPassThrough.prototype.push.call(this, chunk, final);
      };
      return ZipDeflate2;
    }();
    AsyncZipDeflate = function() {
      function AsyncZipDeflate2(filename, opts) {
        var _this = this;
        if (!opts)
          opts = {};
        ZipPassThrough.call(this, filename);
        this.d = new AsyncDeflate(opts, function(err2, dat, final) {
          _this.ondata(err2, dat, final);
        });
        this.compression = 8;
        this.flag = dbf(opts.level);
        this.terminate = this.d.terminate;
      }
      AsyncZipDeflate2.prototype.process = function(chunk, final) {
        this.d.push(chunk, final);
      };
      AsyncZipDeflate2.prototype.push = function(chunk, final) {
        ZipPassThrough.prototype.push.call(this, chunk, final);
      };
      return AsyncZipDeflate2;
    }();
    Zip = function() {
      function Zip2(cb) {
        this.ondata = cb;
        this.u = [];
        this.d = 1;
      }
      Zip2.prototype.add = function(file) {
        var _this = this;
        if (!this.ondata)
          err(5);
        if (this.d & 2)
          this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);
        else {
          var f2 = strToU8(file.filename), fl_1 = f2.length;
          var com = file.comment, o = com && strToU8(com);
          var u = fl_1 != file.filename.length || o && com.length != o.length;
          var hl_1 = fl_1 + exfl(file.extra) + 30;
          if (fl_1 > 65535)
            this.ondata(err(11, 0, 1), null, false);
          var header = new u8(hl_1);
          wzh(header, 0, file, f2, u, -1);
          var chks_1 = [header];
          var pAll_1 = function() {
            for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {
              var chk = chks_2[_i];
              _this.ondata(null, chk, false);
            }
            chks_1 = [];
          };
          var tr_1 = this.d;
          this.d = 0;
          var ind_1 = this.u.length;
          var uf_1 = mrg(file, {
            f: f2,
            u,
            o,
            t: function() {
              if (file.terminate)
                file.terminate();
            },
            r: function() {
              pAll_1();
              if (tr_1) {
                var nxt = _this.u[ind_1 + 1];
                if (nxt)
                  nxt.r();
                else
                  _this.d = 1;
              }
              tr_1 = 1;
            }
          });
          var cl_1 = 0;
          file.ondata = function(err2, dat, final) {
            if (err2) {
              _this.ondata(err2, dat, final);
              _this.terminate();
            } else {
              cl_1 += dat.length;
              chks_1.push(dat);
              if (final) {
                var dd = new u8(16);
                wbytes(dd, 0, 134695760);
                wbytes(dd, 4, file.crc);
                wbytes(dd, 8, cl_1);
                wbytes(dd, 12, file.size);
                chks_1.push(dd);
                uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;
                if (tr_1)
                  uf_1.r();
                tr_1 = 1;
              } else if (tr_1)
                pAll_1();
            }
          };
          this.u.push(uf_1);
        }
      };
      Zip2.prototype.end = function() {
        var _this = this;
        if (this.d & 2) {
          this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);
          return;
        }
        if (this.d)
          this.e();
        else
          this.u.push({
            r: function() {
              if (!(_this.d & 1))
                return;
              _this.u.splice(-1, 1);
              _this.e();
            },
            t: function() {
            }
          });
        this.d = 3;
      };
      Zip2.prototype.e = function() {
        var bt = 0, l = 0, tl = 0;
        for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
          var f2 = _a2[_i];
          tl += 46 + f2.f.length + exfl(f2.extra) + (f2.o ? f2.o.length : 0);
        }
        var out = new u8(tl + 22);
        for (var _b2 = 0, _c = this.u; _b2 < _c.length; _b2++) {
          var f2 = _c[_b2];
          wzh(out, bt, f2, f2.f, f2.u, -f2.c - 2, l, f2.o);
          bt += 46 + f2.f.length + exfl(f2.extra) + (f2.o ? f2.o.length : 0), l += f2.b;
        }
        wzf(out, bt, this.u.length, tl, l);
        this.ondata(null, out, true);
        this.d = 2;
      };
      Zip2.prototype.terminate = function() {
        for (var _i = 0, _a2 = this.u; _i < _a2.length; _i++) {
          var f2 = _a2[_i];
          f2.t();
        }
        this.d = 2;
      };
      return Zip2;
    }();
    UnzipPassThrough = function() {
      function UnzipPassThrough2() {
      }
      UnzipPassThrough2.prototype.push = function(data, final) {
        this.ondata(null, data, final);
      };
      UnzipPassThrough2.compression = 0;
      return UnzipPassThrough2;
    }();
    UnzipInflate = function() {
      function UnzipInflate2() {
        var _this = this;
        this.i = new Inflate(function(dat, final) {
          _this.ondata(null, dat, final);
        });
      }
      UnzipInflate2.prototype.push = function(data, final) {
        try {
          this.i.push(data, final);
        } catch (e) {
          this.ondata(e, null, final);
        }
      };
      UnzipInflate2.compression = 8;
      return UnzipInflate2;
    }();
    AsyncUnzipInflate = function() {
      function AsyncUnzipInflate2(_, sz) {
        var _this = this;
        if (sz < 32e4) {
          this.i = new Inflate(function(dat, final) {
            _this.ondata(null, dat, final);
          });
        } else {
          this.i = new AsyncInflate(function(err2, dat, final) {
            _this.ondata(err2, dat, final);
          });
          this.terminate = this.i.terminate;
        }
      }
      AsyncUnzipInflate2.prototype.push = function(data, final) {
        if (this.i.terminate)
          data = slc(data, 0);
        this.i.push(data, final);
      };
      AsyncUnzipInflate2.compression = 8;
      return AsyncUnzipInflate2;
    }();
    Unzip = function() {
      function Unzip2(cb) {
        this.onfile = cb;
        this.k = [];
        this.o = {
          0: UnzipPassThrough
        };
        this.p = et;
      }
      Unzip2.prototype.push = function(chunk, final) {
        var _this = this;
        if (!this.onfile)
          err(5);
        if (!this.p)
          err(4);
        if (this.c > 0) {
          var len = Math.min(this.c, chunk.length);
          var toAdd = chunk.subarray(0, len);
          this.c -= len;
          if (this.d)
            this.d.push(toAdd, !this.c);
          else
            this.k[0].push(toAdd);
          chunk = chunk.subarray(len);
          if (chunk.length)
            return this.push(chunk, final);
        } else {
          var f2 = 0, i = 0, is = void 0, buf = void 0;
          if (!this.p.length)
            buf = chunk;
          else if (!chunk.length)
            buf = this.p;
          else {
            buf = new u8(this.p.length + chunk.length);
            buf.set(this.p), buf.set(chunk, this.p.length);
          }
          var l = buf.length, oc = this.c, add = oc && this.d;
          var _loop_2 = function() {
            var _a2;
            var sig = b4(buf, i);
            if (sig == 67324752) {
              f2 = 1, is = i;
              this_1.d = null;
              this_1.c = 0;
              var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);
              if (l > i + 30 + fnl + es) {
                var chks_3 = [];
                this_1.k.unshift(chks_3);
                f2 = 2;
                var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);
                var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);
                if (sc_1 == 4294967295) {
                  _a2 = dd ? [-2] : z64e(buf, i), sc_1 = _a2[0], su_1 = _a2[1];
                } else if (dd)
                  sc_1 = -1;
                i += es;
                this_1.c = sc_1;
                var d_1;
                var file_1 = {
                  name: fn_1,
                  compression: cmp_1,
                  start: function() {
                    if (!file_1.ondata)
                      err(5);
                    if (!sc_1)
                      file_1.ondata(null, et, true);
                    else {
                      var ctr = _this.o[cmp_1];
                      if (!ctr)
                        file_1.ondata(err(14, "unknown compression type " + cmp_1, 1), null, false);
                      d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);
                      d_1.ondata = function(err2, dat3, final2) {
                        file_1.ondata(err2, dat3, final2);
                      };
                      for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {
                        var dat2 = chks_4[_i];
                        d_1.push(dat2, false);
                      }
                      if (_this.k[0] == chks_3 && _this.c)
                        _this.d = d_1;
                      else
                        d_1.push(et, true);
                    }
                  },
                  terminate: function() {
                    if (d_1 && d_1.terminate)
                      d_1.terminate();
                  }
                };
                if (sc_1 >= 0)
                  file_1.size = sc_1, file_1.originalSize = su_1;
                this_1.onfile(file_1);
              }
              return "break";
            } else if (oc) {
              if (sig == 134695760) {
                is = i += 12 + (oc == -2 && 8), f2 = 3, this_1.c = 0;
                return "break";
              } else if (sig == 33639248) {
                is = i -= 4, f2 = 3, this_1.c = 0;
                return "break";
              }
            }
          };
          var this_1 = this;
          for (; i < l - 4; ++i) {
            var state_1 = _loop_2();
            if (state_1 === "break")
              break;
          }
          this.p = et;
          if (oc < 0) {
            var dat = f2 ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 134695760 && 4)) : buf.subarray(0, i);
            if (add)
              add.push(dat, !!f2);
            else
              this.k[+(f2 == 2)].push(dat);
          }
          if (f2 & 2)
            return this.push(buf.subarray(i), final);
          this.p = buf.subarray(i);
        }
        if (final) {
          if (this.c)
            err(13);
          this.p = null;
        }
      };
      Unzip2.prototype.register = function(decoder) {
        this.o[decoder.compression] = decoder;
      };
      return Unzip2;
    }();
  }
});

// node_modules/three/examples/jsm/curves/NURBSUtils.js
function findSpan(p2, u, U) {
  const n = U.length - p2 - 1;
  if (u >= U[n]) {
    return n - 1;
  }
  if (u <= U[p2]) {
    return p2;
  }
  let low = p2;
  let high = n;
  let mid = Math.floor((low + high) / 2);
  while (u < U[mid] || u >= U[mid + 1]) {
    if (u < U[mid]) {
      high = mid;
    } else {
      low = mid;
    }
    mid = Math.floor((low + high) / 2);
  }
  return mid;
}
function calcBasisFunctions(span, u, p2, U) {
  const N = [];
  const left = [];
  const right = [];
  N[0] = 1;
  for (let j = 1; j <= p2; ++j) {
    left[j] = u - U[span + 1 - j];
    right[j] = U[span + j] - u;
    let saved = 0;
    for (let r = 0; r < j; ++r) {
      const rv = right[r + 1];
      const lv = left[j - r];
      const temp = N[r] / (rv + lv);
      N[r] = saved + rv * temp;
      saved = lv * temp;
    }
    N[j] = saved;
  }
  return N;
}
function calcBSplinePoint(p2, U, P, u) {
  const span = findSpan(p2, u, U);
  const N = calcBasisFunctions(span, u, p2, U);
  const C = new Vector4(0, 0, 0, 0);
  for (let j = 0; j <= p2; ++j) {
    const point = P[span - p2 + j];
    const Nj = N[j];
    const wNj = point.w * Nj;
    C.x += point.x * wNj;
    C.y += point.y * wNj;
    C.z += point.z * wNj;
    C.w += point.w * Nj;
  }
  return C;
}
function calcBasisFunctionDerivatives(span, u, p2, n, U) {
  const zeroArr = [];
  for (let i = 0; i <= p2; ++i)
    zeroArr[i] = 0;
  const ders = [];
  for (let i = 0; i <= n; ++i)
    ders[i] = zeroArr.slice(0);
  const ndu = [];
  for (let i = 0; i <= p2; ++i)
    ndu[i] = zeroArr.slice(0);
  ndu[0][0] = 1;
  const left = zeroArr.slice(0);
  const right = zeroArr.slice(0);
  for (let j = 1; j <= p2; ++j) {
    left[j] = u - U[span + 1 - j];
    right[j] = U[span + j] - u;
    let saved = 0;
    for (let r2 = 0; r2 < j; ++r2) {
      const rv = right[r2 + 1];
      const lv = left[j - r2];
      ndu[j][r2] = rv + lv;
      const temp = ndu[r2][j - 1] / ndu[j][r2];
      ndu[r2][j] = saved + rv * temp;
      saved = lv * temp;
    }
    ndu[j][j] = saved;
  }
  for (let j = 0; j <= p2; ++j) {
    ders[0][j] = ndu[j][p2];
  }
  for (let r2 = 0; r2 <= p2; ++r2) {
    let s1 = 0;
    let s2 = 1;
    const a = [];
    for (let i = 0; i <= p2; ++i) {
      a[i] = zeroArr.slice(0);
    }
    a[0][0] = 1;
    for (let k = 1; k <= n; ++k) {
      let d2 = 0;
      const rk = r2 - k;
      const pk = p2 - k;
      if (r2 >= k) {
        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];
        d2 = a[s2][0] * ndu[rk][pk];
      }
      const j1 = rk >= -1 ? 1 : -rk;
      const j2 = r2 - 1 <= pk ? k - 1 : p2 - r2;
      for (let j3 = j1; j3 <= j2; ++j3) {
        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];
        d2 += a[s2][j3] * ndu[rk + j3][pk];
      }
      if (r2 <= pk) {
        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r2];
        d2 += a[s2][k] * ndu[r2][pk];
      }
      ders[k][r2] = d2;
      const j = s1;
      s1 = s2;
      s2 = j;
    }
  }
  let r = p2;
  for (let k = 1; k <= n; ++k) {
    for (let j = 0; j <= p2; ++j) {
      ders[k][j] *= r;
    }
    r *= p2 - k;
  }
  return ders;
}
function calcBSplineDerivatives(p2, U, P, u, nd) {
  const du = nd < p2 ? nd : p2;
  const CK = [];
  const span = findSpan(p2, u, U);
  const nders = calcBasisFunctionDerivatives(span, u, p2, du, U);
  const Pw = [];
  for (let i = 0; i < P.length; ++i) {
    const point = P[i].clone();
    const w = point.w;
    point.x *= w;
    point.y *= w;
    point.z *= w;
    Pw[i] = point;
  }
  for (let k = 0; k <= du; ++k) {
    const point = Pw[span - p2].clone().multiplyScalar(nders[k][0]);
    for (let j = 1; j <= p2; ++j) {
      point.add(Pw[span - p2 + j].clone().multiplyScalar(nders[k][j]));
    }
    CK[k] = point;
  }
  for (let k = du + 1; k <= nd + 1; ++k) {
    CK[k] = new Vector4(0, 0, 0);
  }
  return CK;
}
function calcKoverI(k, i) {
  let nom = 1;
  for (let j = 2; j <= k; ++j) {
    nom *= j;
  }
  let denom = 1;
  for (let j = 2; j <= i; ++j) {
    denom *= j;
  }
  for (let j = 2; j <= k - i; ++j) {
    denom *= j;
  }
  return nom / denom;
}
function calcRationalCurveDerivatives(Pders) {
  const nd = Pders.length;
  const Aders = [];
  const wders = [];
  for (let i = 0; i < nd; ++i) {
    const point = Pders[i];
    Aders[i] = new Vector3(point.x, point.y, point.z);
    wders[i] = point.w;
  }
  const CK = [];
  for (let k = 0; k < nd; ++k) {
    const v2 = Aders[k].clone();
    for (let i = 1; i <= k; ++i) {
      v2.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));
    }
    CK[k] = v2.divideScalar(wders[0]);
  }
  return CK;
}
function calcNURBSDerivatives(p2, U, P, u, nd) {
  const Pders = calcBSplineDerivatives(p2, U, P, u, nd);
  return calcRationalCurveDerivatives(Pders);
}
var init_NURBSUtils = __esm({
  "node_modules/three/examples/jsm/curves/NURBSUtils.js"() {
    init_three_module();
  }
});

// node_modules/three/examples/jsm/curves/NURBSCurve.js
var NURBSCurve;
var init_NURBSCurve = __esm({
  "node_modules/three/examples/jsm/curves/NURBSCurve.js"() {
    init_three_module();
    init_NURBSUtils();
    NURBSCurve = class extends Curve {
      constructor(degree, knots, controlPoints, startKnot, endKnot) {
        super();
        this.degree = degree;
        this.knots = knots;
        this.controlPoints = [];
        this.startKnot = startKnot || 0;
        this.endKnot = endKnot || this.knots.length - 1;
        for (let i = 0; i < controlPoints.length; ++i) {
          const point = controlPoints[i];
          this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);
        }
      }
      getPoint(t, optionalTarget = new Vector3()) {
        const point = optionalTarget;
        const u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]);
        const hpoint = calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);
        if (hpoint.w !== 1) {
          hpoint.divideScalar(hpoint.w);
        }
        return point.set(hpoint.x, hpoint.y, hpoint.z);
      }
      getTangent(t, optionalTarget = new Vector3()) {
        const tangent = optionalTarget;
        const u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);
        const ders = calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);
        tangent.copy(ders[1]).normalize();
        return tangent;
      }
    };
  }
});

// node_modules/three/examples/jsm/loaders/FBXLoader.js
function isFbxFormatBinary(buffer) {
  const CORRECT = "Kaydara FBX Binary  \0";
  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);
}
function isFbxFormatASCII(text) {
  const CORRECT = ["K", "a", "y", "d", "a", "r", "a", "\\", "F", "B", "X", "\\", "B", "i", "n", "a", "r", "y", "\\", "\\"];
  let cursor = 0;
  function read(offset) {
    const result = text[offset - 1];
    text = text.slice(cursor + offset);
    cursor++;
    return result;
  }
  for (let i = 0; i < CORRECT.length; ++i) {
    const num = read(1);
    if (num === CORRECT[i]) {
      return false;
    }
  }
  return true;
}
function getFbxVersion(text) {
  const versionRegExp = /FBXVersion: (\d+)/;
  const match = text.match(versionRegExp);
  if (match) {
    const version = parseInt(match[1]);
    return version;
  }
  throw new Error("THREE.FBXLoader: Cannot find the version number for the file given.");
}
function convertFBXTimeToSeconds(time) {
  return time / 46186158e3;
}
function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {
  let index;
  switch (infoObject.mappingType) {
    case "ByPolygonVertex":
      index = polygonVertexIndex;
      break;
    case "ByPolygon":
      index = polygonIndex;
      break;
    case "ByVertice":
      index = vertexIndex;
      break;
    case "AllSame":
      index = infoObject.indices[0];
      break;
    default:
      console.warn("THREE.FBXLoader: unknown attribute mapping type " + infoObject.mappingType);
  }
  if (infoObject.referenceType === "IndexToDirect") index = infoObject.indices[index];
  const from = index * infoObject.dataSize;
  const to = from + infoObject.dataSize;
  return slice(dataArray, infoObject.buffer, from, to);
}
function generateTransform(transformData) {
  const lTranslationM = new Matrix4();
  const lPreRotationM = new Matrix4();
  const lRotationM = new Matrix4();
  const lPostRotationM = new Matrix4();
  const lScalingM = new Matrix4();
  const lScalingPivotM = new Matrix4();
  const lScalingOffsetM = new Matrix4();
  const lRotationOffsetM = new Matrix4();
  const lRotationPivotM = new Matrix4();
  const lParentGX = new Matrix4();
  const lParentLX = new Matrix4();
  const lGlobalT = new Matrix4();
  const inheritType = transformData.inheritType ? transformData.inheritType : 0;
  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));
  if (transformData.preRotation) {
    const array = transformData.preRotation.map(MathUtils.degToRad);
    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);
    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
  }
  if (transformData.rotation) {
    const array = transformData.rotation.map(MathUtils.degToRad);
    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);
    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
  }
  if (transformData.postRotation) {
    const array = transformData.postRotation.map(MathUtils.degToRad);
    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);
    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));
    lPostRotationM.invert();
  }
  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));
  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));
  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));
  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));
  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));
  if (transformData.parentMatrixWorld) {
    lParentLX.copy(transformData.parentMatrix);
    lParentGX.copy(transformData.parentMatrixWorld);
  }
  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);
  const lParentGRM = new Matrix4();
  lParentGRM.extractRotation(lParentGX);
  const lParentTM = new Matrix4();
  lParentTM.copyPosition(lParentGX);
  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);
  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);
  const lLSM = lScalingM;
  const lGlobalRS = new Matrix4();
  if (inheritType === 0) {
    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);
  } else if (inheritType === 1) {
    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);
  } else {
    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));
    const lParentLSM_inv = lParentLSM.clone().invert();
    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);
    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);
  }
  const lRotationPivotM_inv = lRotationPivotM.clone().invert();
  const lScalingPivotM_inv = lScalingPivotM.clone().invert();
  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);
  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);
  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);
  lGlobalT.copyPosition(lGlobalTranslation);
  lTransform = lGlobalT.clone().multiply(lGlobalRS);
  lTransform.premultiply(lParentGX.invert());
  return lTransform;
}
function getEulerOrder(order) {
  order = order || 0;
  const enums = [
    "ZYX",
    // -> XYZ extrinsic
    "YZX",
    // -> XZY extrinsic
    "XZY",
    // -> YZX extrinsic
    "ZXY",
    // -> YXZ extrinsic
    "YXZ",
    // -> ZXY extrinsic
    "XYZ"
    // -> ZYX extrinsic
    //'SphericXYZ', // not possible to support
  ];
  if (order === 6) {
    console.warn("THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.");
    return enums[0];
  }
  return enums[order];
}
function parseNumberArray(value) {
  const array = value.split(",").map(function(val) {
    return parseFloat(val);
  });
  return array;
}
function convertArrayBufferToString(buffer, from, to) {
  if (from === void 0) from = 0;
  if (to === void 0) to = buffer.byteLength;
  return new TextDecoder().decode(new Uint8Array(buffer, from, to));
}
function append(a, b) {
  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {
    a[j] = b[i];
  }
}
function slice(a, b, from, to) {
  for (let i = from, j = 0; i < to; i++, j++) {
    a[j] = b[i];
  }
  return a;
}
var fbxTree, connections, sceneGraph, FBXLoader, FBXTreeParser, GeometryParser, AnimationParser, TextParser, BinaryParser, BinaryReader, FBXTree, dataArray, tempEuler, tempVec;
var init_FBXLoader = __esm({
  "node_modules/three/examples/jsm/loaders/FBXLoader.js"() {
    init_three_module();
    init_fflate_module();
    init_NURBSCurve();
    FBXLoader = class extends Loader {
      constructor(manager) {
        super(manager);
      }
      load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = scope.path === "" ? LoaderUtils.extractUrlBase(url) : scope.path;
        const loader = new FileLoader(this.manager);
        loader.setPath(scope.path);
        loader.setResponseType("arraybuffer");
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(buffer) {
          try {
            onLoad(scope.parse(buffer, path));
          } catch (e) {
            if (onError) {
              onError(e);
            } else {
              console.error(e);
            }
            scope.manager.itemError(url);
          }
        }, onProgress, onError);
      }
      parse(FBXBuffer, path) {
        if (isFbxFormatBinary(FBXBuffer)) {
          fbxTree = new BinaryParser().parse(FBXBuffer);
        } else {
          const FBXText = convertArrayBufferToString(FBXBuffer);
          if (!isFbxFormatASCII(FBXText)) {
            throw new Error("THREE.FBXLoader: Unknown format.");
          }
          if (getFbxVersion(FBXText) < 7e3) {
            throw new Error("THREE.FBXLoader: FBX version not supported, FileVersion: " + getFbxVersion(FBXText));
          }
          fbxTree = new TextParser().parse(FBXText);
        }
        const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);
        return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);
      }
    };
    FBXTreeParser = class {
      constructor(textureLoader, manager) {
        this.textureLoader = textureLoader;
        this.manager = manager;
      }
      parse() {
        connections = this.parseConnections();
        const images = this.parseImages();
        const textures = this.parseTextures(images);
        const materials = this.parseMaterials(textures);
        const deformers = this.parseDeformers();
        const geometryMap = new GeometryParser().parse(deformers);
        this.parseScene(deformers, geometryMap, materials);
        return sceneGraph;
      }
      // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )
      // and details the connection type
      parseConnections() {
        const connectionMap = /* @__PURE__ */ new Map();
        if ("Connections" in fbxTree) {
          const rawConnections = fbxTree.Connections.connections;
          rawConnections.forEach(function(rawConnection) {
            const fromID = rawConnection[0];
            const toID = rawConnection[1];
            const relationship = rawConnection[2];
            if (!connectionMap.has(fromID)) {
              connectionMap.set(fromID, {
                parents: [],
                children: []
              });
            }
            const parentRelationship = { ID: toID, relationship };
            connectionMap.get(fromID).parents.push(parentRelationship);
            if (!connectionMap.has(toID)) {
              connectionMap.set(toID, {
                parents: [],
                children: []
              });
            }
            const childRelationship = { ID: fromID, relationship };
            connectionMap.get(toID).children.push(childRelationship);
          });
        }
        return connectionMap;
      }
      // Parse FBXTree.Objects.Video for embedded image data
      // These images are connected to textures in FBXTree.Objects.Textures
      // via FBXTree.Connections.
      parseImages() {
        const images = {};
        const blobs = {};
        if ("Video" in fbxTree.Objects) {
          const videoNodes = fbxTree.Objects.Video;
          for (const nodeID in videoNodes) {
            const videoNode = videoNodes[nodeID];
            const id = parseInt(nodeID);
            images[id] = videoNode.RelativeFilename || videoNode.Filename;
            if ("Content" in videoNode) {
              const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;
              const base64Content = typeof videoNode.Content === "string" && videoNode.Content !== "";
              if (arrayBufferContent || base64Content) {
                const image = this.parseImage(videoNodes[nodeID]);
                blobs[videoNode.RelativeFilename || videoNode.Filename] = image;
              }
            }
          }
        }
        for (const id in images) {
          const filename = images[id];
          if (blobs[filename] !== void 0) images[id] = blobs[filename];
          else images[id] = images[id].split("\\").pop();
        }
        return images;
      }
      // Parse embedded image data in FBXTree.Video.Content
      parseImage(videoNode) {
        const content = videoNode.Content;
        const fileName = videoNode.RelativeFilename || videoNode.Filename;
        const extension = fileName.slice(fileName.lastIndexOf(".") + 1).toLowerCase();
        let type;
        switch (extension) {
          case "bmp":
            type = "image/bmp";
            break;
          case "jpg":
          case "jpeg":
            type = "image/jpeg";
            break;
          case "png":
            type = "image/png";
            break;
          case "tif":
            type = "image/tiff";
            break;
          case "tga":
            if (this.manager.getHandler(".tga") === null) {
              console.warn("FBXLoader: TGA loader not found, skipping ", fileName);
            }
            type = "image/tga";
            break;
          default:
            console.warn('FBXLoader: Image type "' + extension + '" is not supported.');
            return;
        }
        if (typeof content === "string") {
          return "data:" + type + ";base64," + content;
        } else {
          const array = new Uint8Array(content);
          return window.URL.createObjectURL(new Blob([array], { type }));
        }
      }
      // Parse nodes in FBXTree.Objects.Texture
      // These contain details such as UV scaling, cropping, rotation etc and are connected
      // to images in FBXTree.Objects.Video
      parseTextures(images) {
        const textureMap = /* @__PURE__ */ new Map();
        if ("Texture" in fbxTree.Objects) {
          const textureNodes = fbxTree.Objects.Texture;
          for (const nodeID in textureNodes) {
            const texture = this.parseTexture(textureNodes[nodeID], images);
            textureMap.set(parseInt(nodeID), texture);
          }
        }
        return textureMap;
      }
      // Parse individual node in FBXTree.Objects.Texture
      parseTexture(textureNode, images) {
        const texture = this.loadTexture(textureNode, images);
        texture.ID = textureNode.id;
        texture.name = textureNode.attrName;
        const wrapModeU = textureNode.WrapModeU;
        const wrapModeV = textureNode.WrapModeV;
        const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;
        const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;
        texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;
        texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;
        if ("Scaling" in textureNode) {
          const values = textureNode.Scaling.value;
          texture.repeat.x = values[0];
          texture.repeat.y = values[1];
        }
        if ("Translation" in textureNode) {
          const values = textureNode.Translation.value;
          texture.offset.x = values[0];
          texture.offset.y = values[1];
        }
        return texture;
      }
      // load a texture specified as a blob or data URI, or via an external URL using TextureLoader
      loadTexture(textureNode, images) {
        let fileName;
        const currentPath = this.textureLoader.path;
        const children = connections.get(textureNode.id).children;
        if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {
          fileName = images[children[0].ID];
          if (fileName.indexOf("blob:") === 0 || fileName.indexOf("data:") === 0) {
            this.textureLoader.setPath(void 0);
          }
        }
        let texture;
        const extension = textureNode.FileName.slice(-3).toLowerCase();
        if (extension === "tga") {
          const loader = this.manager.getHandler(".tga");
          if (loader === null) {
            console.warn("FBXLoader: TGA loader not found, creating placeholder texture for", textureNode.RelativeFilename);
            texture = new Texture();
          } else {
            loader.setPath(this.textureLoader.path);
            texture = loader.load(fileName);
          }
        } else if (extension === "dds") {
          const loader = this.manager.getHandler(".dds");
          if (loader === null) {
            console.warn("FBXLoader: DDS loader not found, creating placeholder texture for", textureNode.RelativeFilename);
            texture = new Texture();
          } else {
            loader.setPath(this.textureLoader.path);
            texture = loader.load(fileName);
          }
        } else if (extension === "psd") {
          console.warn("FBXLoader: PSD textures are not supported, creating placeholder texture for", textureNode.RelativeFilename);
          texture = new Texture();
        } else {
          texture = this.textureLoader.load(fileName);
        }
        this.textureLoader.setPath(currentPath);
        return texture;
      }
      // Parse nodes in FBXTree.Objects.Material
      parseMaterials(textureMap) {
        const materialMap = /* @__PURE__ */ new Map();
        if ("Material" in fbxTree.Objects) {
          const materialNodes = fbxTree.Objects.Material;
          for (const nodeID in materialNodes) {
            const material = this.parseMaterial(materialNodes[nodeID], textureMap);
            if (material !== null) materialMap.set(parseInt(nodeID), material);
          }
        }
        return materialMap;
      }
      // Parse single node in FBXTree.Objects.Material
      // Materials are connected to texture maps in FBXTree.Objects.Textures
      // FBX format currently only supports Lambert and Phong shading models
      parseMaterial(materialNode, textureMap) {
        const ID = materialNode.id;
        const name = materialNode.attrName;
        let type = materialNode.ShadingModel;
        if (typeof type === "object") {
          type = type.value;
        }
        if (!connections.has(ID)) return null;
        const parameters = this.parseParameters(materialNode, textureMap, ID);
        let material;
        switch (type.toLowerCase()) {
          case "phong":
            material = new MeshPhongMaterial();
            break;
          case "lambert":
            material = new MeshLambertMaterial();
            break;
          default:
            console.warn('THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type);
            material = new MeshPhongMaterial();
            break;
        }
        material.setValues(parameters);
        material.name = name;
        return material;
      }
      // Parse FBX material and return parameters suitable for a three.js material
      // Also parse the texture map and return any textures associated with the material
      parseParameters(materialNode, textureMap, ID) {
        const parameters = {};
        if (materialNode.BumpFactor) {
          parameters.bumpScale = materialNode.BumpFactor.value;
        }
        if (materialNode.Diffuse) {
          parameters.color = new Color().fromArray(materialNode.Diffuse.value).convertSRGBToLinear();
        } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === "Color" || materialNode.DiffuseColor.type === "ColorRGB")) {
          parameters.color = new Color().fromArray(materialNode.DiffuseColor.value).convertSRGBToLinear();
        }
        if (materialNode.DisplacementFactor) {
          parameters.displacementScale = materialNode.DisplacementFactor.value;
        }
        if (materialNode.Emissive) {
          parameters.emissive = new Color().fromArray(materialNode.Emissive.value).convertSRGBToLinear();
        } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === "Color" || materialNode.EmissiveColor.type === "ColorRGB")) {
          parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value).convertSRGBToLinear();
        }
        if (materialNode.EmissiveFactor) {
          parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);
        }
        if (materialNode.Opacity) {
          parameters.opacity = parseFloat(materialNode.Opacity.value);
        }
        if (parameters.opacity < 1) {
          parameters.transparent = true;
        }
        if (materialNode.ReflectionFactor) {
          parameters.reflectivity = materialNode.ReflectionFactor.value;
        }
        if (materialNode.Shininess) {
          parameters.shininess = materialNode.Shininess.value;
        }
        if (materialNode.Specular) {
          parameters.specular = new Color().fromArray(materialNode.Specular.value).convertSRGBToLinear();
        } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === "Color") {
          parameters.specular = new Color().fromArray(materialNode.SpecularColor.value).convertSRGBToLinear();
        }
        const scope = this;
        connections.get(ID).children.forEach(function(child) {
          const type = child.relationship;
          switch (type) {
            case "Bump":
              parameters.bumpMap = scope.getTexture(textureMap, child.ID);
              break;
            case "Maya|TEX_ao_map":
              parameters.aoMap = scope.getTexture(textureMap, child.ID);
              break;
            case "DiffuseColor":
            case "Maya|TEX_color_map":
              parameters.map = scope.getTexture(textureMap, child.ID);
              if (parameters.map !== void 0) {
                parameters.map.colorSpace = SRGBColorSpace;
              }
              break;
            case "DisplacementColor":
              parameters.displacementMap = scope.getTexture(textureMap, child.ID);
              break;
            case "EmissiveColor":
              parameters.emissiveMap = scope.getTexture(textureMap, child.ID);
              if (parameters.emissiveMap !== void 0) {
                parameters.emissiveMap.colorSpace = SRGBColorSpace;
              }
              break;
            case "NormalMap":
            case "Maya|TEX_normal_map":
              parameters.normalMap = scope.getTexture(textureMap, child.ID);
              break;
            case "ReflectionColor":
              parameters.envMap = scope.getTexture(textureMap, child.ID);
              if (parameters.envMap !== void 0) {
                parameters.envMap.mapping = EquirectangularReflectionMapping;
                parameters.envMap.colorSpace = SRGBColorSpace;
              }
              break;
            case "SpecularColor":
              parameters.specularMap = scope.getTexture(textureMap, child.ID);
              if (parameters.specularMap !== void 0) {
                parameters.specularMap.colorSpace = SRGBColorSpace;
              }
              break;
            case "TransparentColor":
            case "TransparencyFactor":
              parameters.alphaMap = scope.getTexture(textureMap, child.ID);
              parameters.transparent = true;
              break;
            case "AmbientColor":
            case "ShininessExponent":
            case "SpecularFactor":
            case "VectorDisplacementColor":
            default:
              console.warn("THREE.FBXLoader: %s map is not supported in three.js, skipping texture.", type);
              break;
          }
        });
        return parameters;
      }
      // get a texture from the textureMap for use by a material.
      getTexture(textureMap, id) {
        if ("LayeredTexture" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {
          console.warn("THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.");
          id = connections.get(id).children[0].ID;
        }
        return textureMap.get(id);
      }
      // Parse nodes in FBXTree.Objects.Deformer
      // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here
      // Generates map of Skeleton-like objects for use later when generating and binding skeletons.
      parseDeformers() {
        const skeletons = {};
        const morphTargets = {};
        if ("Deformer" in fbxTree.Objects) {
          const DeformerNodes = fbxTree.Objects.Deformer;
          for (const nodeID in DeformerNodes) {
            const deformerNode = DeformerNodes[nodeID];
            const relationships = connections.get(parseInt(nodeID));
            if (deformerNode.attrType === "Skin") {
              const skeleton = this.parseSkeleton(relationships, DeformerNodes);
              skeleton.ID = nodeID;
              if (relationships.parents.length > 1) console.warn("THREE.FBXLoader: skeleton attached to more than one geometry is not supported.");
              skeleton.geometryID = relationships.parents[0].ID;
              skeletons[nodeID] = skeleton;
            } else if (deformerNode.attrType === "BlendShape") {
              const morphTarget = {
                id: nodeID
              };
              morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);
              morphTarget.id = nodeID;
              if (relationships.parents.length > 1) console.warn("THREE.FBXLoader: morph target attached to more than one geometry is not supported.");
              morphTargets[nodeID] = morphTarget;
            }
          }
        }
        return {
          skeletons,
          morphTargets
        };
      }
      // Parse single nodes in FBXTree.Objects.Deformer
      // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'
      // Each skin node represents a skeleton and each cluster node represents a bone
      parseSkeleton(relationships, deformerNodes) {
        const rawBones = [];
        relationships.children.forEach(function(child) {
          const boneNode = deformerNodes[child.ID];
          if (boneNode.attrType !== "Cluster") return;
          const rawBone = {
            ID: child.ID,
            indices: [],
            weights: [],
            transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)
            // transform: new Matrix4().fromArray( boneNode.Transform.a ),
            // linkMode: boneNode.Mode,
          };
          if ("Indexes" in boneNode) {
            rawBone.indices = boneNode.Indexes.a;
            rawBone.weights = boneNode.Weights.a;
          }
          rawBones.push(rawBone);
        });
        return {
          rawBones,
          bones: []
        };
      }
      // The top level morph deformer node has type "BlendShape" and sub nodes have type "BlendShapeChannel"
      parseMorphTargets(relationships, deformerNodes) {
        const rawMorphTargets = [];
        for (let i = 0; i < relationships.children.length; i++) {
          const child = relationships.children[i];
          const morphTargetNode = deformerNodes[child.ID];
          const rawMorphTarget = {
            name: morphTargetNode.attrName,
            initialWeight: morphTargetNode.DeformPercent,
            id: morphTargetNode.id,
            fullWeights: morphTargetNode.FullWeights.a
          };
          if (morphTargetNode.attrType !== "BlendShapeChannel") return;
          rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function(child2) {
            return child2.relationship === void 0;
          })[0].ID;
          rawMorphTargets.push(rawMorphTarget);
        }
        return rawMorphTargets;
      }
      // create the main Group() to be returned by the loader
      parseScene(deformers, geometryMap, materialMap) {
        sceneGraph = new Group();
        const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);
        const modelNodes = fbxTree.Objects.Model;
        const scope = this;
        modelMap.forEach(function(model) {
          const modelNode = modelNodes[model.ID];
          scope.setLookAtProperties(model, modelNode);
          const parentConnections = connections.get(model.ID).parents;
          parentConnections.forEach(function(connection) {
            const parent = modelMap.get(connection.ID);
            if (parent !== void 0) parent.add(model);
          });
          if (model.parent === null) {
            sceneGraph.add(model);
          }
        });
        this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);
        this.addGlobalSceneSettings();
        sceneGraph.traverse(function(node) {
          if (node.userData.transformData) {
            if (node.parent) {
              node.userData.transformData.parentMatrix = node.parent.matrix;
              node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;
            }
            const transform = generateTransform(node.userData.transformData);
            node.applyMatrix4(transform);
            node.updateWorldMatrix();
          }
        });
        const animations = new AnimationParser().parse();
        if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {
          sceneGraph.children[0].animations = animations;
          sceneGraph = sceneGraph.children[0];
        }
        sceneGraph.animations = animations;
      }
      // parse nodes in FBXTree.Objects.Model
      parseModels(skeletons, geometryMap, materialMap) {
        const modelMap = /* @__PURE__ */ new Map();
        const modelNodes = fbxTree.Objects.Model;
        for (const nodeID in modelNodes) {
          const id = parseInt(nodeID);
          const node = modelNodes[nodeID];
          const relationships = connections.get(id);
          let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);
          if (!model) {
            switch (node.attrType) {
              case "Camera":
                model = this.createCamera(relationships);
                break;
              case "Light":
                model = this.createLight(relationships);
                break;
              case "Mesh":
                model = this.createMesh(relationships, geometryMap, materialMap);
                break;
              case "NurbsCurve":
                model = this.createCurve(relationships, geometryMap);
                break;
              case "LimbNode":
              case "Root":
                model = new Bone();
                break;
              case "Null":
              default:
                model = new Group();
                break;
            }
            model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : "";
            model.userData.originalName = node.attrName;
            model.ID = id;
          }
          this.getTransformData(model, node);
          modelMap.set(id, model);
        }
        return modelMap;
      }
      buildSkeleton(relationships, skeletons, id, name) {
        let bone = null;
        relationships.parents.forEach(function(parent) {
          for (const ID in skeletons) {
            const skeleton = skeletons[ID];
            skeleton.rawBones.forEach(function(rawBone, i) {
              if (rawBone.ID === parent.ID) {
                const subBone = bone;
                bone = new Bone();
                bone.matrixWorld.copy(rawBone.transformLink);
                bone.name = name ? PropertyBinding.sanitizeNodeName(name) : "";
                bone.userData.originalName = name;
                bone.ID = id;
                skeleton.bones[i] = bone;
                if (subBone !== null) {
                  bone.add(subBone);
                }
              }
            });
          }
        });
        return bone;
      }
      // create a PerspectiveCamera or OrthographicCamera
      createCamera(relationships) {
        let model;
        let cameraAttribute;
        relationships.children.forEach(function(child) {
          const attr = fbxTree.Objects.NodeAttribute[child.ID];
          if (attr !== void 0) {
            cameraAttribute = attr;
          }
        });
        if (cameraAttribute === void 0) {
          model = new Object3D();
        } else {
          let type = 0;
          if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {
            type = 1;
          }
          let nearClippingPlane = 1;
          if (cameraAttribute.NearPlane !== void 0) {
            nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;
          }
          let farClippingPlane = 1e3;
          if (cameraAttribute.FarPlane !== void 0) {
            farClippingPlane = cameraAttribute.FarPlane.value / 1e3;
          }
          let width = window.innerWidth;
          let height = window.innerHeight;
          if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {
            width = cameraAttribute.AspectWidth.value;
            height = cameraAttribute.AspectHeight.value;
          }
          const aspect = width / height;
          let fov = 45;
          if (cameraAttribute.FieldOfView !== void 0) {
            fov = cameraAttribute.FieldOfView.value;
          }
          const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;
          switch (type) {
            case 0:
              model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);
              if (focalLength !== null) model.setFocalLength(focalLength);
              break;
            case 1:
              model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);
              break;
            default:
              console.warn("THREE.FBXLoader: Unknown camera type " + type + ".");
              model = new Object3D();
              break;
          }
        }
        return model;
      }
      // Create a DirectionalLight, PointLight or SpotLight
      createLight(relationships) {
        let model;
        let lightAttribute;
        relationships.children.forEach(function(child) {
          const attr = fbxTree.Objects.NodeAttribute[child.ID];
          if (attr !== void 0) {
            lightAttribute = attr;
          }
        });
        if (lightAttribute === void 0) {
          model = new Object3D();
        } else {
          let type;
          if (lightAttribute.LightType === void 0) {
            type = 0;
          } else {
            type = lightAttribute.LightType.value;
          }
          let color = 16777215;
          if (lightAttribute.Color !== void 0) {
            color = new Color().fromArray(lightAttribute.Color.value).convertSRGBToLinear();
          }
          let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;
          if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {
            intensity = 0;
          }
          let distance2 = 0;
          if (lightAttribute.FarAttenuationEnd !== void 0) {
            if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {
              distance2 = 0;
            } else {
              distance2 = lightAttribute.FarAttenuationEnd.value;
            }
          }
          const decay = 1;
          switch (type) {
            case 0:
              model = new PointLight(color, intensity, distance2, decay);
              break;
            case 1:
              model = new DirectionalLight(color, intensity);
              break;
            case 2:
              let angle2 = Math.PI / 3;
              if (lightAttribute.InnerAngle !== void 0) {
                angle2 = MathUtils.degToRad(lightAttribute.InnerAngle.value);
              }
              let penumbra = 0;
              if (lightAttribute.OuterAngle !== void 0) {
                penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);
                penumbra = Math.max(penumbra, 1);
              }
              model = new SpotLight(color, intensity, distance2, angle2, penumbra, decay);
              break;
            default:
              console.warn("THREE.FBXLoader: Unknown light type " + lightAttribute.LightType.value + ", defaulting to a PointLight.");
              model = new PointLight(color, intensity);
              break;
          }
          if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {
            model.castShadow = true;
          }
        }
        return model;
      }
      createMesh(relationships, geometryMap, materialMap) {
        let model;
        let geometry = null;
        let material = null;
        const materials = [];
        relationships.children.forEach(function(child) {
          if (geometryMap.has(child.ID)) {
            geometry = geometryMap.get(child.ID);
          }
          if (materialMap.has(child.ID)) {
            materials.push(materialMap.get(child.ID));
          }
        });
        if (materials.length > 1) {
          material = materials;
        } else if (materials.length > 0) {
          material = materials[0];
        } else {
          material = new MeshPhongMaterial({
            name: Loader.DEFAULT_MATERIAL_NAME,
            color: 13421772
          });
          materials.push(material);
        }
        if ("color" in geometry.attributes) {
          materials.forEach(function(material2) {
            material2.vertexColors = true;
          });
        }
        if (geometry.FBX_Deformer) {
          model = new SkinnedMesh(geometry, material);
          model.normalizeSkinWeights();
        } else {
          model = new Mesh(geometry, material);
        }
        return model;
      }
      createCurve(relationships, geometryMap) {
        const geometry = relationships.children.reduce(function(geo, child) {
          if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);
          return geo;
        }, null);
        const material = new LineBasicMaterial({
          name: Loader.DEFAULT_MATERIAL_NAME,
          color: 3342591,
          linewidth: 1
        });
        return new Line(geometry, material);
      }
      // parse the model node for transform data
      getTransformData(model, modelNode) {
        const transformData = {};
        if ("InheritType" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);
        if ("RotationOrder" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
        else transformData.eulerOrder = "ZYX";
        if ("Lcl_Translation" in modelNode) transformData.translation = modelNode.Lcl_Translation.value;
        if ("PreRotation" in modelNode) transformData.preRotation = modelNode.PreRotation.value;
        if ("Lcl_Rotation" in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;
        if ("PostRotation" in modelNode) transformData.postRotation = modelNode.PostRotation.value;
        if ("Lcl_Scaling" in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;
        if ("ScalingOffset" in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;
        if ("ScalingPivot" in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;
        if ("RotationOffset" in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;
        if ("RotationPivot" in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;
        model.userData.transformData = transformData;
      }
      setLookAtProperties(model, modelNode) {
        if ("LookAtProperty" in modelNode) {
          const children = connections.get(model.ID).children;
          children.forEach(function(child) {
            if (child.relationship === "LookAtProperty") {
              const lookAtTarget = fbxTree.Objects.Model[child.ID];
              if ("Lcl_Translation" in lookAtTarget) {
                const pos = lookAtTarget.Lcl_Translation.value;
                if (model.target !== void 0) {
                  model.target.position.fromArray(pos);
                  sceneGraph.add(model.target);
                } else {
                  model.lookAt(new Vector3().fromArray(pos));
                }
              }
            }
          });
        }
      }
      bindSkeleton(skeletons, geometryMap, modelMap) {
        const bindMatrices = this.parsePoseNodes();
        for (const ID in skeletons) {
          const skeleton = skeletons[ID];
          const parents = connections.get(parseInt(skeleton.ID)).parents;
          parents.forEach(function(parent) {
            if (geometryMap.has(parent.ID)) {
              const geoID = parent.ID;
              const geoRelationships = connections.get(geoID);
              geoRelationships.parents.forEach(function(geoConnParent) {
                if (modelMap.has(geoConnParent.ID)) {
                  const model = modelMap.get(geoConnParent.ID);
                  model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);
                }
              });
            }
          });
        }
      }
      parsePoseNodes() {
        const bindMatrices = {};
        if ("Pose" in fbxTree.Objects) {
          const BindPoseNode = fbxTree.Objects.Pose;
          for (const nodeID in BindPoseNode) {
            if (BindPoseNode[nodeID].attrType === "BindPose" && BindPoseNode[nodeID].NbPoseNodes > 0) {
              const poseNodes = BindPoseNode[nodeID].PoseNode;
              if (Array.isArray(poseNodes)) {
                poseNodes.forEach(function(poseNode) {
                  bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);
                });
              } else {
                bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);
              }
            }
          }
        }
        return bindMatrices;
      }
      addGlobalSceneSettings() {
        if ("GlobalSettings" in fbxTree) {
          if ("AmbientColor" in fbxTree.GlobalSettings) {
            const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;
            const r = ambientColor[0];
            const g2 = ambientColor[1];
            const b = ambientColor[2];
            if (r !== 0 || g2 !== 0 || b !== 0) {
              const color = new Color(r, g2, b).convertSRGBToLinear();
              sceneGraph.add(new AmbientLight(color, 1));
            }
          }
          if ("UnitScaleFactor" in fbxTree.GlobalSettings) {
            sceneGraph.userData.unitScaleFactor = fbxTree.GlobalSettings.UnitScaleFactor.value;
          }
        }
      }
    };
    GeometryParser = class {
      constructor() {
        this.negativeMaterialIndices = false;
      }
      // Parse nodes in FBXTree.Objects.Geometry
      parse(deformers) {
        const geometryMap = /* @__PURE__ */ new Map();
        if ("Geometry" in fbxTree.Objects) {
          const geoNodes = fbxTree.Objects.Geometry;
          for (const nodeID in geoNodes) {
            const relationships = connections.get(parseInt(nodeID));
            const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);
            geometryMap.set(parseInt(nodeID), geo);
          }
        }
        if (this.negativeMaterialIndices === true) {
          console.warn("THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.");
        }
        return geometryMap;
      }
      // Parse single node in FBXTree.Objects.Geometry
      parseGeometry(relationships, geoNode, deformers) {
        switch (geoNode.attrType) {
          case "Mesh":
            return this.parseMeshGeometry(relationships, geoNode, deformers);
            break;
          case "NurbsCurve":
            return this.parseNurbsGeometry(geoNode);
            break;
        }
      }
      // Parse single node mesh geometry in FBXTree.Objects.Geometry
      parseMeshGeometry(relationships, geoNode, deformers) {
        const skeletons = deformers.skeletons;
        const morphTargets = [];
        const modelNodes = relationships.parents.map(function(parent) {
          return fbxTree.Objects.Model[parent.ID];
        });
        if (modelNodes.length === 0) return;
        const skeleton = relationships.children.reduce(function(skeleton2, child) {
          if (skeletons[child.ID] !== void 0) skeleton2 = skeletons[child.ID];
          return skeleton2;
        }, null);
        relationships.children.forEach(function(child) {
          if (deformers.morphTargets[child.ID] !== void 0) {
            morphTargets.push(deformers.morphTargets[child.ID]);
          }
        });
        const modelNode = modelNodes[0];
        const transformData = {};
        if ("RotationOrder" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);
        if ("InheritType" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);
        if ("GeometricTranslation" in modelNode) transformData.translation = modelNode.GeometricTranslation.value;
        if ("GeometricRotation" in modelNode) transformData.rotation = modelNode.GeometricRotation.value;
        if ("GeometricScaling" in modelNode) transformData.scale = modelNode.GeometricScaling.value;
        const transform = generateTransform(transformData);
        return this.genGeometry(geoNode, skeleton, morphTargets, transform);
      }
      // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry
      genGeometry(geoNode, skeleton, morphTargets, preTransform) {
        const geo = new BufferGeometry();
        if (geoNode.attrName) geo.name = geoNode.attrName;
        const geoInfo = this.parseGeoNode(geoNode, skeleton);
        const buffers = this.genBuffers(geoInfo);
        const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);
        positionAttribute.applyMatrix4(preTransform);
        geo.setAttribute("position", positionAttribute);
        if (buffers.colors.length > 0) {
          geo.setAttribute("color", new Float32BufferAttribute(buffers.colors, 3));
        }
        if (skeleton) {
          geo.setAttribute("skinIndex", new Uint16BufferAttribute(buffers.weightsIndices, 4));
          geo.setAttribute("skinWeight", new Float32BufferAttribute(buffers.vertexWeights, 4));
          geo.FBX_Deformer = skeleton;
        }
        if (buffers.normal.length > 0) {
          const normalMatrix = new Matrix3().getNormalMatrix(preTransform);
          const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);
          normalAttribute.applyNormalMatrix(normalMatrix);
          geo.setAttribute("normal", normalAttribute);
        }
        buffers.uvs.forEach(function(uvBuffer, i) {
          const name = i === 0 ? "uv" : `uv${i}`;
          geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));
        });
        if (geoInfo.material && geoInfo.material.mappingType !== "AllSame") {
          let prevMaterialIndex = buffers.materialIndex[0];
          let startIndex = 0;
          buffers.materialIndex.forEach(function(currentIndex, i) {
            if (currentIndex !== prevMaterialIndex) {
              geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);
              prevMaterialIndex = currentIndex;
              startIndex = i;
            }
          });
          if (geo.groups.length > 0) {
            const lastGroup = geo.groups[geo.groups.length - 1];
            const lastIndex = lastGroup.start + lastGroup.count;
            if (lastIndex !== buffers.materialIndex.length) {
              geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);
            }
          }
          if (geo.groups.length === 0) {
            geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);
          }
        }
        this.addMorphTargets(geo, geoNode, morphTargets, preTransform);
        return geo;
      }
      parseGeoNode(geoNode, skeleton) {
        const geoInfo = {};
        geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];
        geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];
        if (geoNode.LayerElementColor) {
          geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);
        }
        if (geoNode.LayerElementMaterial) {
          geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);
        }
        if (geoNode.LayerElementNormal) {
          geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);
        }
        if (geoNode.LayerElementUV) {
          geoInfo.uv = [];
          let i = 0;
          while (geoNode.LayerElementUV[i]) {
            if (geoNode.LayerElementUV[i].UV) {
              geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));
            }
            i++;
          }
        }
        geoInfo.weightTable = {};
        if (skeleton !== null) {
          geoInfo.skeleton = skeleton;
          skeleton.rawBones.forEach(function(rawBone, i) {
            rawBone.indices.forEach(function(index, j) {
              if (geoInfo.weightTable[index] === void 0) geoInfo.weightTable[index] = [];
              geoInfo.weightTable[index].push({
                id: i,
                weight: rawBone.weights[j]
              });
            });
          });
        }
        return geoInfo;
      }
      genBuffers(geoInfo) {
        const buffers = {
          vertex: [],
          normal: [],
          colors: [],
          uvs: [],
          materialIndex: [],
          vertexWeights: [],
          weightsIndices: []
        };
        let polygonIndex = 0;
        let faceLength = 0;
        let displayedWeightsWarning = false;
        let facePositionIndexes = [];
        let faceNormals = [];
        let faceColors = [];
        let faceUVs = [];
        let faceWeights = [];
        let faceWeightIndices = [];
        const scope = this;
        geoInfo.vertexIndices.forEach(function(vertexIndex, polygonVertexIndex) {
          let materialIndex;
          let endOfFace = false;
          if (vertexIndex < 0) {
            vertexIndex = vertexIndex ^ -1;
            endOfFace = true;
          }
          let weightIndices = [];
          let weights = [];
          facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);
          if (geoInfo.color) {
            const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);
            faceColors.push(data[0], data[1], data[2]);
          }
          if (geoInfo.skeleton) {
            if (geoInfo.weightTable[vertexIndex] !== void 0) {
              geoInfo.weightTable[vertexIndex].forEach(function(wt) {
                weights.push(wt.weight);
                weightIndices.push(wt.id);
              });
            }
            if (weights.length > 4) {
              if (!displayedWeightsWarning) {
                console.warn("THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.");
                displayedWeightsWarning = true;
              }
              const wIndex = [0, 0, 0, 0];
              const Weight = [0, 0, 0, 0];
              weights.forEach(function(weight, weightIndex) {
                let currentWeight = weight;
                let currentIndex = weightIndices[weightIndex];
                Weight.forEach(function(comparedWeight, comparedWeightIndex, comparedWeightArray) {
                  if (currentWeight > comparedWeight) {
                    comparedWeightArray[comparedWeightIndex] = currentWeight;
                    currentWeight = comparedWeight;
                    const tmp2 = wIndex[comparedWeightIndex];
                    wIndex[comparedWeightIndex] = currentIndex;
                    currentIndex = tmp2;
                  }
                });
              });
              weightIndices = wIndex;
              weights = Weight;
            }
            while (weights.length < 4) {
              weights.push(0);
              weightIndices.push(0);
            }
            for (let i = 0; i < 4; ++i) {
              faceWeights.push(weights[i]);
              faceWeightIndices.push(weightIndices[i]);
            }
          }
          if (geoInfo.normal) {
            const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);
            faceNormals.push(data[0], data[1], data[2]);
          }
          if (geoInfo.material && geoInfo.material.mappingType !== "AllSame") {
            materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];
            if (materialIndex < 0) {
              scope.negativeMaterialIndices = true;
              materialIndex = 0;
            }
          }
          if (geoInfo.uv) {
            geoInfo.uv.forEach(function(uv, i) {
              const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);
              if (faceUVs[i] === void 0) {
                faceUVs[i] = [];
              }
              faceUVs[i].push(data[0]);
              faceUVs[i].push(data[1]);
            });
          }
          faceLength++;
          if (endOfFace) {
            scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);
            polygonIndex++;
            faceLength = 0;
            facePositionIndexes = [];
            faceNormals = [];
            faceColors = [];
            faceUVs = [];
            faceWeights = [];
            faceWeightIndices = [];
          }
        });
        return buffers;
      }
      // See https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal
      getNormalNewell(vertices) {
        const normal = new Vector3(0, 0, 0);
        for (let i = 0; i < vertices.length; i++) {
          const current = vertices[i];
          const next = vertices[(i + 1) % vertices.length];
          normal.x += (current.y - next.y) * (current.z + next.z);
          normal.y += (current.z - next.z) * (current.x + next.x);
          normal.z += (current.x - next.x) * (current.y + next.y);
        }
        normal.normalize();
        return normal;
      }
      getNormalTangentAndBitangent(vertices) {
        const normalVector = this.getNormalNewell(vertices);
        const up = Math.abs(normalVector.z) > 0.5 ? new Vector3(0, 1, 0) : new Vector3(0, 0, 1);
        const tangent = up.cross(normalVector).normalize();
        const bitangent = normalVector.clone().cross(tangent).normalize();
        return {
          normal: normalVector,
          tangent,
          bitangent
        };
      }
      flattenVertex(vertex, normalTangent, normalBitangent) {
        return new Vector2(
          vertex.dot(normalTangent),
          vertex.dot(normalBitangent)
        );
      }
      // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris
      genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {
        let triangles;
        if (faceLength > 3) {
          const vertices = [];
          for (let i = 0; i < facePositionIndexes.length; i += 3) {
            vertices.push(new Vector3(
              geoInfo.vertexPositions[facePositionIndexes[i]],
              geoInfo.vertexPositions[facePositionIndexes[i + 1]],
              geoInfo.vertexPositions[facePositionIndexes[i + 2]]
            ));
          }
          const { tangent, bitangent } = this.getNormalTangentAndBitangent(vertices);
          const triangulationInput = [];
          for (const vertex of vertices) {
            triangulationInput.push(this.flattenVertex(vertex, tangent, bitangent));
          }
          triangles = ShapeUtils.triangulateShape(triangulationInput, []);
        } else {
          triangles = [[0, 1, 2]];
        }
        for (const [i0, i1, i2] of triangles) {
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i0 * 3]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i0 * 3 + 1]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i0 * 3 + 2]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i1 * 3]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i1 * 3 + 1]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i1 * 3 + 2]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i2 * 3]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i2 * 3 + 1]]);
          buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i2 * 3 + 2]]);
          if (geoInfo.skeleton) {
            buffers.vertexWeights.push(faceWeights[i0 * 4]);
            buffers.vertexWeights.push(faceWeights[i0 * 4 + 1]);
            buffers.vertexWeights.push(faceWeights[i0 * 4 + 2]);
            buffers.vertexWeights.push(faceWeights[i0 * 4 + 3]);
            buffers.vertexWeights.push(faceWeights[i1 * 4]);
            buffers.vertexWeights.push(faceWeights[i1 * 4 + 1]);
            buffers.vertexWeights.push(faceWeights[i1 * 4 + 2]);
            buffers.vertexWeights.push(faceWeights[i1 * 4 + 3]);
            buffers.vertexWeights.push(faceWeights[i2 * 4]);
            buffers.vertexWeights.push(faceWeights[i2 * 4 + 1]);
            buffers.vertexWeights.push(faceWeights[i2 * 4 + 2]);
            buffers.vertexWeights.push(faceWeights[i2 * 4 + 3]);
            buffers.weightsIndices.push(faceWeightIndices[i0 * 4]);
            buffers.weightsIndices.push(faceWeightIndices[i0 * 4 + 1]);
            buffers.weightsIndices.push(faceWeightIndices[i0 * 4 + 2]);
            buffers.weightsIndices.push(faceWeightIndices[i0 * 4 + 3]);
            buffers.weightsIndices.push(faceWeightIndices[i1 * 4]);
            buffers.weightsIndices.push(faceWeightIndices[i1 * 4 + 1]);
            buffers.weightsIndices.push(faceWeightIndices[i1 * 4 + 2]);
            buffers.weightsIndices.push(faceWeightIndices[i1 * 4 + 3]);
            buffers.weightsIndices.push(faceWeightIndices[i2 * 4]);
            buffers.weightsIndices.push(faceWeightIndices[i2 * 4 + 1]);
            buffers.weightsIndices.push(faceWeightIndices[i2 * 4 + 2]);
            buffers.weightsIndices.push(faceWeightIndices[i2 * 4 + 3]);
          }
          if (geoInfo.color) {
            buffers.colors.push(faceColors[i0 * 3]);
            buffers.colors.push(faceColors[i0 * 3 + 1]);
            buffers.colors.push(faceColors[i0 * 3 + 2]);
            buffers.colors.push(faceColors[i1 * 3]);
            buffers.colors.push(faceColors[i1 * 3 + 1]);
            buffers.colors.push(faceColors[i1 * 3 + 2]);
            buffers.colors.push(faceColors[i2 * 3]);
            buffers.colors.push(faceColors[i2 * 3 + 1]);
            buffers.colors.push(faceColors[i2 * 3 + 2]);
          }
          if (geoInfo.material && geoInfo.material.mappingType !== "AllSame") {
            buffers.materialIndex.push(materialIndex);
            buffers.materialIndex.push(materialIndex);
            buffers.materialIndex.push(materialIndex);
          }
          if (geoInfo.normal) {
            buffers.normal.push(faceNormals[i0 * 3]);
            buffers.normal.push(faceNormals[i0 * 3 + 1]);
            buffers.normal.push(faceNormals[i0 * 3 + 2]);
            buffers.normal.push(faceNormals[i1 * 3]);
            buffers.normal.push(faceNormals[i1 * 3 + 1]);
            buffers.normal.push(faceNormals[i1 * 3 + 2]);
            buffers.normal.push(faceNormals[i2 * 3]);
            buffers.normal.push(faceNormals[i2 * 3 + 1]);
            buffers.normal.push(faceNormals[i2 * 3 + 2]);
          }
          if (geoInfo.uv) {
            geoInfo.uv.forEach(function(uv, j) {
              if (buffers.uvs[j] === void 0) buffers.uvs[j] = [];
              buffers.uvs[j].push(faceUVs[j][i0 * 2]);
              buffers.uvs[j].push(faceUVs[j][i0 * 2 + 1]);
              buffers.uvs[j].push(faceUVs[j][i1 * 2]);
              buffers.uvs[j].push(faceUVs[j][i1 * 2 + 1]);
              buffers.uvs[j].push(faceUVs[j][i2 * 2]);
              buffers.uvs[j].push(faceUVs[j][i2 * 2 + 1]);
            });
          }
        }
      }
      addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {
        if (morphTargets.length === 0) return;
        parentGeo.morphTargetsRelative = true;
        parentGeo.morphAttributes.position = [];
        const scope = this;
        morphTargets.forEach(function(morphTarget) {
          morphTarget.rawTargets.forEach(function(rawTarget) {
            const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];
            if (morphGeoNode !== void 0) {
              scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);
            }
          });
        });
      }
      // a morph geometry node is similar to a standard  node, and the node is also contained
      // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal
      // and a special attribute Index defining which vertices of the original geometry are affected
      // Normal and position attributes only have data for the vertices that are affected by the morph
      genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {
        const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];
        const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];
        const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];
        const length = parentGeo.attributes.position.count * 3;
        const morphPositions = new Float32Array(length);
        for (let i = 0; i < indices.length; i++) {
          const morphIndex = indices[i] * 3;
          morphPositions[morphIndex] = morphPositionsSparse[i * 3];
          morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];
          morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];
        }
        const morphGeoInfo = {
          vertexIndices,
          vertexPositions: morphPositions
        };
        const morphBuffers = this.genBuffers(morphGeoInfo);
        const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);
        positionAttribute.name = name || morphGeoNode.attrName;
        positionAttribute.applyMatrix4(preTransform);
        parentGeo.morphAttributes.position.push(positionAttribute);
      }
      // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists
      parseNormals(NormalNode) {
        const mappingType = NormalNode.MappingInformationType;
        const referenceType = NormalNode.ReferenceInformationType;
        const buffer = NormalNode.Normals.a;
        let indexBuffer = [];
        if (referenceType === "IndexToDirect") {
          if ("NormalIndex" in NormalNode) {
            indexBuffer = NormalNode.NormalIndex.a;
          } else if ("NormalsIndex" in NormalNode) {
            indexBuffer = NormalNode.NormalsIndex.a;
          }
        }
        return {
          dataSize: 3,
          buffer,
          indices: indexBuffer,
          mappingType,
          referenceType
        };
      }
      // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists
      parseUVs(UVNode) {
        const mappingType = UVNode.MappingInformationType;
        const referenceType = UVNode.ReferenceInformationType;
        const buffer = UVNode.UV.a;
        let indexBuffer = [];
        if (referenceType === "IndexToDirect") {
          indexBuffer = UVNode.UVIndex.a;
        }
        return {
          dataSize: 2,
          buffer,
          indices: indexBuffer,
          mappingType,
          referenceType
        };
      }
      // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists
      parseVertexColors(ColorNode) {
        const mappingType = ColorNode.MappingInformationType;
        const referenceType = ColorNode.ReferenceInformationType;
        const buffer = ColorNode.Colors.a;
        let indexBuffer = [];
        if (referenceType === "IndexToDirect") {
          indexBuffer = ColorNode.ColorIndex.a;
        }
        for (let i = 0, c = new Color(); i < buffer.length; i += 4) {
          c.fromArray(buffer, i).convertSRGBToLinear().toArray(buffer, i);
        }
        return {
          dataSize: 4,
          buffer,
          indices: indexBuffer,
          mappingType,
          referenceType
        };
      }
      // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists
      parseMaterialIndices(MaterialNode) {
        const mappingType = MaterialNode.MappingInformationType;
        const referenceType = MaterialNode.ReferenceInformationType;
        if (mappingType === "NoMappingInformation") {
          return {
            dataSize: 1,
            buffer: [0],
            indices: [0],
            mappingType: "AllSame",
            referenceType
          };
        }
        const materialIndexBuffer = MaterialNode.Materials.a;
        const materialIndices = [];
        for (let i = 0; i < materialIndexBuffer.length; ++i) {
          materialIndices.push(i);
        }
        return {
          dataSize: 1,
          buffer: materialIndexBuffer,
          indices: materialIndices,
          mappingType,
          referenceType
        };
      }
      // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry
      parseNurbsGeometry(geoNode) {
        const order = parseInt(geoNode.Order);
        if (isNaN(order)) {
          console.error("THREE.FBXLoader: Invalid Order %s given for geometry ID: %s", geoNode.Order, geoNode.id);
          return new BufferGeometry();
        }
        const degree = order - 1;
        const knots = geoNode.KnotVector.a;
        const controlPoints = [];
        const pointsValues = geoNode.Points.a;
        for (let i = 0, l = pointsValues.length; i < l; i += 4) {
          controlPoints.push(new Vector4().fromArray(pointsValues, i));
        }
        let startKnot, endKnot;
        if (geoNode.Form === "Closed") {
          controlPoints.push(controlPoints[0]);
        } else if (geoNode.Form === "Periodic") {
          startKnot = degree;
          endKnot = knots.length - 1 - startKnot;
          for (let i = 0; i < degree; ++i) {
            controlPoints.push(controlPoints[i]);
          }
        }
        const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);
        const points = curve.getPoints(controlPoints.length * 12);
        return new BufferGeometry().setFromPoints(points);
      }
    };
    AnimationParser = class {
      // take raw animation clips and turn them into three.js animation clips
      parse() {
        const animationClips = [];
        const rawClips = this.parseClips();
        if (rawClips !== void 0) {
          for (const key in rawClips) {
            const rawClip = rawClips[key];
            const clip = this.addClip(rawClip);
            animationClips.push(clip);
          }
        }
        return animationClips;
      }
      parseClips() {
        if (fbxTree.Objects.AnimationCurve === void 0) return void 0;
        const curveNodesMap = this.parseAnimationCurveNodes();
        this.parseAnimationCurves(curveNodesMap);
        const layersMap = this.parseAnimationLayers(curveNodesMap);
        const rawClips = this.parseAnimStacks(layersMap);
        return rawClips;
      }
      // parse nodes in FBXTree.Objects.AnimationCurveNode
      // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )
      // and is referenced by an AnimationLayer
      parseAnimationCurveNodes() {
        const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;
        const curveNodesMap = /* @__PURE__ */ new Map();
        for (const nodeID in rawCurveNodes) {
          const rawCurveNode = rawCurveNodes[nodeID];
          if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {
            const curveNode = {
              id: rawCurveNode.id,
              attr: rawCurveNode.attrName,
              curves: {}
            };
            curveNodesMap.set(curveNode.id, curveNode);
          }
        }
        return curveNodesMap;
      }
      // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to
      // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated
      // axis ( e.g. times and values of x rotation)
      parseAnimationCurves(curveNodesMap) {
        const rawCurves = fbxTree.Objects.AnimationCurve;
        for (const nodeID in rawCurves) {
          const animationCurve = {
            id: rawCurves[nodeID].id,
            times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),
            values: rawCurves[nodeID].KeyValueFloat.a
          };
          const relationships = connections.get(animationCurve.id);
          if (relationships !== void 0) {
            const animationCurveID = relationships.parents[0].ID;
            const animationCurveRelationship = relationships.parents[0].relationship;
            if (animationCurveRelationship.match(/X/)) {
              curveNodesMap.get(animationCurveID).curves["x"] = animationCurve;
            } else if (animationCurveRelationship.match(/Y/)) {
              curveNodesMap.get(animationCurveID).curves["y"] = animationCurve;
            } else if (animationCurveRelationship.match(/Z/)) {
              curveNodesMap.get(animationCurveID).curves["z"] = animationCurve;
            } else if (animationCurveRelationship.match(/DeformPercent/) && curveNodesMap.has(animationCurveID)) {
              curveNodesMap.get(animationCurveID).curves["morph"] = animationCurve;
            }
          }
        }
      }
      // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references
      // to various AnimationCurveNodes and is referenced by an AnimationStack node
      // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack
      parseAnimationLayers(curveNodesMap) {
        const rawLayers = fbxTree.Objects.AnimationLayer;
        const layersMap = /* @__PURE__ */ new Map();
        for (const nodeID in rawLayers) {
          const layerCurveNodes = [];
          const connection = connections.get(parseInt(nodeID));
          if (connection !== void 0) {
            const children = connection.children;
            children.forEach(function(child, i) {
              if (curveNodesMap.has(child.ID)) {
                const curveNode = curveNodesMap.get(child.ID);
                if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {
                  if (layerCurveNodes[i] === void 0) {
                    const modelID = connections.get(child.ID).parents.filter(function(parent) {
                      return parent.relationship !== void 0;
                    })[0].ID;
                    if (modelID !== void 0) {
                      const rawModel = fbxTree.Objects.Model[modelID.toString()];
                      if (rawModel === void 0) {
                        console.warn("THREE.FBXLoader: Encountered a unused curve.", child);
                        return;
                      }
                      const node = {
                        modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : "",
                        ID: rawModel.id,
                        initialPosition: [0, 0, 0],
                        initialRotation: [0, 0, 0],
                        initialScale: [1, 1, 1]
                      };
                      sceneGraph.traverse(function(child2) {
                        if (child2.ID === rawModel.id) {
                          node.transform = child2.matrix;
                          if (child2.userData.transformData) node.eulerOrder = child2.userData.transformData.eulerOrder;
                        }
                      });
                      if (!node.transform) node.transform = new Matrix4();
                      if ("PreRotation" in rawModel) node.preRotation = rawModel.PreRotation.value;
                      if ("PostRotation" in rawModel) node.postRotation = rawModel.PostRotation.value;
                      layerCurveNodes[i] = node;
                    }
                  }
                  if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;
                } else if (curveNode.curves.morph !== void 0) {
                  if (layerCurveNodes[i] === void 0) {
                    const deformerID = connections.get(child.ID).parents.filter(function(parent) {
                      return parent.relationship !== void 0;
                    })[0].ID;
                    const morpherID = connections.get(deformerID).parents[0].ID;
                    const geoID = connections.get(morpherID).parents[0].ID;
                    const modelID = connections.get(geoID).parents[0].ID;
                    const rawModel = fbxTree.Objects.Model[modelID];
                    const node = {
                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : "",
                      morphName: fbxTree.Objects.Deformer[deformerID].attrName
                    };
                    layerCurveNodes[i] = node;
                  }
                  layerCurveNodes[i][curveNode.attr] = curveNode;
                }
              }
            });
            layersMap.set(parseInt(nodeID), layerCurveNodes);
          }
        }
        return layersMap;
      }
      // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation
      // hierarchy. Each Stack node will be used to create a AnimationClip
      parseAnimStacks(layersMap) {
        const rawStacks = fbxTree.Objects.AnimationStack;
        const rawClips = {};
        for (const nodeID in rawStacks) {
          const children = connections.get(parseInt(nodeID)).children;
          if (children.length > 1) {
            console.warn("THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.");
          }
          const layer = layersMap.get(children[0].ID);
          rawClips[nodeID] = {
            name: rawStacks[nodeID].attrName,
            layer
          };
        }
        return rawClips;
      }
      addClip(rawClip) {
        let tracks = [];
        const scope = this;
        rawClip.layer.forEach(function(rawTracks) {
          tracks = tracks.concat(scope.generateTracks(rawTracks));
        });
        return new AnimationClip(rawClip.name, -1, tracks);
      }
      generateTracks(rawTracks) {
        const tracks = [];
        let initialPosition = new Vector3();
        let initialScale = new Vector3();
        if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, new Quaternion(), initialScale);
        initialPosition = initialPosition.toArray();
        initialScale = initialScale.toArray();
        if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {
          const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, "position");
          if (positionTrack !== void 0) tracks.push(positionTrack);
        }
        if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {
          const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);
          if (rotationTrack !== void 0) tracks.push(rotationTrack);
        }
        if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {
          const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, "scale");
          if (scaleTrack !== void 0) tracks.push(scaleTrack);
        }
        if (rawTracks.DeformPercent !== void 0) {
          const morphTrack = this.generateMorphTrack(rawTracks);
          if (morphTrack !== void 0) tracks.push(morphTrack);
        }
        return tracks;
      }
      generateVectorTrack(modelName, curves, initialValue, type) {
        const times = this.getTimesForAllAxes(curves);
        const values = this.getKeyframeTrackValues(times, curves, initialValue);
        return new VectorKeyframeTrack(modelName + "." + type, times, values);
      }
      generateRotationTrack(modelName, curves, preRotation, postRotation, eulerOrder) {
        let times;
        let values;
        if (curves.x !== void 0 && curves.y !== void 0 && curves.z !== void 0) {
          const result = this.interpolateRotations(curves.x, curves.y, curves.z, eulerOrder);
          times = result[0];
          values = result[1];
        }
        if (preRotation !== void 0) {
          preRotation = preRotation.map(MathUtils.degToRad);
          preRotation.push(eulerOrder);
          preRotation = new Euler().fromArray(preRotation);
          preRotation = new Quaternion().setFromEuler(preRotation);
        }
        if (postRotation !== void 0) {
          postRotation = postRotation.map(MathUtils.degToRad);
          postRotation.push(eulerOrder);
          postRotation = new Euler().fromArray(postRotation);
          postRotation = new Quaternion().setFromEuler(postRotation).invert();
        }
        const quaternion = new Quaternion();
        const euler = new Euler();
        const quaternionValues = [];
        if (!values || !times) return new QuaternionKeyframeTrack(modelName + ".quaternion", [0], [0]);
        for (let i = 0; i < values.length; i += 3) {
          euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);
          quaternion.setFromEuler(euler);
          if (preRotation !== void 0) quaternion.premultiply(preRotation);
          if (postRotation !== void 0) quaternion.multiply(postRotation);
          if (i > 2) {
            const prevQuat = new Quaternion().fromArray(
              quaternionValues,
              (i - 3) / 3 * 4
            );
            if (prevQuat.dot(quaternion) < 0) {
              quaternion.set(-quaternion.x, -quaternion.y, -quaternion.z, -quaternion.w);
            }
          }
          quaternion.toArray(quaternionValues, i / 3 * 4);
        }
        return new QuaternionKeyframeTrack(modelName + ".quaternion", times, quaternionValues);
      }
      generateMorphTrack(rawTracks) {
        const curves = rawTracks.DeformPercent.curves.morph;
        const values = curves.values.map(function(val) {
          return val / 100;
        });
        const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];
        return new NumberKeyframeTrack(rawTracks.modelName + ".morphTargetInfluences[" + morphNum + "]", curves.times, values);
      }
      // For all animated objects, times are defined separately for each axis
      // Here we'll combine the times into one sorted array without duplicates
      getTimesForAllAxes(curves) {
        let times = [];
        if (curves.x !== void 0) times = times.concat(curves.x.times);
        if (curves.y !== void 0) times = times.concat(curves.y.times);
        if (curves.z !== void 0) times = times.concat(curves.z.times);
        times = times.sort(function(a, b) {
          return a - b;
        });
        if (times.length > 1) {
          let targetIndex = 1;
          let lastValue = times[0];
          for (let i = 1; i < times.length; i++) {
            const currentValue = times[i];
            if (currentValue !== lastValue) {
              times[targetIndex] = currentValue;
              lastValue = currentValue;
              targetIndex++;
            }
          }
          times = times.slice(0, targetIndex);
        }
        return times;
      }
      getKeyframeTrackValues(times, curves, initialValue) {
        const prevValue = initialValue;
        const values = [];
        let xIndex = -1;
        let yIndex = -1;
        let zIndex = -1;
        times.forEach(function(time) {
          if (curves.x) xIndex = curves.x.times.indexOf(time);
          if (curves.y) yIndex = curves.y.times.indexOf(time);
          if (curves.z) zIndex = curves.z.times.indexOf(time);
          if (xIndex !== -1) {
            const xValue = curves.x.values[xIndex];
            values.push(xValue);
            prevValue[0] = xValue;
          } else {
            values.push(prevValue[0]);
          }
          if (yIndex !== -1) {
            const yValue = curves.y.values[yIndex];
            values.push(yValue);
            prevValue[1] = yValue;
          } else {
            values.push(prevValue[1]);
          }
          if (zIndex !== -1) {
            const zValue = curves.z.values[zIndex];
            values.push(zValue);
            prevValue[2] = zValue;
          } else {
            values.push(prevValue[2]);
          }
        });
        return values;
      }
      // Rotations are defined as Euler angles which can have values  of any size
      // These will be converted to quaternions which don't support values greater than
      // PI, so we'll interpolate large rotations
      interpolateRotations(curvex, curvey, curvez, eulerOrder) {
        const times = [];
        const values = [];
        times.push(curvex.times[0]);
        values.push(MathUtils.degToRad(curvex.values[0]));
        values.push(MathUtils.degToRad(curvey.values[0]));
        values.push(MathUtils.degToRad(curvez.values[0]));
        for (let i = 1; i < curvex.values.length; i++) {
          const initialValue = [
            curvex.values[i - 1],
            curvey.values[i - 1],
            curvez.values[i - 1]
          ];
          if (isNaN(initialValue[0]) || isNaN(initialValue[1]) || isNaN(initialValue[2])) {
            continue;
          }
          const initialValueRad = initialValue.map(MathUtils.degToRad);
          const currentValue = [
            curvex.values[i],
            curvey.values[i],
            curvez.values[i]
          ];
          if (isNaN(currentValue[0]) || isNaN(currentValue[1]) || isNaN(currentValue[2])) {
            continue;
          }
          const currentValueRad = currentValue.map(MathUtils.degToRad);
          const valuesSpan = [
            currentValue[0] - initialValue[0],
            currentValue[1] - initialValue[1],
            currentValue[2] - initialValue[2]
          ];
          const absoluteSpan = [
            Math.abs(valuesSpan[0]),
            Math.abs(valuesSpan[1]),
            Math.abs(valuesSpan[2])
          ];
          if (absoluteSpan[0] >= 180 || absoluteSpan[1] >= 180 || absoluteSpan[2] >= 180) {
            const maxAbsSpan = Math.max(...absoluteSpan);
            const numSubIntervals = maxAbsSpan / 180;
            const E1 = new Euler(...initialValueRad, eulerOrder);
            const E2 = new Euler(...currentValueRad, eulerOrder);
            const Q1 = new Quaternion().setFromEuler(E1);
            const Q2 = new Quaternion().setFromEuler(E2);
            if (Q1.dot(Q2)) {
              Q2.set(-Q2.x, -Q2.y, -Q2.z, -Q2.w);
            }
            const initialTime = curvex.times[i - 1];
            const timeSpan = curvex.times[i] - initialTime;
            const Q = new Quaternion();
            const E = new Euler();
            for (let t = 0; t < 1; t += 1 / numSubIntervals) {
              Q.copy(Q1.clone().slerp(Q2.clone(), t));
              times.push(initialTime + t * timeSpan);
              E.setFromQuaternion(Q, eulerOrder);
              values.push(E.x);
              values.push(E.y);
              values.push(E.z);
            }
          } else {
            times.push(curvex.times[i]);
            values.push(MathUtils.degToRad(curvex.values[i]));
            values.push(MathUtils.degToRad(curvey.values[i]));
            values.push(MathUtils.degToRad(curvez.values[i]));
          }
        }
        return [times, values];
      }
    };
    TextParser = class {
      getPrevNode() {
        return this.nodeStack[this.currentIndent - 2];
      }
      getCurrentNode() {
        return this.nodeStack[this.currentIndent - 1];
      }
      getCurrentProp() {
        return this.currentProp;
      }
      pushStack(node) {
        this.nodeStack.push(node);
        this.currentIndent += 1;
      }
      popStack() {
        this.nodeStack.pop();
        this.currentIndent -= 1;
      }
      setCurrentProp(val, name) {
        this.currentProp = val;
        this.currentPropName = name;
      }
      parse(text) {
        this.currentIndent = 0;
        this.allNodes = new FBXTree();
        this.nodeStack = [];
        this.currentProp = [];
        this.currentPropName = "";
        const scope = this;
        const split = text.split(/[\r\n]+/);
        split.forEach(function(line, i) {
          const matchComment = line.match(/^[\s\t]*;/);
          const matchEmpty = line.match(/^[\s\t]*$/);
          if (matchComment || matchEmpty) return;
          const matchBeginning = line.match("^\\t{" + scope.currentIndent + "}(\\w+):(.*){", "");
          const matchProperty = line.match("^\\t{" + scope.currentIndent + "}(\\w+):[\\s\\t\\r\\n](.*)");
          const matchEnd = line.match("^\\t{" + (scope.currentIndent - 1) + "}}");
          if (matchBeginning) {
            scope.parseNodeBegin(line, matchBeginning);
          } else if (matchProperty) {
            scope.parseNodeProperty(line, matchProperty, split[++i]);
          } else if (matchEnd) {
            scope.popStack();
          } else if (line.match(/^[^\s\t}]/)) {
            scope.parseNodePropertyContinued(line);
          }
        });
        return this.allNodes;
      }
      parseNodeBegin(line, property) {
        const nodeName = property[1].trim().replace(/^"/, "").replace(/"$/, "");
        const nodeAttrs = property[2].split(",").map(function(attr) {
          return attr.trim().replace(/^"/, "").replace(/"$/, "");
        });
        const node = { name: nodeName };
        const attrs = this.parseNodeAttr(nodeAttrs);
        const currentNode = this.getCurrentNode();
        if (this.currentIndent === 0) {
          this.allNodes.add(nodeName, node);
        } else {
          if (nodeName in currentNode) {
            if (nodeName === "PoseNode") {
              currentNode.PoseNode.push(node);
            } else if (currentNode[nodeName].id !== void 0) {
              currentNode[nodeName] = {};
              currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];
            }
            if (attrs.id !== "") currentNode[nodeName][attrs.id] = node;
          } else if (typeof attrs.id === "number") {
            currentNode[nodeName] = {};
            currentNode[nodeName][attrs.id] = node;
          } else if (nodeName !== "Properties70") {
            if (nodeName === "PoseNode") currentNode[nodeName] = [node];
            else currentNode[nodeName] = node;
          }
        }
        if (typeof attrs.id === "number") node.id = attrs.id;
        if (attrs.name !== "") node.attrName = attrs.name;
        if (attrs.type !== "") node.attrType = attrs.type;
        this.pushStack(node);
      }
      parseNodeAttr(attrs) {
        let id = attrs[0];
        if (attrs[0] !== "") {
          id = parseInt(attrs[0]);
          if (isNaN(id)) {
            id = attrs[0];
          }
        }
        let name = "", type = "";
        if (attrs.length > 1) {
          name = attrs[1].replace(/^(\w+)::/, "");
          type = attrs[2];
        }
        return { id, name, type };
      }
      parseNodeProperty(line, property, contentLine) {
        let propName = property[1].replace(/^"/, "").replace(/"$/, "").trim();
        let propValue = property[2].replace(/^"/, "").replace(/"$/, "").trim();
        if (propName === "Content" && propValue === ",") {
          propValue = contentLine.replace(/"/g, "").replace(/,$/, "").trim();
        }
        const currentNode = this.getCurrentNode();
        const parentName = currentNode.name;
        if (parentName === "Properties70") {
          this.parseNodeSpecialProperty(line, propName, propValue);
          return;
        }
        if (propName === "C") {
          const connProps = propValue.split(",").slice(1);
          const from = parseInt(connProps[0]);
          const to = parseInt(connProps[1]);
          let rest = propValue.split(",").slice(3);
          rest = rest.map(function(elem) {
            return elem.trim().replace(/^"/, "");
          });
          propName = "connections";
          propValue = [from, to];
          append(propValue, rest);
          if (currentNode[propName] === void 0) {
            currentNode[propName] = [];
          }
        }
        if (propName === "Node") currentNode.id = propValue;
        if (propName in currentNode && Array.isArray(currentNode[propName])) {
          currentNode[propName].push(propValue);
        } else {
          if (propName !== "a") currentNode[propName] = propValue;
          else currentNode.a = propValue;
        }
        this.setCurrentProp(currentNode, propName);
        if (propName === "a" && propValue.slice(-1) !== ",") {
          currentNode.a = parseNumberArray(propValue);
        }
      }
      parseNodePropertyContinued(line) {
        const currentNode = this.getCurrentNode();
        currentNode.a += line;
        if (line.slice(-1) !== ",") {
          currentNode.a = parseNumberArray(currentNode.a);
        }
      }
      // parse "Property70"
      parseNodeSpecialProperty(line, propName, propValue) {
        const props = propValue.split('",').map(function(prop) {
          return prop.trim().replace(/^\"/, "").replace(/\s/, "_");
        });
        const innerPropName = props[0];
        const innerPropType1 = props[1];
        const innerPropType2 = props[2];
        const innerPropFlag = props[3];
        let innerPropValue = props[4];
        switch (innerPropType1) {
          case "int":
          case "enum":
          case "bool":
          case "ULongLong":
          case "double":
          case "Number":
          case "FieldOfView":
            innerPropValue = parseFloat(innerPropValue);
            break;
          case "Color":
          case "ColorRGB":
          case "Vector3D":
          case "Lcl_Translation":
          case "Lcl_Rotation":
          case "Lcl_Scaling":
            innerPropValue = parseNumberArray(innerPropValue);
            break;
        }
        this.getPrevNode()[innerPropName] = {
          "type": innerPropType1,
          "type2": innerPropType2,
          "flag": innerPropFlag,
          "value": innerPropValue
        };
        this.setCurrentProp(this.getPrevNode(), innerPropName);
      }
    };
    BinaryParser = class {
      parse(buffer) {
        const reader = new BinaryReader(buffer);
        reader.skip(23);
        const version = reader.getUint32();
        if (version < 6400) {
          throw new Error("THREE.FBXLoader: FBX version not supported, FileVersion: " + version);
        }
        const allNodes = new FBXTree();
        while (!this.endOfContent(reader)) {
          const node = this.parseNode(reader, version);
          if (node !== null) allNodes.add(node.name, node);
        }
        return allNodes;
      }
      // Check if reader has reached the end of content.
      endOfContent(reader) {
        if (reader.size() % 16 === 0) {
          return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();
        } else {
          return reader.getOffset() + 160 + 16 >= reader.size();
        }
      }
      // recursively parse nodes until the end of the file is reached
      parseNode(reader, version) {
        const node = {};
        const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();
        const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();
        version >= 7500 ? reader.getUint64() : reader.getUint32();
        const nameLen = reader.getUint8();
        const name = reader.getString(nameLen);
        if (endOffset === 0) return null;
        const propertyList = [];
        for (let i = 0; i < numProperties; i++) {
          propertyList.push(this.parseProperty(reader));
        }
        const id = propertyList.length > 0 ? propertyList[0] : "";
        const attrName = propertyList.length > 1 ? propertyList[1] : "";
        const attrType = propertyList.length > 2 ? propertyList[2] : "";
        node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;
        while (endOffset > reader.getOffset()) {
          const subNode = this.parseNode(reader, version);
          if (subNode !== null) this.parseSubNode(name, node, subNode);
        }
        node.propertyList = propertyList;
        if (typeof id === "number") node.id = id;
        if (attrName !== "") node.attrName = attrName;
        if (attrType !== "") node.attrType = attrType;
        if (name !== "") node.name = name;
        return node;
      }
      parseSubNode(name, node, subNode) {
        if (subNode.singleProperty === true) {
          const value = subNode.propertyList[0];
          if (Array.isArray(value)) {
            node[subNode.name] = subNode;
            subNode.a = value;
          } else {
            node[subNode.name] = value;
          }
        } else if (name === "Connections" && subNode.name === "C") {
          const array = [];
          subNode.propertyList.forEach(function(property, i) {
            if (i !== 0) array.push(property);
          });
          if (node.connections === void 0) {
            node.connections = [];
          }
          node.connections.push(array);
        } else if (subNode.name === "Properties70") {
          const keys = Object.keys(subNode);
          keys.forEach(function(key) {
            node[key] = subNode[key];
          });
        } else if (name === "Properties70" && subNode.name === "P") {
          let innerPropName = subNode.propertyList[0];
          let innerPropType1 = subNode.propertyList[1];
          const innerPropType2 = subNode.propertyList[2];
          const innerPropFlag = subNode.propertyList[3];
          let innerPropValue;
          if (innerPropName.indexOf("Lcl ") === 0) innerPropName = innerPropName.replace("Lcl ", "Lcl_");
          if (innerPropType1.indexOf("Lcl ") === 0) innerPropType1 = innerPropType1.replace("Lcl ", "Lcl_");
          if (innerPropType1 === "Color" || innerPropType1 === "ColorRGB" || innerPropType1 === "Vector" || innerPropType1 === "Vector3D" || innerPropType1.indexOf("Lcl_") === 0) {
            innerPropValue = [
              subNode.propertyList[4],
              subNode.propertyList[5],
              subNode.propertyList[6]
            ];
          } else {
            innerPropValue = subNode.propertyList[4];
          }
          node[innerPropName] = {
            "type": innerPropType1,
            "type2": innerPropType2,
            "flag": innerPropFlag,
            "value": innerPropValue
          };
        } else if (node[subNode.name] === void 0) {
          if (typeof subNode.id === "number") {
            node[subNode.name] = {};
            node[subNode.name][subNode.id] = subNode;
          } else {
            node[subNode.name] = subNode;
          }
        } else {
          if (subNode.name === "PoseNode") {
            if (!Array.isArray(node[subNode.name])) {
              node[subNode.name] = [node[subNode.name]];
            }
            node[subNode.name].push(subNode);
          } else if (node[subNode.name][subNode.id] === void 0) {
            node[subNode.name][subNode.id] = subNode;
          }
        }
      }
      parseProperty(reader) {
        const type = reader.getString(1);
        let length;
        switch (type) {
          case "C":
            return reader.getBoolean();
          case "D":
            return reader.getFloat64();
          case "F":
            return reader.getFloat32();
          case "I":
            return reader.getInt32();
          case "L":
            return reader.getInt64();
          case "R":
            length = reader.getUint32();
            return reader.getArrayBuffer(length);
          case "S":
            length = reader.getUint32();
            return reader.getString(length);
          case "Y":
            return reader.getInt16();
          case "b":
          case "c":
          case "d":
          case "f":
          case "i":
          case "l":
            const arrayLength = reader.getUint32();
            const encoding = reader.getUint32();
            const compressedLength = reader.getUint32();
            if (encoding === 0) {
              switch (type) {
                case "b":
                case "c":
                  return reader.getBooleanArray(arrayLength);
                case "d":
                  return reader.getFloat64Array(arrayLength);
                case "f":
                  return reader.getFloat32Array(arrayLength);
                case "i":
                  return reader.getInt32Array(arrayLength);
                case "l":
                  return reader.getInt64Array(arrayLength);
              }
            }
            const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));
            const reader2 = new BinaryReader(data.buffer);
            switch (type) {
              case "b":
              case "c":
                return reader2.getBooleanArray(arrayLength);
              case "d":
                return reader2.getFloat64Array(arrayLength);
              case "f":
                return reader2.getFloat32Array(arrayLength);
              case "i":
                return reader2.getInt32Array(arrayLength);
              case "l":
                return reader2.getInt64Array(arrayLength);
            }
            break;
          default:
            throw new Error("THREE.FBXLoader: Unknown property type " + type);
        }
      }
    };
    BinaryReader = class {
      constructor(buffer, littleEndian) {
        this.dv = new DataView(buffer);
        this.offset = 0;
        this.littleEndian = littleEndian !== void 0 ? littleEndian : true;
        this._textDecoder = new TextDecoder();
      }
      getOffset() {
        return this.offset;
      }
      size() {
        return this.dv.buffer.byteLength;
      }
      skip(length) {
        this.offset += length;
      }
      // seems like true/false representation depends on exporter.
      // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)
      // then sees LSB.
      getBoolean() {
        return (this.getUint8() & 1) === 1;
      }
      getBooleanArray(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getBoolean());
        }
        return a;
      }
      getUint8() {
        const value = this.dv.getUint8(this.offset);
        this.offset += 1;
        return value;
      }
      getInt16() {
        const value = this.dv.getInt16(this.offset, this.littleEndian);
        this.offset += 2;
        return value;
      }
      getInt32() {
        const value = this.dv.getInt32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      getInt32Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getInt32());
        }
        return a;
      }
      getUint32() {
        const value = this.dv.getUint32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      // JavaScript doesn't support 64-bit integer so calculate this here
      // 1 << 32 will return 1 so using multiply operation instead here.
      // There's a possibility that this method returns wrong value if the value
      // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.
      // TODO: safely handle 64-bit integer
      getInt64() {
        let low, high;
        if (this.littleEndian) {
          low = this.getUint32();
          high = this.getUint32();
        } else {
          high = this.getUint32();
          low = this.getUint32();
        }
        if (high & 2147483648) {
          high = ~high & 4294967295;
          low = ~low & 4294967295;
          if (low === 4294967295) high = high + 1 & 4294967295;
          low = low + 1 & 4294967295;
          return -(high * 4294967296 + low);
        }
        return high * 4294967296 + low;
      }
      getInt64Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getInt64());
        }
        return a;
      }
      // Note: see getInt64() comment
      getUint64() {
        let low, high;
        if (this.littleEndian) {
          low = this.getUint32();
          high = this.getUint32();
        } else {
          high = this.getUint32();
          low = this.getUint32();
        }
        return high * 4294967296 + low;
      }
      getFloat32() {
        const value = this.dv.getFloat32(this.offset, this.littleEndian);
        this.offset += 4;
        return value;
      }
      getFloat32Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getFloat32());
        }
        return a;
      }
      getFloat64() {
        const value = this.dv.getFloat64(this.offset, this.littleEndian);
        this.offset += 8;
        return value;
      }
      getFloat64Array(size) {
        const a = [];
        for (let i = 0; i < size; i++) {
          a.push(this.getFloat64());
        }
        return a;
      }
      getArrayBuffer(size) {
        const value = this.dv.buffer.slice(this.offset, this.offset + size);
        this.offset += size;
        return value;
      }
      getString(size) {
        const start = this.offset;
        let a = new Uint8Array(this.dv.buffer, start, size);
        this.skip(size);
        const nullByte = a.indexOf(0);
        if (nullByte >= 0) a = new Uint8Array(this.dv.buffer, start, nullByte);
        return this._textDecoder.decode(a);
      }
    };
    FBXTree = class {
      add(key, val) {
        this[key] = val;
      }
    };
    dataArray = [];
    tempEuler = new Euler();
    tempVec = new Vector3();
  }
});

// node_modules/aframe-extras/src/loaders/fbx-model.js
var fbx_model_exports = {};
var init_fbx_model = __esm({
  "node_modules/aframe-extras/src/loaders/fbx-model.js"() {
    init_FBXLoader();
    THREE.FBXLoader = FBXLoader;
    AFRAME.registerComponent("fbx-model", {
      schema: {
        src: { type: "asset" },
        crossorigin: { default: "" }
      },
      init: function() {
        this.model = null;
      },
      update: function() {
        const data = this.data;
        if (!data.src) return;
        this.remove();
        const loader = new THREE.FBXLoader();
        if (data.crossorigin) loader.setCrossOrigin(data.crossorigin);
        loader.load(data.src, this.load.bind(this));
      },
      load: function(model) {
        this.model = model;
        this.el.setObject3D("mesh", model);
        this.el.emit("model-loaded", { format: "fbx", model });
      },
      remove: function() {
        if (this.model) this.el.removeObject3D("mesh");
      }
    });
  }
});

// node_modules/aframe-extras/lib/fetch-script.js
var require_fetch_script = __commonJS({
  "node_modules/aframe-extras/lib/fetch-script.js"(exports, module) {
    function getScriptId() {
      return "script_" + Date.now() + "_" + Math.ceil(Math.random() * 1e5);
    }
    function createScript(url, id) {
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.async = true;
      script.id = id;
      script.src = url;
      return script;
    }
    function removeScript(id) {
      const script = document.getElementById(id);
      const parent = script.parentNode;
      try {
        parent && parent.removeChild(script);
      } catch (e) {
      }
    }
    function appendScript(script) {
      const firstScript = document.getElementsByTagName("script")[0];
      firstScript.parentNode.insertBefore(script, firstScript);
    }
    function fetchScriptInternal(url, options, Promise2) {
      return new Promise2(function(resolve, reject) {
        const timeout = options.timeout || 5e3;
        const scriptId = getScriptId();
        const script = createScript(url, scriptId);
        const timeoutId = setTimeout(function() {
          reject(new Error("Script request to " + url + " timed out"));
          removeScript(scriptId);
        }, timeout);
        const disableTimeout = function(timeoutId2) {
          clearTimeout(timeoutId2);
        };
        script.addEventListener("load", function(e) {
          resolve({ ok: true });
          disableTimeout(timeoutId);
          removeScript(scriptId);
        });
        script.addEventListener("error", function(e) {
          reject(new Error("Script request to " + url + " failed " + e));
          disableTimeout(timeoutId);
          removeScript(scriptId);
        });
        appendScript(script);
      });
    }
    function fetchScript(settings) {
      settings = settings || {};
      return function(url, options) {
        options = options || {};
        return fetchScriptInternal(url, options, settings.Promise || Promise);
      };
    }
    module.exports = fetchScript;
  }
});

// node_modules/aframe-extras/src/loaders/gltf-model-legacy.js
var require_gltf_model_legacy = __commonJS({
  "node_modules/aframe-extras/src/loaders/gltf-model-legacy.js"(exports, module) {
    var fetchScript = require_fetch_script()();
    var LOADER_SRC = "https://cdn.jsdelivr.net/gh/mrdoob/three.js@r86/examples/js/loaders/GLTFLoader.js";
    var loadLoader = /* @__PURE__ */ function() {
      let promise;
      return function() {
        promise = promise || fetchScript(LOADER_SRC);
        return promise;
      };
    }();
    module.exports = AFRAME.registerComponent("gltf-model-legacy", {
      schema: { type: "model" },
      init: function() {
        this.model = null;
        this.loader = null;
        this.loaderPromise = loadLoader().then(() => {
          this.loader = new THREE.GLTFLoader();
          this.loader.setCrossOrigin("Anonymous");
        });
      },
      update: function() {
        const self2 = this;
        const el = this.el;
        const src = this.data;
        if (!src) {
          return;
        }
        this.remove();
        this.loaderPromise.then(() => {
          this.loader.load(src, function gltfLoaded(gltfModel) {
            self2.model = gltfModel.scene;
            self2.model.animations = gltfModel.animations;
            el.setObject3D("mesh", self2.model);
            el.emit("model-loaded", { format: "gltf", model: self2.model });
          });
        });
      },
      remove: function() {
        if (!this.model) {
          return;
        }
        this.el.removeObject3D("mesh");
      }
    });
  }
});

// node_modules/aframe-extras/src/loaders/object-model.js
var require_object_model = __commonJS({
  "node_modules/aframe-extras/src/loaders/object-model.js"(exports, module) {
    module.exports = AFRAME.registerComponent("object-model", {
      schema: {
        src: { type: "asset" },
        crossorigin: { default: "" }
      },
      init: function() {
        this.model = null;
      },
      update: function() {
        let loader;
        const data = this.data;
        if (!data.src) return;
        this.remove();
        loader = new THREE.ObjectLoader();
        if (data.crossorigin) loader.setCrossOrigin(data.crossorigin);
        loader.load(data.src, (object) => {
          object.traverse((o) => {
            if (o instanceof THREE.SkinnedMesh && o.material) {
              o.material.skinning = !!(o.geometry && o.geometry.bones || []).length;
            }
          });
          this.load(object);
        });
      },
      load: function(model) {
        this.model = model;
        this.el.setObject3D("mesh", model);
        this.el.emit("model-loaded", { format: "json", model });
      },
      remove: function() {
        if (this.model) this.el.removeObject3D("mesh");
      }
    });
  }
});

// node_modules/aframe-extras/src/loaders/index.js
var require_loaders = __commonJS({
  "node_modules/aframe-extras/src/loaders/index.js"() {
    require_animation_mixer();
    require_collada_model_legacy();
    init_fbx_model();
    require_gltf_model_legacy();
    require_object_model();
  }
});

// node_modules/aframe-extras/src/misc/checkpoint.js
var require_checkpoint = __commonJS({
  "node_modules/aframe-extras/src/misc/checkpoint.js"(exports, module) {
    module.exports = AFRAME.registerComponent("checkpoint", {
      schema: {
        offset: { default: { x: 0, y: 0, z: 0 }, type: "vec3" }
      },
      init: function() {
        this.active = false;
        this.targetEl = null;
        this.fire = this.fire.bind(this);
        this.offset = new THREE.Vector3();
      },
      update: function() {
        this.offset.copy(this.data.offset);
      },
      play: function() {
        this.el.addEventListener("click", this.fire);
      },
      pause: function() {
        this.el.removeEventListener("click", this.fire);
      },
      remove: function() {
        this.pause();
      },
      fire: function() {
        const targetEl = this.el.sceneEl.querySelector("[checkpoint-controls]");
        if (!targetEl) {
          throw new Error("No `checkpoint-controls` component found.");
        }
        targetEl.components["checkpoint-controls"].setCheckpoint(this.el);
      },
      getOffset: function() {
        return this.offset.copy(this.data.offset);
      }
    });
  }
});

// node_modules/aframe-extras/src/misc/cube-env-map.js
var require_cube_env_map = __commonJS({
  "node_modules/aframe-extras/src/misc/cube-env-map.js"(exports, module) {
    function ensureMaterialArray(material) {
      if (!material) {
        return [];
      } else if (Array.isArray(material)) {
        return material;
      } else if (material.materials) {
        return material.materials;
      } else {
        return [material];
      }
    }
    function applyEnvMap(mesh, materialNames, envMap, reflectivity) {
      if (!mesh) return;
      materialNames = materialNames || [];
      mesh.traverse((node) => {
        if (!node.isMesh) return;
        const meshMaterials = ensureMaterialArray(node.material);
        meshMaterials.forEach((material) => {
          if (material && !("envMap" in material)) return;
          if (materialNames.length && materialNames.indexOf(material.name) === -1) return;
          material.envMap = envMap;
          material.reflectivity = reflectivity;
          material.needsUpdate = true;
        });
      });
    }
    module.exports = AFRAME.registerComponent("cube-env-map", {
      multiple: true,
      schema: {
        path: { default: "" },
        extension: { default: "jpg", oneOf: ["jpg", "png"] },
        enableBackground: { default: false },
        reflectivity: { default: 1, min: 0, max: 1 },
        materials: { default: [] }
      },
      init: function() {
        const data = this.data;
        this.texture = new THREE.CubeTextureLoader().load([
          data.path + "posx." + data.extension,
          data.path + "negx." + data.extension,
          data.path + "posy." + data.extension,
          data.path + "negy." + data.extension,
          data.path + "posz." + data.extension,
          data.path + "negz." + data.extension
        ]);
        this.texture.format = THREE.RGBAFormat;
        this.object3dsetHandler = () => {
          const mesh = this.el.getObject3D("mesh");
          const data2 = this.data;
          applyEnvMap(mesh, data2.materials, this.texture, data2.reflectivity);
        };
        this.object3dsetHandler();
        this.el.addEventListener("object3dset", this.object3dsetHandler);
      },
      update: function(oldData) {
        const data = this.data;
        const mesh = this.el.getObject3D("mesh");
        let addedMaterialNames = [];
        let removedMaterialNames = [];
        if (data.materials.length) {
          if (oldData.materials) {
            addedMaterialNames = data.materials.filter((name) => !oldData.materials.includes(name));
            removedMaterialNames = oldData.materials.filter((name) => !data.materials.includes(name));
          } else {
            addedMaterialNames = data.materials;
          }
        }
        if (addedMaterialNames.length) {
          applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity);
        }
        if (removedMaterialNames.length) {
          applyEnvMap(mesh, removedMaterialNames, null, 1);
        }
        if (oldData.materials && data.reflectivity !== oldData.reflectivity) {
          const maintainedMaterialNames = data.materials.filter((name) => oldData.materials.includes(name));
          if (maintainedMaterialNames.length) {
            applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity);
          }
        }
        if (this.data.enableBackground && !oldData.enableBackground) {
          this.setBackground(this.texture);
        } else if (!this.data.enableBackground && oldData.enableBackground) {
          this.setBackground(null);
        }
      },
      remove: function() {
        this.el.removeEventListener("object3dset", this.object3dsetHandler);
        const mesh = this.el.getObject3D("mesh");
        const data = this.data;
        applyEnvMap(mesh, data.materials, null, 1);
        if (data.enableBackground) this.setBackground(null);
      },
      setBackground: function(texture) {
        this.el.sceneEl.object3D.background = texture;
      }
    });
  }
});

// node_modules/aframe-extras/src/misc/grab.js
var require_grab = __commonJS({
  "node_modules/aframe-extras/src/misc/grab.js"(exports, module) {
    module.exports = AFRAME.registerComponent("grab", {
      init: function() {
        this.system = this.el.sceneEl.systems.physics;
        this.GRABBED_STATE = "grabbed";
        this.grabbing = false;
        this.hitEl = /** @type {AFRAME.Element}    */
        null;
        this.physics = /** @type {AFRAME.System}     */
        this.el.sceneEl.systems.physics;
        this.constraint = /** @type {CANNON.Constraint} */
        null;
        this.onHit = this.onHit.bind(this);
        this.onGripOpen = this.onGripOpen.bind(this);
        this.onGripClose = this.onGripClose.bind(this);
      },
      play: function() {
        const el = this.el;
        el.addEventListener("hit", this.onHit);
        el.addEventListener("gripdown", this.onGripClose);
        el.addEventListener("gripup", this.onGripOpen);
        el.addEventListener("trackpaddown", this.onGripClose);
        el.addEventListener("trackpadup", this.onGripOpen);
        el.addEventListener("triggerdown", this.onGripClose);
        el.addEventListener("triggerup", this.onGripOpen);
      },
      pause: function() {
        const el = this.el;
        el.removeEventListener("hit", this.onHit);
        el.removeEventListener("gripdown", this.onGripClose);
        el.removeEventListener("gripup", this.onGripOpen);
        el.removeEventListener("trackpaddown", this.onGripClose);
        el.removeEventListener("trackpadup", this.onGripOpen);
        el.removeEventListener("triggerdown", this.onGripClose);
        el.removeEventListener("triggerup", this.onGripOpen);
      },
      onGripClose: function() {
        this.grabbing = true;
      },
      onGripOpen: function() {
        const hitEl = this.hitEl;
        this.grabbing = false;
        if (!hitEl) {
          return;
        }
        hitEl.removeState(this.GRABBED_STATE);
        this.hitEl = void 0;
        this.system.removeConstraint(this.constraint);
        this.constraint = null;
      },
      onHit: function(evt) {
        const hitEl = evt.detail.el;
        if (hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) {
          return;
        }
        hitEl.addState(this.GRABBED_STATE);
        this.hitEl = hitEl;
        this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);
        this.system.addConstraint(this.constraint);
      }
    });
  }
});

// node_modules/aframe-extras/src/misc/normal-material.js
var require_normal_material = __commonJS({
  "node_modules/aframe-extras/src/misc/normal-material.js"(exports, module) {
    module.exports = AFRAME.registerComponent("normal-material", {
      init: function() {
        this.material = new THREE.MeshNormalMaterial({ flatShading: true });
        this.applyMaterial = this.applyMaterial.bind(this);
        this.el.addEventListener("object3dset", this.applyMaterial);
        this.applyMaterial();
      },
      remove: function() {
        this.el.removeEventListener("object3dset", this.applyMaterial);
      },
      applyMaterial: function() {
        this.el.object3D.traverse((node) => {
          if (node.isMesh) node.material = this.material;
        });
      }
    });
  }
});

// node_modules/aframe-extras/src/misc/sphere-collider.js
var require_sphere_collider = __commonJS({
  "node_modules/aframe-extras/src/misc/sphere-collider.js"(exports, module) {
    module.exports = AFRAME.registerComponent("sphere-collider", {
      schema: {
        enabled: { default: true },
        interval: { default: 80 },
        objects: { default: "" },
        state: { default: "collided" },
        radius: { default: 0.05 },
        watch: { default: true }
      },
      init: function() {
        this.observer = null;
        this.els = [];
        this.collisions = [];
        this.prevCheckTime = void 0;
        this.eventDetail = {};
        this.handleHit = this.handleHit.bind(this);
        this.handleHitEnd = this.handleHitEnd.bind(this);
      },
      play: function() {
        const sceneEl = this.el.sceneEl;
        if (this.data.watch) {
          this.observer = new MutationObserver(this.update.bind(this, null));
          this.observer.observe(sceneEl, { childList: true, subtree: true });
        }
      },
      pause: function() {
        if (this.observer) {
          this.observer.disconnect();
          this.observer = null;
        }
      },
      /**
       * Update list of entities to test for collision.
       */
      update: function() {
        const data = this.data;
        let objectEls;
        if (data.objects) {
          objectEls = this.el.sceneEl.querySelectorAll(data.objects);
        } else {
          objectEls = this.el.sceneEl.children;
        }
        this.els = Array.prototype.slice.call(objectEls);
      },
      tick: function() {
        const position = new THREE.Vector3(), meshPosition = new THREE.Vector3(), colliderScale = new THREE.Vector3(), size = new THREE.Vector3(), box = new THREE.Box3(), collisions = [], distanceMap = /* @__PURE__ */ new Map();
        return function(time) {
          if (!this.data.enabled) {
            return;
          }
          const prevCheckTime = this.prevCheckTime;
          if (prevCheckTime && time - prevCheckTime < this.data.interval) {
            return;
          }
          this.prevCheckTime = time;
          const el = this.el, data = this.data, mesh = el.getObject3D("mesh");
          let colliderRadius;
          if (!mesh) {
            return;
          }
          collisions.length = 0;
          distanceMap.clear();
          el.object3D.getWorldPosition(position);
          el.object3D.getWorldScale(colliderScale);
          colliderRadius = data.radius * scaleFactor(colliderScale);
          this.els.forEach(intersect);
          collisions.sort((a, b) => distanceMap.get(a) > distanceMap.get(b) ? 1 : -1).forEach(this.handleHit);
          this.collisions.filter((el2) => !distanceMap.has(el2)).forEach(this.handleHitEnd);
          copyArray(this.collisions, collisions);
          function intersect(el2) {
            let radius, mesh2, distance2, extent;
            if (!el2.isEntity) {
              return;
            }
            mesh2 = el2.getObject3D("mesh");
            if (!mesh2) {
              return;
            }
            box.setFromObject(mesh2).getSize(size);
            extent = Math.max(size.x, size.y, size.z) / 2;
            radius = Math.sqrt(2 * extent * extent);
            box.getCenter(meshPosition);
            if (!radius) {
              return;
            }
            distance2 = position.distanceTo(meshPosition);
            if (distance2 < radius + colliderRadius) {
              collisions.push(el2);
              distanceMap.set(el2, distance2);
            }
          }
          function scaleFactor(scaleVec) {
            return Math.max(scaleVec.x, scaleVec.y, scaleVec.z);
          }
        };
      }(),
      handleHit: function(targetEl) {
        targetEl.emit("hit");
        targetEl.addState(this.data.state);
        this.eventDetail.el = targetEl;
        this.el.emit("hit", this.eventDetail);
      },
      handleHitEnd: function(targetEl) {
        targetEl.emit("hitend");
        targetEl.removeState(this.data.state);
        this.eventDetail.el = targetEl;
        this.el.emit("hitend", this.eventDetail);
      }
    });
    function copyArray(dest, source) {
      dest.length = 0;
      for (let i = 0; i < source.length; i++) {
        dest[i] = source[i];
      }
    }
  }
});

// node_modules/aframe-extras/src/misc/index.js
var require_misc = __commonJS({
  "node_modules/aframe-extras/src/misc/index.js"() {
    require_checkpoint();
    require_cube_env_map();
    require_grab();
    require_normal_material();
    require_sphere_collider();
  }
});

// node_modules/aframe-extras/src/pathfinding/nav-mesh.js
var require_nav_mesh = __commonJS({
  "node_modules/aframe-extras/src/pathfinding/nav-mesh.js"(exports, module) {
    module.exports = AFRAME.registerComponent("nav-mesh", {
      schema: {
        nodeName: { type: "string" }
      },
      init: function() {
        this.system = this.el.sceneEl.systems.nav;
        this.hasLoadedNavMesh = false;
        this.nodeName = this.data.nodeName;
        this.el.addEventListener("object3dset", this.loadNavMesh.bind(this));
      },
      play: function() {
        if (!this.hasLoadedNavMesh) this.loadNavMesh();
      },
      loadNavMesh: function() {
        var self2 = this;
        const object = this.el.getObject3D("mesh");
        const scene = this.el.sceneEl.object3D;
        if (!object) return;
        let navMesh;
        object.traverse((node) => {
          if (node.isMesh && (!self2.nodeName || node.name === self2.nodeName)) navMesh = node;
        });
        if (!navMesh) return;
        const navMeshGeometry = navMesh.geometry.clone();
        navMesh.updateWorldMatrix(true, false);
        navMeshGeometry.applyMatrix4(navMesh.matrixWorld);
        this.system.setNavMeshGeometry(navMeshGeometry);
        this.hasLoadedNavMesh = true;
      }
    });
  }
});

// node_modules/aframe-extras/src/pathfinding/nav-agent.js
var require_nav_agent = __commonJS({
  "node_modules/aframe-extras/src/pathfinding/nav-agent.js"(exports, module) {
    module.exports = AFRAME.registerComponent("nav-agent", {
      schema: {
        destination: { type: "vec3" },
        active: { default: false },
        speed: { default: 2 }
      },
      init: function() {
        this.system = this.el.sceneEl.systems.nav;
        this.system.addAgent(this);
        this.group = null;
        this.path = [];
        this.raycaster = new THREE.Raycaster();
      },
      remove: function() {
        this.system.removeAgent(this);
      },
      update: function() {
        this.path.length = 0;
      },
      updateNavLocation: function() {
        this.group = null;
        this.path = [];
      },
      tick: function() {
        const vDest = new THREE.Vector3();
        const vDelta = new THREE.Vector3();
        const vNext = new THREE.Vector3();
        return function(t, dt) {
          const el = this.el;
          const data = this.data;
          const raycaster = this.raycaster;
          const speed = data.speed * dt / 1e3;
          if (!data.active) return;
          if (!this.path.length) {
            const position = this.el.object3D.position;
            this.group = this.group || this.system.getGroup(position);
            this.path = this.system.getPath(position, vDest.copy(data.destination), this.group) || [];
            el.emit("navigation-start");
          }
          if (!this.path.length) {
            console.warn("[nav] Unable to find path to %o.", data.destination);
            this.el.setAttribute("nav-agent", { active: false });
            el.emit("navigation-end");
            return;
          }
          const vCurrent = el.object3D.position;
          const vWaypoint = this.path[0];
          vDelta.subVectors(vWaypoint, vCurrent);
          const distance2 = vDelta.length();
          let gazeTarget;
          if (distance2 < speed) {
            this.path.shift();
            if (!this.path.length) {
              this.el.setAttribute("nav-agent", { active: false });
              el.emit("navigation-end");
              return;
            }
            vNext.copy(vCurrent);
            gazeTarget = this.path[0];
          } else {
            vNext.copy(vDelta.setLength(speed)).add(vCurrent);
            gazeTarget = vWaypoint;
          }
          gazeTarget.y = vCurrent.y;
          el.object3D.lookAt(gazeTarget);
          raycaster.ray.origin.copy(vNext);
          raycaster.ray.origin.y += 1.5;
          raycaster.ray.direction = { x: 0, y: -1, z: 0 };
          const intersections = raycaster.intersectObject(this.system.getNavMesh());
          if (!intersections.length) {
            vCurrent.copy(vNext);
          } else {
            vDelta.subVectors(intersections[0].point, vCurrent);
            vCurrent.add(vDelta.setLength(speed));
          }
        };
      }()
    });
  }
});

// node_modules/three-pathfinding/dist/three-pathfinding.module.js
var three_pathfinding_module_exports = {};
__export(three_pathfinding_module_exports, {
  Pathfinding: () => f,
  PathfindingHelper: () => v
});
var d, p, g, f, v;
var init_three_pathfinding_module = __esm({
  "node_modules/three-pathfinding/dist/three-pathfinding.module.js"() {
    init_three_module();
    d = class {
      static roundNumber(t, e) {
        const s = Math.pow(10, e);
        return Math.round(t * s) / s;
      }
      static sample(t) {
        return t[Math.floor(Math.random() * t.length)];
      }
      static distanceToSquared(t, e) {
        var s = t.x - e.x, r = t.y - e.y, n = t.z - e.z;
        return s * s + r * r + n * n;
      }
      static isPointInPoly(t, e) {
        for (var s = false, r = -1, n = t.length, o = n - 1; ++r < n; o = r) (t[r].z <= e.z && e.z < t[o].z || t[o].z <= e.z && e.z < t[r].z) && e.x < (t[o].x - t[r].x) * (e.z - t[r].z) / (t[o].z - t[r].z) + t[r].x && (s = !s);
        return s;
      }
      static isVectorInPolygon(t, e, s) {
        var r = 1e5, n = -1e5, o = [];
        return e.vertexIds.forEach((t2) => {
          r = Math.min(s[t2].y, r), n = Math.max(s[t2].y, n), o.push(s[t2]);
        }), !!(t.y < n + 0.5 && t.y > r - 0.5 && this.isPointInPoly(o, t));
      }
      static triarea2(t, e, s) {
        return (s.x - t.x) * (e.z - t.z) - (e.x - t.x) * (s.z - t.z);
      }
      static vequal(t, e) {
        return this.distanceToSquared(t, e) < 1e-5;
      }
      static mergeVertices(s, r = 1e-4) {
        r = Math.max(r, Number.EPSILON);
        for (var n = {}, o = s.getIndex(), i = s.getAttribute("position"), h = o ? o.count : i.count, c = 0, a = [], u = [], l = Math.log10(1 / r), d2 = Math.pow(10, l), p2 = 0; p2 < h; p2++) {
          var g2 = o ? o.getX(p2) : p2, f2 = "";
          f2 += ~~(i.getX(g2) * d2) + ",", f2 += ~~(i.getY(g2) * d2) + ",", (f2 += ~~(i.getZ(g2) * d2) + ",") in n ? a.push(n[f2]) : (u.push(i.getX(g2)), u.push(i.getY(g2)), u.push(i.getZ(g2)), n[f2] = c, a.push(c), c++);
        }
        const v2 = new BufferAttribute(new Float32Array(u), i.itemSize, i.normalized), b = new BufferGeometry();
        return b.setAttribute("position", v2), b.setIndex(a), b;
      }
    };
    p = class {
      constructor(t) {
        this.content = [], this.scoreFunction = t;
      }
      push(t) {
        this.content.push(t), this.sinkDown(this.content.length - 1);
      }
      pop() {
        const t = this.content[0], e = this.content.pop();
        return this.content.length > 0 && (this.content[0] = e, this.bubbleUp(0)), t;
      }
      remove(t) {
        const e = this.content.indexOf(t), s = this.content.pop();
        e !== this.content.length - 1 && (this.content[e] = s, this.scoreFunction(s) < this.scoreFunction(t) ? this.sinkDown(e) : this.bubbleUp(e));
      }
      size() {
        return this.content.length;
      }
      rescoreElement(t) {
        this.sinkDown(this.content.indexOf(t));
      }
      sinkDown(t) {
        const e = this.content[t];
        for (; t > 0; ) {
          const s = (t + 1 >> 1) - 1, r = this.content[s];
          if (!(this.scoreFunction(e) < this.scoreFunction(r))) break;
          this.content[s] = e, this.content[t] = r, t = s;
        }
      }
      bubbleUp(t) {
        const e = this.content.length, s = this.content[t], r = this.scoreFunction(s);
        for (; ; ) {
          const n = t + 1 << 1, o = n - 1;
          let i, h = null;
          if (o < e && (i = this.scoreFunction(this.content[o]), i < r && (h = o)), n < e && this.scoreFunction(this.content[n]) < (null === h ? r : i) && (h = n), null === h) break;
          this.content[t] = this.content[h], this.content[h] = s, t = h;
        }
      }
    };
    g = class {
      constructor() {
        this.portals = [];
      }
      push(t, e) {
        void 0 === e && (e = t), this.portals.push({ left: t, right: e });
      }
      stringPull() {
        const t = this.portals, e = [];
        let s, r, n, o = 0, i = 0, h = 0;
        s = t[0].left, r = t[0].left, n = t[0].right, e.push(s);
        for (let c = 1; c < t.length; c++) {
          const a = t[c].left, u = t[c].right;
          if (d.triarea2(s, n, u) <= 0) {
            if (!(d.vequal(s, n) || d.triarea2(s, r, u) > 0)) {
              e.push(r), s = r, o = i, r = s, n = s, i = o, h = o, c = o;
              continue;
            }
            n = u, h = c;
          }
          if (d.triarea2(s, r, a) >= 0) {
            if (!(d.vequal(s, r) || d.triarea2(s, n, a) < 0)) {
              e.push(n), s = n, o = h, r = s, n = s, i = o, h = o, c = o;
              continue;
            }
            r = a, i = c;
          }
        }
        return 0 !== e.length && d.vequal(e[e.length - 1], t[t.length - 1].left) || e.push(t[t.length - 1].left), this.path = e, e;
      }
    };
    f = class {
      constructor() {
        this.zones = {};
      }
      static createZone(t, e = 1e-4) {
        return (class {
          static buildZone(t2, e2) {
            const r = this._buildNavigationMesh(t2, e2), n = {};
            r.vertices.forEach((t3) => {
              t3.x = d.roundNumber(t3.x, 2), t3.y = d.roundNumber(t3.y, 2), t3.z = d.roundNumber(t3.z, 2);
            }), n.vertices = r.vertices;
            const o = this._buildPolygonGroups(r);
            return n.groups = new Array(o.length), o.forEach((t3, e3) => {
              const r2 = /* @__PURE__ */ new Map();
              t3.forEach((t4, e4) => {
                r2.set(t4, e4);
              });
              const o2 = new Array(t3.length);
              t3.forEach((t4, e4) => {
                const i = [];
                t4.neighbours.forEach((t5) => i.push(r2.get(t5)));
                const h = [];
                t4.neighbours.forEach((e5) => h.push(this._getSharedVerticesInOrder(t4, e5)));
                const c = new Vector3(0, 0, 0);
                c.add(n.vertices[t4.vertexIds[0]]), c.add(n.vertices[t4.vertexIds[1]]), c.add(n.vertices[t4.vertexIds[2]]), c.divideScalar(3), c.x = d.roundNumber(c.x, 2), c.y = d.roundNumber(c.y, 2), c.z = d.roundNumber(c.z, 2), o2[e4] = { id: e4, neighbours: i, vertexIds: t4.vertexIds, centroid: c, portals: h };
              }), n.groups[e3] = o2;
            }), n;
          }
          static _buildNavigationMesh(t2, e2) {
            return t2 = d.mergeVertices(t2, e2), this._buildPolygonsFromGeometry(t2);
          }
          static _spreadGroupId(t2) {
            let e2 = /* @__PURE__ */ new Set([t2]);
            for (; e2.size > 0; ) {
              const s = e2;
              e2 = /* @__PURE__ */ new Set(), s.forEach((s2) => {
                s2.group = t2.group, s2.neighbours.forEach((t3) => {
                  void 0 === t3.group && e2.add(t3);
                });
              });
            }
          }
          static _buildPolygonGroups(t2) {
            const e2 = [];
            return t2.polygons.forEach((t3) => {
              void 0 !== t3.group ? e2[t3.group].push(t3) : (t3.group = e2.length, this._spreadGroupId(t3), e2.push([t3]));
            }), e2;
          }
          static _buildPolygonNeighbours(t2, e2) {
            const s = /* @__PURE__ */ new Set(), r = e2[t2.vertexIds[1]], n = e2[t2.vertexIds[2]];
            return e2[t2.vertexIds[0]].forEach((e3) => {
              e3 !== t2 && (r.includes(e3) || n.includes(e3)) && s.add(e3);
            }), r.forEach((e3) => {
              e3 !== t2 && n.includes(e3) && s.add(e3);
            }), s;
          }
          static _buildPolygonsFromGeometry(t2) {
            const e2 = [], r = [], n = t2.attributes.position, o = t2.index, i = [];
            for (let t3 = 0; t3 < n.count; t3++) r.push(new Vector3().fromBufferAttribute(n, t3)), i[t3] = [];
            for (let s = 0; s < t2.index.count; s += 3) {
              const t3 = o.getX(s), r2 = o.getX(s + 1), n2 = o.getX(s + 2), h = { vertexIds: [t3, r2, n2], neighbours: null };
              e2.push(h), i[t3].push(h), i[r2].push(h), i[n2].push(h);
            }
            return e2.forEach((t3) => {
              t3.neighbours = this._buildPolygonNeighbours(t3, i);
            }), { polygons: e2, vertices: r };
          }
          static _getSharedVerticesInOrder(t2, e2) {
            const s = t2.vertexIds, r = s[0], n = s[1], o = s[2], i = e2.vertexIds, h = i.includes(r), c = i.includes(n), a = i.includes(o);
            return h && c && a ? Array.from(s) : h && c ? [r, n] : c && a ? [n, o] : h && a ? [o, r] : (console.warn("Error processing navigation mesh neighbors; neighbors with <2 shared vertices found."), []);
          }
        }).buildZone(t, e);
      }
      setZoneData(t, e) {
        this.zones[t] = e;
      }
      getRandomNode(t, e, r, n) {
        if (!this.zones[t]) return new Vector3();
        r = r || null, n = n || 0;
        const o = [];
        return this.zones[t].groups[e].forEach((t2) => {
          r && n ? d.distanceToSquared(r, t2.centroid) < n * n && o.push(t2.centroid) : o.push(t2.centroid);
        }), d.sample(o) || new Vector3();
      }
      getClosestNode(t, e, s, r = false) {
        const n = this.zones[e].vertices;
        let o = null, i = Infinity;
        return this.zones[e].groups[s].forEach((e2) => {
          const s2 = d.distanceToSquared(e2.centroid, t);
          s2 < i && (!r || d.isVectorInPolygon(t, e2, n)) && (o = e2, i = s2);
        }), o;
      }
      findPath(t, e, r, n) {
        const o = this.zones[r].groups[n], i = this.zones[r].vertices, h = this.getClosestNode(t, r, n, true), c = this.getClosestNode(e, r, n, true);
        if (!h || !c) return null;
        const a = (class {
          static init(t2) {
            for (let e2 = 0; e2 < t2.length; e2++) {
              const s = t2[e2];
              s.f = 0, s.g = 0, s.h = 0, s.cost = 1, s.visited = false, s.closed = false, s.parent = null;
            }
          }
          static cleanUp(t2) {
            for (let e2 = 0; e2 < t2.length; e2++) {
              const s = t2[e2];
              delete s.f, delete s.g, delete s.h, delete s.cost, delete s.visited, delete s.closed, delete s.parent;
            }
          }
          static heap() {
            return new p(function(t2) {
              return t2.f;
            });
          }
          static search(t2, e2, s) {
            this.init(t2);
            const r2 = this.heap();
            for (r2.push(e2); r2.size() > 0; ) {
              const e3 = r2.pop();
              if (e3 === s) {
                let t3 = e3;
                const s2 = [];
                for (; t3.parent; ) s2.push(t3), t3 = t3.parent;
                return this.cleanUp(s2), s2.reverse();
              }
              e3.closed = true;
              const n2 = this.neighbours(t2, e3);
              for (let t3 = 0, o2 = n2.length; t3 < o2; t3++) {
                const o3 = n2[t3];
                if (o3.closed) continue;
                const i2 = e3.g + o3.cost, h2 = o3.visited;
                if (!h2 || i2 < o3.g) {
                  if (o3.visited = true, o3.parent = e3, !o3.centroid || !s.centroid) throw new Error("Unexpected state");
                  o3.h = o3.h || this.heuristic(o3.centroid, s.centroid), o3.g = i2, o3.f = o3.g + o3.h, h2 ? r2.rescoreElement(o3) : r2.push(o3);
                }
              }
            }
            return [];
          }
          static heuristic(t2, e2) {
            return d.distanceToSquared(t2, e2);
          }
          static neighbours(t2, e2) {
            const s = [];
            for (let r2 = 0; r2 < e2.neighbours.length; r2++) s.push(t2[e2.neighbours[r2]]);
            return s;
          }
        }).search(o, h, c), u = function(t2, e2) {
          for (var s = 0; s < t2.neighbours.length; s++) if (t2.neighbours[s] === e2.id) return t2.portals[s];
        }, l = new g();
        l.push(t);
        for (let t2 = 0; t2 < a.length; t2++) {
          const e2 = a[t2], s = a[t2 + 1];
          if (s) {
            const t3 = u(e2, s);
            l.push(i[t3[0]], i[t3[1]]);
          }
        }
        l.push(e), l.stringPull();
        const f2 = l.path.map((t2) => new Vector3(t2.x, t2.y, t2.z));
        return f2.shift(), f2;
      }
    };
    f.prototype.getGroup = function() {
      const t = new Plane();
      return function(e, s, r = false) {
        if (!this.zones[e]) return null;
        let n = null, o = Math.pow(50, 2);
        const i = this.zones[e];
        for (let e2 = 0; e2 < i.groups.length; e2++) {
          const h = i.groups[e2];
          for (const c of h) {
            if (r && (t.setFromCoplanarPoints(i.vertices[c.vertexIds[0]], i.vertices[c.vertexIds[1]], i.vertices[c.vertexIds[2]]), Math.abs(t.distanceToPoint(s)) < 0.01) && d.isPointInPoly([i.vertices[c.vertexIds[0]], i.vertices[c.vertexIds[1]], i.vertices[c.vertexIds[2]]], s)) return e2;
            const h2 = d.distanceToSquared(c.centroid, s);
            h2 < o && (n = e2, o = h2);
          }
        }
        return n;
      };
    }(), f.prototype.clampStep = function() {
      const t = new Vector3(), e = new Plane(), o = new Triangle(), i = new Vector3();
      let h, c, a = new Vector3();
      return function(s, r, n, u, l, d2) {
        const p2 = this.zones[u].vertices, g2 = this.zones[u].groups[l], f2 = [n], v2 = {};
        v2[n.id] = 0, h = void 0, a.set(0, 0, 0), c = Infinity, e.setFromCoplanarPoints(p2[n.vertexIds[0]], p2[n.vertexIds[1]], p2[n.vertexIds[2]]), e.projectPoint(r, t), i.copy(t);
        for (let e2 = f2.pop(); e2; e2 = f2.pop()) {
          o.set(p2[e2.vertexIds[0]], p2[e2.vertexIds[1]], p2[e2.vertexIds[2]]), o.closestPointToPoint(i, t), t.distanceToSquared(i) < c && (h = e2, a.copy(t), c = t.distanceToSquared(i));
          const s2 = v2[e2.id];
          if (!(s2 > 2)) for (let t2 = 0; t2 < e2.neighbours.length; t2++) {
            const r2 = g2[e2.neighbours[t2]];
            r2.id in v2 || (f2.push(r2), v2[r2.id] = s2 + 1);
          }
        }
        return d2.copy(a), h;
      };
    }();
    v = class extends Object3D {
      constructor() {
        super(), this._playerMarker = new Mesh(new SphereGeometry(0.25, 32, 32), new MeshBasicMaterial({ color: 15631215 })), this._targetMarker = new Mesh(new BoxGeometry(0.3, 0.3, 0.3), new MeshBasicMaterial({ color: 14469912 })), this._nodeMarker = new Mesh(new BoxGeometry(0.1, 0.8, 0.1), new MeshBasicMaterial({ color: 4417387 })), this._stepMarker = new Mesh(new BoxGeometry(0.1, 1, 0.1), new MeshBasicMaterial({ color: 14472114 })), this._pathMarker = new Object3D(), this._pathLineMaterial = new LineBasicMaterial({ color: 41903, linewidth: 2 }), this._pathPointMaterial = new MeshBasicMaterial({ color: 41903 }), this._pathPointGeometry = new SphereGeometry(0.08), this._markers = [this._playerMarker, this._targetMarker, this._nodeMarker, this._stepMarker, this._pathMarker], this._markers.forEach((t) => {
          t.visible = false, this.add(t);
        });
      }
      setPath(s) {
        for (; this._pathMarker.children.length; ) this._pathMarker.children[0].visible = false, this._pathMarker.remove(this._pathMarker.children[0]);
        s = [this._playerMarker.position].concat(s);
        const r = new BufferGeometry();
        r.setAttribute("position", new BufferAttribute(new Float32Array(3 * s.length), 3));
        for (let t = 0; t < s.length; t++) r.attributes.position.setXYZ(t, s[t].x, s[t].y + 0.2, s[t].z);
        this._pathMarker.add(new Line(r, this._pathLineMaterial));
        for (let t = 0; t < s.length - 1; t++) {
          const e = new Mesh(this._pathPointGeometry, this._pathPointMaterial);
          e.position.copy(s[t]), e.position.y += 0.2, this._pathMarker.add(e);
        }
        return this._pathMarker.visible = true, this;
      }
      setPlayerPosition(t) {
        return this._playerMarker.position.copy(t), this._playerMarker.visible = true, this;
      }
      setTargetPosition(t) {
        return this._targetMarker.position.copy(t), this._targetMarker.visible = true, this;
      }
      setNodePosition(t) {
        return this._nodeMarker.position.copy(t), this._nodeMarker.visible = true, this;
      }
      setStepPosition(t) {
        return this._stepMarker.position.copy(t), this._stepMarker.visible = true, this;
      }
      reset() {
        for (; this._pathMarker.children.length; ) this._pathMarker.children[0].visible = false, this._pathMarker.remove(this._pathMarker.children[0]);
        return this._markers.forEach((t) => {
          t.visible = false;
        }), this;
      }
    };
  }
});

// node_modules/aframe-extras/src/pathfinding/system.js
var require_system = __commonJS({
  "node_modules/aframe-extras/src/pathfinding/system.js"(exports, module) {
    var { Pathfinding } = (init_three_pathfinding_module(), __toCommonJS(three_pathfinding_module_exports));
    var pathfinder = new Pathfinding();
    var ZONE = "level";
    module.exports = AFRAME.registerSystem("nav", {
      init: function() {
        this.navMesh = null;
        this.agents = /* @__PURE__ */ new Set();
      },
      /**
       * @param {THREE.Geometry} geometry
       */
      setNavMeshGeometry: function(geometry) {
        this.navMesh = new THREE.Mesh(geometry);
        pathfinder.setZoneData(ZONE, Pathfinding.createZone(geometry));
        Array.from(this.agents).forEach((agent) => agent.updateNavLocation());
      },
      /**
       * @return {THREE.Mesh}
       */
      getNavMesh: function() {
        return this.navMesh;
      },
      /**
       * @param {NavAgent} ctrl
       */
      addAgent: function(ctrl) {
        this.agents.add(ctrl);
      },
      /**
       * @param {NavAgent} ctrl
       */
      removeAgent: function(ctrl) {
        this.agents.delete(ctrl);
      },
      /**
       * @param  {THREE.Vector3} start
       * @param  {THREE.Vector3} end
       * @param  {number} groupID
       * @return {Array<THREE.Vector3>}
       */
      getPath: function(start, end, groupID) {
        return this.navMesh ? pathfinder.findPath(start, end, ZONE, groupID) : null;
      },
      /**
       * @param {THREE.Vector3} position
       * @return {number}
       */
      getGroup: function(position) {
        return this.navMesh ? pathfinder.getGroup(ZONE, position) : null;
      },
      /**
       * @param  {THREE.Vector3} position
       * @param  {number} groupID
       * @return {Node}
       */
      getNode: function(position, groupID) {
        return this.navMesh ? pathfinder.getClosestNode(position, ZONE, groupID, true) : null;
      },
      /**
       * @param  {THREE.Vector3} start Starting position.
       * @param  {THREE.Vector3} end Desired ending position.
       * @param  {number} groupID
       * @param  {Node} node
       * @param  {THREE.Vector3} endTarget (Output) Adjusted step end position.
       * @return {Node} Current node, after step is taken.
       */
      clampStep: function(start, end, groupID, node, endTarget) {
        if (!this.navMesh) {
          endTarget.copy(end);
          return null;
        } else if (!node) {
          endTarget.copy(end);
          return this.getNode(end, groupID);
        }
        return pathfinder.clampStep(start, end, node, ZONE, groupID, endTarget);
      }
    });
  }
});

// node_modules/aframe-extras/src/pathfinding/index.js
var require_pathfinding = __commonJS({
  "node_modules/aframe-extras/src/pathfinding/index.js"() {
    require_nav_mesh();
    require_nav_agent();
    require_system();
  }
});

// node_modules/aframe-extras/src/primitives/a-grid.js
var require_a_grid = __commonJS({
  "node_modules/aframe-extras/src/primitives/a-grid.js"(exports, module) {
    module.exports = AFRAME.registerPrimitive("a-grid", {
      defaultComponents: {
        geometry: {
          primitive: "plane",
          width: 75,
          height: 75
        },
        rotation: { x: -90, y: 0, z: 0 },
        material: {
          src: "url(https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v1.16.3/assets/grid.png)",
          repeat: "75 75"
        }
      },
      mappings: {
        width: "geometry.width",
        height: "geometry.height",
        src: "material.src"
      }
    });
  }
});

// node_modules/aframe-extras/src/primitives/a-tube.js
var require_a_tube = __commonJS({
  "node_modules/aframe-extras/src/primitives/a-tube.js"(exports, module) {
    module.exports.Primitive = AFRAME.registerPrimitive("a-tube", {
      defaultComponents: {
        tube: {}
      },
      mappings: {
        path: "tube.path",
        segments: "tube.segments",
        radius: "tube.radius",
        "radial-segments": "tube.radialSegments",
        closed: "tube.closed"
      }
    });
    module.exports.Component = AFRAME.registerComponent("tube", {
      schema: {
        path: { default: [] },
        segments: { default: 64 },
        radius: { default: 1 },
        radialSegments: { default: 8 },
        closed: { default: false }
      },
      init: function() {
        const el = this.el, data = this.data;
        let material = el.components.material;
        if (!data.path.length) {
          console.error("[a-tube] `path` property expected but not found.");
          return;
        }
        const curve = new THREE.CatmullRomCurve3(data.path.map(function(point) {
          point = point.split(" ");
          return new THREE.Vector3(Number(point[0]), Number(point[1]), Number(point[2]));
        }));
        const geometry = new THREE.TubeGeometry(
          curve,
          data.segments,
          data.radius,
          data.radialSegments,
          data.closed
        );
        if (!material) {
          material = {};
          material.material = new THREE.MeshPhongMaterial();
        }
        this.mesh = new THREE.Mesh(geometry, material.material);
        this.el.setObject3D("mesh", this.mesh);
      },
      update: function(prevData) {
        if (!Object.keys(prevData).length) return;
        this.remove();
        this.init();
      },
      remove: function() {
        if (this.mesh) this.el.removeObject3D("mesh");
      }
    });
  }
});

// node_modules/aframe-extras/src/primitives/index.js
var require_primitives = __commonJS({
  "node_modules/aframe-extras/src/primitives/index.js"() {
    require_a_grid();
    require_a_ocean();
    require_a_tube();
  }
});

// node_modules/aframe-extras/index.js
require_controls();
require_loaders();
require_misc();
require_pathfinding();
require_primitives();
/*! Bundled license information:

three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three/examples/jsm/libs/fflate.module.js:
  (*!
  fflate - fast JavaScript compression/decompression
  <https://101arrowz.github.io/fflate>
  Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
  version 0.8.2
  *)
*/
//# sourceMappingURL=aframe-extras.js.map
